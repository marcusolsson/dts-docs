// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../dayjs
//   ../../react
//   ../../@mui/material
//   ../../history
//   ../../@mui/material/TextField
//   ../../@mui/material/Box
//   ../../@mui/material/Button
//   ../../@mui/material/IconButton
//   ../../@mui/material/Fab
//   ../../@mui/system
//   ../../@mui/material/Stack
//   ../../@mui/material/Paper
//   ../../@mui/material/styles
//   ../../@mui/material/Chip

declare module "react-declarative" {
  import "./polyfills";
  import { TypedField as TypedFieldInternal } from "react-declarative/model/TypedField";
  import { IField as IFieldInternal } from "react-declarative/model/IField";
  import { IEntity as IEntityInternal } from "react-declarative/model/IEntity";
  import { IManaged as IManagedInternal } from "react-declarative/model/IManaged";
  import { IColumn as IColumnInternal } from "react-declarative/model/IColumn";
  import { IApiPaginatorParams as IApiPaginatorParamsInternal } from "react-declarative/components/List/api/useApiPaginator";
  import { IArrayPaginatorParams as IArrayPaginatorParamsInternal } from "react-declarative/components/List/api/useArrayPaginator";
  export { useColumnConfig } from "react-declarative/components/List";
  import { IApiHandlerParams as IApiHandlerParamsInternal } from "react-declarative/components/One/api/useApiHandler";
  export type IListApiPaginatorParams<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > = IApiPaginatorParamsInternal<FilterData, RowData>;
  export type ILastArrayPaginatorParams<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > = IArrayPaginatorParamsInternal<FilterData, RowData>;
  export type IOneApiHandlerParams<Data = any> =
    IApiHandlerParamsInternal<Data>;
  export { FieldType } from "react-declarative/model/FieldType";
  export { ColumnType } from "react-declarative/model/ColumnType";
  export { ActionType } from "react-declarative/model/ActionType";
  export { SelectionMode } from "react-declarative/model/SelectionMode";
  import { IListApi as IListApiInternal } from "react-declarative/model/IListApi";
  import { IOneApi as IOneApiInternal } from "react-declarative/model/IOneApi";
  import { IListOperation as IListOperationInternal } from "react-declarative/model/IListOperation";
  import { IListRowAction as IListRowActionInternal } from "react-declarative/model/IListRowAction";
  import { IListAction as IListActionInternal } from "react-declarative/model/IListProps";
  import { IListChip as IListChipInternal } from "react-declarative/model/IListProps";
  import { IOption as IOptionInternal } from "react-declarative/model/IOption";
  import { IBreadcrumbsOption as IBreadcrumbsOptionInternal } from "react-declarative/model/IBreadcrumbsOption";
  export { createServiceManager } from "react-declarative/helpers/serviceManager";
  export { serviceManager } from "react-declarative/helpers/serviceManager";
  import { IService as IServiceInternal } from "react-declarative/helpers/serviceManager";
  export type IService = IServiceInternal;
  export { createRouteItemManager } from "react-declarative/helpers/routeManager";
  export { createRouteParamsManager } from "react-declarative/helpers/routeManager";
  export { usePreventAutofill } from "react-declarative/hooks/usePreventAutofill";
  export { useContextMenu } from "react-declarative/hooks/useContextMenu";
  export { useRouteItem } from "react-declarative/hooks/useRouteItem";
  export { useRouteParams } from "react-declarative/hooks/useRouteParams";
  export { useWatchChanges } from "react-declarative/hooks/useWatchChanges";
  export { useForceUpdate } from "react-declarative/hooks/useForceUpdate";
  export { useLocalHistory } from "react-declarative/hooks/useLocalHistory";
  export { RouteManager } from "react-declarative/helpers/routeManager";
  export { toRouteUrl } from "react-declarative/utils/toRouteUrl";
  export { parseRouteUrl } from "react-declarative/utils/parseRouteUrl";
  export { prefetch } from "react-declarative/helpers/serviceManager";
  export { unload } from "react-declarative/helpers/serviceManager";
  export { provide } from "react-declarative/helpers/serviceManager";
  export { inject } from "react-declarative/helpers/serviceManager";
  export { waitForProvide } from "react-declarative/helpers/serviceManager";
  import {
    IMenuGroup as IMenuGroupInternal,
    IMenuOption as IMenuOptionInternal,
  } from "react-declarative/model/IMenuGroup";
  import { ListHandlerPagination as ListHandlerPaginationInternal } from "react-declarative/model/IListProps";
  import { ListHandlerSortModel as ListHandlerSortModelInternal } from "react-declarative/model/IListProps";
  import { ListHandlerChips as ListHandlerChipsInternal } from "react-declarative/model/IListProps";
  import { ListHandlerResult as ListHandlerResultInternal } from "react-declarative/model/IListProps";
  import { ListHandler as ListHandlerInternal } from "react-declarative/model/IListProps";
  import { OneHandler as OneHandlerInternal } from "react-declarative/model/IOneProps";
  import { useActualCallback } from "react-declarative/hooks/useActualCallback";
  import { useActualValue } from "react-declarative/hooks/useActualValue";
  import { useActualState } from "react-declarative/hooks/useActualState";
  import { useActualRef } from "react-declarative/hooks/useActualRef";
  import { useRenderWaiter } from "react-declarative/hooks/useRenderWaiter";
  import {
    useOneArray,
    oneArrayIncludes,
    isOneArray,
    toOneArray,
  } from "react-declarative/hooks/useOneArray";
  import { useAsyncProgress } from "react-declarative/hooks/useAsyncProgress";
  import { useAsyncAction } from "react-declarative/hooks/useAsyncAction";
  import { useAsyncValue } from "react-declarative/hooks/useAsyncValue";
  import { useSinglerunAction } from "react-declarative/hooks/useSinglerunAction";
  import { useQueuedAction } from "react-declarative/hooks/useQueuedAction";
  import { useMediaContext } from "react-declarative/hooks/useMediaContext";
  import { useAudioPlayer } from "react-declarative/hooks/useAudioPlayer";
  import { useChangeSubject } from "react-declarative/hooks/useChangeSubject";
  import { useReloadTrigger } from "react-declarative/hooks/useReloadTrigger";
  import { useSingleton } from "react-declarative/hooks/useSingleton";
  import { useBehaviorSubject } from "react-declarative/hooks/useBehaviorSubject";
  import { useSubscription } from "react-declarative/hooks/useSubscription";
  import { useSubjectValue } from "react-declarative/hooks/useSubjectValue";
  import { useElementSize } from "react-declarative/hooks/useElementSize";
  import { useWindowSize } from "react-declarative/hooks/useWindowSize";
  import { useSubject } from "react-declarative/hooks/useSubject";
  import { useChange } from "react-declarative/hooks/useChange";
  export { useConstraint } from "react-declarative/components";
  import { useModel } from "react-declarative/hooks/useModel";
  import { useEntity } from "react-declarative/hooks/useEntity";
  import { useListEditor } from "react-declarative/hooks/useListEditor";
  import { useMediaStreamBuilder } from "react-declarative/hooks/useMediaStreamBuilder";
  import { useCollection } from "react-declarative/hooks/useCollection";
  import { useRequestSnackbar } from "react-declarative/hooks/useRequestSnackbar";
  import { useModal } from "react-declarative/components/ModalProvider";
  import { useSnack } from "react-declarative/components/SnackProvider";
  import { useSize } from "react-declarative/components/SizeProvider";
  export {
    ModalManagerProvider,
    useModalManager,
  } from "react-declarative/components/ModalManager";
  export type { IModal } from "react-declarative/components/ModalManager";
  import { useList } from "react-declarative/hooks/useList";
  import { useFile } from "react-declarative/hooks/useFile";
  import { useConfirm } from "react-declarative/hooks/useConfirm";
  import { usePrompt } from "react-declarative/hooks/usePrompt";
  import { useAlert } from "react-declarative/hooks/useAlert";
  import { useDate } from "react-declarative/hooks/useDate";
  import { useTime } from "react-declarative/hooks/useTime";
  import { useOne } from "react-declarative/hooks/useOne";
  import { useOneTyped } from "react-declarative/hooks/useOne";
  import { useSearchParams } from "react-declarative/hooks/useSearchParams";
  import { useSearchState } from "react-declarative/hooks/useSearchState";
  export { useSearchParams };
  export { useSearchState };
  export { useElementSize };
  export { useWindowSize };
  import IAnything from "react-declarative/model/IAnything";
  import IRowData, { RowId } from "react-declarative/model/IRowData";
  export type { IRowData, RowId };
  import { ISwitchItem as ISwitchItemInternal } from "react-declarative/components";
  import { IActionFilter as IActionFilterInternal } from "react-declarative/components";
  import { IActionTrigger as IActionTriggerInternal } from "react-declarative/components";
  import { IScaffoldOption as IScaffoldOptionInternal } from "react-declarative/components";
  export type ISwitchItem = ISwitchItemInternal;
  export type IActionFilter = IActionFilterInternal;
  export type IActionTrigger<Data extends any = any> =
    IActionTriggerInternal<Data>;
  export type TypedField<
    Data = IAnything,
    Payload = IAnything,
  > = TypedFieldInternal<Data, Payload>;
  export type IField<Data = IAnything, Payload = IAnything> = IFieldInternal<
    Data,
    Payload
  >;
  export type IFieldEntity<
    Data = IAnything,
    Payload = IAnything,
  > = IEntityInternal<Data, Payload>;
  export type IFieldManaged<
    Data = IAnything,
    Value = IAnything,
  > = IManagedInternal<Data, Value>;
  export type ListHandler<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > = ListHandlerInternal<FilterData, RowData>;
  export type ListHandlerResult<RowData extends IRowData = IAnything> =
    ListHandlerResultInternal<RowData>;
  export type OneHandler<Data = IAnything> = OneHandlerInternal<Data>;
  export type ListHandlerPagination = ListHandlerPaginationInternal;
  export type ListHandlerSortModel<RowData extends IRowData = IAnything> =
    ListHandlerSortModelInternal<RowData>;
  export type ListHandlerChips<RowData extends IRowData = IAnything> =
    ListHandlerChipsInternal<RowData>;
  export type IListRowAction<RowData extends IRowData = IAnything> =
    IListRowActionInternal<RowData>;
  export type IListChip<RowData extends IRowData = IAnything> =
    IListChipInternal<RowData>;
  export type IListOperation<Data extends IRowData = any> =
    IListOperationInternal<Data>;
  export type IListAction<Data extends IRowData = any> =
    IListActionInternal<Data>;
  export type IListApi<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > = IListApiInternal<FilterData, RowData>;
  export type IOneApi<Data = IAnything> = IOneApiInternal<Data>;
  export type IMenuOption<Data = any> = IMenuOptionInternal<Data>;
  export type IMenuGroup<Data = any> = IMenuGroupInternal<Data>;
  export type IOption<Payload = any> = IOptionInternal<Payload>;
  export type IColumn<
    FilterData extends {} = IAnything,
    RowData extends IRowData = any,
    Payload = any,
  > = IColumnInternal<FilterData, RowData, Payload>;
  import {
    TGridSort as TGridSortInternal,
    IGridColumn as IGridColumnInternal,
    IGridAction as IGridActionInternal,
    ITile as ITileInternal,
  } from "react-declarative/components";
  export type ITile<
    RowData extends IRowData = any,
    Payload extends IAnything = IAnything,
  > = ITileInternal<RowData, Payload>;
  export type TGridSort<RowData extends IRowData = any> =
    TGridSortInternal<RowData>;
  export type IGridColumn<RowData extends IRowData = any> =
    IGridColumnInternal<RowData>;
  export type IGridAction<RowData extends IRowData = any> =
    IGridActionInternal<RowData>;
  export type IBreadcrumbsOption<Data = any> = IBreadcrumbsOptionInternal<Data>;
  export type IScaffoldOption<Data = any> = IScaffoldOptionInternal<Data>;
  export type pickOneTypedFn = ReturnType<typeof useOneTyped>;
  export type pickOneFn = ReturnType<typeof useOne>;
  export type pickDateFn = ReturnType<typeof useDate>;
  export type pickTimeFn = ReturnType<typeof useTime>;
  export type pickListFn = ReturnType<typeof useList>;
  export type pickConfirmFn = ReturnType<typeof useConfirm>;
  export type pickPromptFn = ReturnType<typeof usePrompt>;
  export type pickAlertFn = ReturnType<typeof useAlert>;
  export { default as dayjs } from "dayjs";
  export { DocumentView } from "react-declarative/components";
  export { ScrollTopView } from "react-declarative/components";
  export { OutletView } from "react-declarative/components";
  export { AlertView } from "react-declarative/components";
  export { ImageView } from "react-declarative/components";
  export { ConstraintView } from "react-declarative/components";
  export { DragDropView } from "react-declarative/components";
  export { FilesView } from "react-declarative/components";
  export { PaperView } from "react-declarative/components";
  export { ScrollView } from "react-declarative/components";
  export { ScaleView } from "react-declarative/components";
  export { FetchView } from "react-declarative/components";
  export { FadeView } from "react-declarative/components";
  export { WaitView } from "react-declarative/components";
  export { PingView } from "react-declarative/components";
  export { OfflineView } from "react-declarative/components";
  export { RevealView } from "react-declarative/components";
  export { SecretView } from "react-declarative/components";
  export { PortalView } from "react-declarative/components";
  export { ReloadView } from "react-declarative/components";
  export { RecordView } from "react-declarative/components";
  export { CardView } from "react-declarative/components";
  export { HtmlView } from "react-declarative/components";
  export { ErrorView } from "react-declarative/components";
  export { AuthView } from "react-declarative/components";
  export { LoaderView } from "react-declarative/components";
  export { VisibilityView } from "react-declarative/components";
  export { FeatureView } from "react-declarative/components";
  export { CalendarView } from "react-declarative/components";
  export { InfiniteView } from "react-declarative/components";
  export { TabsView } from "react-declarative/components";
  export { SearchView, ISearchItem } from "react-declarative/components";
  export {
    WizardView,
    WizardNavigation,
    WizardContainer,
  } from "react-declarative/components";
  export {
    VirtualView,
    VIRTUAL_VIEW_ROOT,
    VIRTUAL_VIEW_CHILD,
  } from "react-declarative/components";
  import { IBoard as IBoardInternal } from "react-declarative/components";
  import { IBoardColumn as IBoardColumnInternal } from "react-declarative/components";
  import { IBoardItem as IBoardItemInternal } from "react-declarative/components";
  import { IBoardRow as IBoardRowInternal } from "react-declarative/components";
  export type IBoardColumn<Data = any, Payload = any> = IBoardColumnInternal<
    Data,
    Payload
  >;
  export type IBoard<Data = any, Payload = any> = IBoardInternal<Data, Payload>;
  export type IBoardRow<Data = any, Payload = any> = IBoardRowInternal<
    Data,
    Payload
  >;
  export type IBoardItem<Data = any> = IBoardItemInternal<Data>;
  export { KanbanView } from "react-declarative/components";
  import {
    TreeView,
    ITreeViewNode as ITreeViewNodeInternal,
  } from "react-declarative/components";
  import { GridView } from "react-declarative/components";
  export type ITreeViewNode = ITreeViewNodeInternal;
  export { TreeView };
  export { GridView };
  export { ColorButton } from "react-declarative/components";
  import { ICardViewItemData } from "react-declarative/components/CardView";
  import { ICardViewAction as ICardViewActionInternal } from "react-declarative/components/CardView";
  import { ICardViewOperation as ICardViewOperationInternal } from "react-declarative/components/CardView";
  export type ICardViewAction<Data extends ICardViewItemData = any> =
    ICardViewActionInternal<Data>;
  export type ICardViewOperation<Data extends ICardViewItemData = any> =
    ICardViewOperationInternal<Data>;
  import { ICalendarTile as ICalendarTileInternal } from "react-declarative/components/CalendarView";
  import { ICalendarItem as ICalendarItemInternal } from "react-declarative/components/CalendarView";
  import { ICalendarRequest as ICalendarRequestInternal } from "react-declarative/components/CalendarView";
  export type ICalendarTile<
    Data = IAnything,
    Payload = IAnything,
  > = ICalendarTileInternal<Data, Payload>;
  export type ICalendarItem<
    Data = IAnything,
    Payload = IAnything,
  > = ICalendarItemInternal<Data, Payload>;
  export type ICalendarRequest<Payload = IAnything> =
    ICalendarRequestInternal<Payload>;
  import { IFeatureGroup as IFeatureGroupInternal } from "react-declarative/components/FeatureView";
  import { IFeature as IFeatureInternal } from "react-declarative/components/FeatureView";
  export type IFeatureGroup<
    Data = IAnything,
    Payload = IAnything,
  > = IFeatureGroupInternal<Data, Payload>;
  export type IFeature<
    Data = IAnything,
    Payload = IAnything,
  > = IFeatureInternal<Data, Payload>;
  export { FeatureType } from "react-declarative/components/FeatureView";
  export { IVisibilityGroup } from "react-declarative/components/VisibilityView";
  import { recordToExcelExport } from "react-declarative/components/RecordView";
  export { recordToExcelExport };
  export { ErrorBoundary } from "react-declarative/components";
  export { AutoSizer } from "react-declarative/components";
  export { ActionStopIcon } from "react-declarative/components";
  export { ActionTrigger } from "react-declarative/components";
  export { ActionFilter } from "react-declarative/components";
  export { ActionButton } from "react-declarative/components";
  export { ActionToggle } from "react-declarative/components";
  export { ActionMenu } from "react-declarative/components";
  export { ActionIcon } from "react-declarative/components";
  export { ActionFab } from "react-declarative/components";
  export {
    ActionModal,
    useActionModal,
    useActionModalTyped,
  } from "react-declarative/components";
  export {
    SearchModal,
    useSearchModal,
    useSearchModalTyped,
  } from "react-declarative/components";
  import { IMasterDetailOption as IMasterDetailOptionInternal } from "react-declarative/components";
  import { MasterDetailMode as MasterDetailModeInternal } from "react-declarative/components";
  export type IMasterDetailOption<Payload = any> =
    IMasterDetailOptionInternal<Payload>;
  export const MasterDetailMode: typeof MasterDetailModeInternal;
  import {
    IOutlet as IOutletInternal,
    IOutletProps as IOutletPropsInternal,
    IOutletModalProps as IOutletModalPropsInternal,
    IOutletModal as IOutletModalInternal,
  } from "react-declarative/components";
  export type IOutlet<
    Data = any,
    Payload = any,
    Params = any,
  > = IOutletInternal<Data, Payload, Params>;
  export type IOutletModal<
    Data = any,
    Payload = any,
    Params = any,
  > = IOutletModalInternal<Data, Payload, Params>;
  export type IOutletProps<
    Data = any,
    Payload = any,
    Params = any,
  > = IOutletPropsInternal<Data, Payload, Params>;
  export type IOutletModalProps<
    Data = any,
    Payload = any,
    Params = any,
  > = IOutletModalPropsInternal<Data, Payload, Params>;
  import {
    IWizardOutlet as IWizardOutletInternal,
    IWizardOutletProps as IWizardOutletPropsInternal,
    IWizardStep as IWizardStepInternal,
    IWizardModal as IWizardModalInternal,
    IWizardModalProps as IWizardModalPropsInternal,
  } from "react-declarative/components";
  export type IWizardStep = IWizardStepInternal;
  export type IWizardOutlet<Data = any, Payload = any> = IWizardOutletInternal<
    Data,
    Payload
  >;
  export type IWizardOutletProps<
    Data = any,
    Payload = any,
  > = IWizardOutletPropsInternal<Data, Payload>;
  export type IWizardModalProps<
    Data = any,
    Payload = any,
  > = IWizardModalPropsInternal<Data, Payload>;
  export type IWizardModal<Data = any, Payload = any> = IWizardModalInternal<
    Data,
    Payload
  >;
  import {
    ITabsOutlet as ITabsOutletInternal,
    IWizardOutletProps as ITabsOutletPropsInternal,
    ITabsStep as ITabsStepInternal,
    ITabsModal as ITabsModalInternal,
    ITabsModalProps as ITabsModalPropsInternal,
  } from "react-declarative/components";
  export type ITabsStep = ITabsStepInternal;
  export type ITabsOutlet<Data = any, Payload = any> = ITabsOutletInternal<
    Data,
    Payload
  >;
  export type ITabsOutletProps<
    Data = any,
    Payload = any,
  > = ITabsOutletPropsInternal<Data, Payload>;
  export type ITabsModalProps<
    Data = any,
    Payload = any,
  > = ITabsModalPropsInternal<Data, Payload>;
  export type ITabsModal<Data = any, Payload = any> = ITabsModalInternal<
    Data,
    Payload
  >;
  export {
    MasterDetail,
    MASTER_DETAIL_HEADER,
    MASTER_DETAIL_ROOT,
  } from "react-declarative/components";
  export { Async } from "react-declarative/components";
  export { If } from "react-declarative/components";
  export { OneIcon } from "react-declarative/components";
  export { OneButton } from "react-declarative/components";
  export { List, ListTyped } from "react-declarative/components";
  export { One, OneTyped, OneConfig } from "react-declarative/components";
  export { ClassicChipListSlot } from "react-declarative/components";
  export { ClassicFilterListSlot } from "react-declarative/components";
  export { DialogFilterListSlot } from "react-declarative/components";
  export { ModalFilterListSlot } from "react-declarative/components";
  export { ModernChipListSlot } from "react-declarative/components";
  import { Translate } from "react-declarative/components";
  export { Translate };
  export const registerTr: (
    locale?:
      | {
          [x: string]: string;
        }
      | undefined,
    transform?: ((str: string) => string) | undefined,
    config?: Partial<import("./components").ITranslateConfig> | undefined,
  ) => Translate;
  export { ModalProvider } from "react-declarative/components";
  export { SizeProvider } from "react-declarative/components";
  export { SnackProvider } from "react-declarative/components";
  import { IScaffold2Option as IScaffold2OptionInternal } from "react-declarative/components/Scaffold2";
  import { IScaffold2Action as IScaffold2ActionInternal } from "react-declarative/components/Scaffold2";
  import { IScaffold2Group as IScaffold2GroupInternal } from "react-declarative/components/Scaffold2";
  import { IScaffold2Tab as IScaffold2TabInternal } from "react-declarative/components/Scaffold2";
  export type IScaffold2Action<T = any> = IScaffold2ActionInternal<T>;
  export type IScaffold2Group<T = any> = IScaffold2GroupInternal<T>;
  export type IScaffold2Option<T = any> = IScaffold2OptionInternal<T>;
  export type IScaffold2Tab<T = any> = IScaffold2TabInternal<T>;
  import { Breadcrumbs2Type as Breadcrumbs2TypeInternal } from "react-declarative/components/Breadcrumbs2";
  import { IBreadcrumbs2Action as IBreadcrumbs2ActionInternal } from "react-declarative/components/Breadcrumbs2";
  import { IBreadcrumbs2Option as IBreadcrumbs2OptionInternal } from "react-declarative/components/Breadcrumbs2";
  export const Breadcrumbs2Type: typeof Breadcrumbs2TypeInternal;
  export type IBreadcrumbs2Action<Data = any> =
    IBreadcrumbs2ActionInternal<Data>;
  export type IBreadcrumbs2Option<Data = any> =
    IBreadcrumbs2OptionInternal<Data>;
  export { Scaffold } from "react-declarative/components";
  export { Scaffold2 } from "react-declarative/components";
  export { Countdown } from "react-declarative/components";
  export { Spinner } from "react-declarative/components";
  export { Grid } from "react-declarative/components";
  export { Tile } from "react-declarative/components";
  export { CopyButton } from "react-declarative/components";
  export { Copy } from "react-declarative/components";
  export { Chip } from "react-declarative/components";
  export {
    OneSlotFactory,
    OneDefaultSlots,
  } from "react-declarative/components";
  export {
    ListSlotFactory,
    ListDefaultSlots,
  } from "react-declarative/components";
  export { Breadcrumbs } from "react-declarative/components";
  export { Breadcrumbs2 } from "react-declarative/components";
  export { Switch } from "react-declarative/components";
  export { Center } from "react-declarative/components";
  export { Square } from "react-declarative/components";
  export { SubjectBinding } from "react-declarative/components";
  export { Dot } from "react-declarative/components";
  export { ScrollAdjust } from "react-declarative/components";
  export { NoSsr } from "react-declarative/components";
  export { OtherComboSlot } from "react-declarative/components";
  export { OtherItemsSlot } from "react-declarative/components";
  export { useHistoryStatePagination } from "react-declarative/components";
  export { useCachedPaginator } from "react-declarative/components";
  export { useArrayPaginator } from "react-declarative/components";
  export { useListSelection } from "react-declarative/components";
  export { useListAction } from "react-declarative/components";
  export { useApiPaginator } from "react-declarative/components";
  export { useCursorPaginator } from "react-declarative/components";
  export { useOffsetPaginator } from "react-declarative/components";
  export { useGridAction } from "react-declarative/components";
  export { useGridSelection } from "react-declarative/components";
  export { useLastPagination } from "react-declarative/components";
  export { useQueryPagination } from "react-declarative/components";
  export { usePreventNavigate } from "react-declarative/components";
  export { useStaticHandler } from "react-declarative/components";
  export { usePreventLeave } from "react-declarative/components";
  export { usePreventAction } from "react-declarative/components";
  export { useLocalHandler } from "react-declarative/components";
  export { useApiHandler } from "react-declarative/components";
  export { useFeatureView } from "react-declarative/components";
  export { useVisibilityView } from "react-declarative/components";
  export { useFilesView } from "react-declarative/components";
  export { useOutletModal } from "react-declarative/components";
  export { useWizardModal } from "react-declarative/components";
  export { createField, makeField } from "react-declarative/components";
  export { createLayout, makeLayout } from "react-declarative/components";
  export {
    useListProps,
    useListCachedRows,
    useListPayload,
    useListChips,
    useListReload,
    useListSelectionState,
  } from "react-declarative/components";
  export {
    useOneProps,
    useOneState,
    useOnePayload,
    useOneFeatures,
    useOneRadio,
    useOneContext,
    useOneMenu,
  } from "react-declarative/components";
  export { useActualCallback };
  export { useActualValue };
  export { useActualState };
  export { useActualRef };
  export { useRenderWaiter };
  export { useOneArray };
  export { oneArrayIncludes };
  export { isOneArray };
  export { toOneArray };
  export { useChangeSubject };
  export { useReloadTrigger };
  export { useSinglerunAction };
  export { useAsyncAction };
  export { useAsyncValue };
  export { useAsyncProgress };
  export { useQueuedAction };
  export { useMediaContext };
  export { useAudioPlayer };
  export { useBehaviorSubject };
  export { useSubjectValue };
  export { useSubscription };
  export { useSingleton };
  export { useSubject };
  export { useChange };
  export { useModel };
  export { useEntity };
  export { useListEditor };
  export { useCollection };
  export { useMediaStreamBuilder };
  export { useRequestSnackbar };
  export { useOne, useOneTyped };
  export { useDate, useTime };
  export { useConfirm };
  export { usePrompt };
  export { useAlert };
  export { useSnack };
  export { useModal };
  export { useSize };
  export { useList };
  export { useFile };
  import { IOnePublicProps as IOnePublicPropsInternal } from "react-declarative/model/IOnePublicProps";
  export type IOnePublicProps<
    Data = IAnything,
    Field extends IField<Data> = IField<Data>,
  > = IOnePublicPropsInternal<Data, Field>;
  import { ICheckBoxSlot as ICheckBoxSlotInternal } from "react-declarative/components";
  import { IYesNoSlot as IYesNoSlotInternal } from "react-declarative/components";
  import { IComboSlot as IComboSlotInternal } from "react-declarative/components";
  import { IItemsSlot as IItemsSlotInternal } from "react-declarative/components";
  import { ILineSlot as ILineSlotInternal } from "react-declarative/components";
  import { IProgressSlot as IProgressSlotInternal } from "react-declarative/components";
  import { IRadioSlot as IRadioSlotInternal } from "react-declarative/components";
  import { IDateSlot as IDateSlotInternal } from "react-declarative/components";
  import { ITimeSlot as ITimeSlotInternal } from "react-declarative/components";
  import { IFileSlot as IFileSlotInternal } from "react-declarative/components";
  import { IDictSlot as IDictSlotInternal } from "react-declarative/components";
  import { ITreeSlot as ITreeSlotInternal } from "react-declarative/components";
  import { IChooseSlot as IChooseSlotIntetnal } from "react-declarative/components";
  import { IRatingSlot as IRatingSlotInternal } from "react-declarative/components";
  import { ISliderSlot as ISliderSlotInternal } from "react-declarative/components";
  import { ISwitchSlot as ISwitchSlotInternal } from "react-declarative/components";
  import { ITextSlot as ITextSlotInternal } from "react-declarative/components";
  import { ICompleteSlot as ICompleteSlotInternal } from "react-declarative/components";
  import { ITypographySlot as ITypographySlotInternal } from "react-declarative/components";
  import { IActionAddSlot as IActionAddSlotInternal } from "react-declarative/components";
  import { IActionFabSlot as IActionFabSlotInternal } from "react-declarative/components";
  import { IActionMenuSlot as IActionMenuSlotInternal } from "react-declarative/components";
  import { IBodyRowSlot as IBodyRowSlotInternal } from "react-declarative/components";
  import { ICheckboxCellSlot as ICheckboxCellSlotInternal } from "react-declarative/components";
  import { ICommonCellSlot as ICommonCellSlotInternal } from "react-declarative/components";
  import { IHeadRowSlot as IHeadRowSlotInternal } from "react-declarative/components";
  import { IActionListSlot as IActionListSlotInternal } from "react-declarative/components";
  import { IChipListSlot as IChipListSlotInternal } from "react-declarative/components";
  import { IFilterListSlot as IFilterListSlotInternal } from "react-declarative/components";
  import { ISearchSlot as ISearchSlotInternal } from "react-declarative/components";
  import { IOperationListSlot as IOperationListSlotInternal } from "react-declarative/components";
  import { IPositionActionListSlot as IPositionActionListSlotInternal } from "react-declarative/model/IListProps";
  import { History as HistoryInternal } from "react-declarative/model/History";
  export type History = HistoryInternal;
  export type ICheckBoxSlot = ICheckBoxSlotInternal;
  export type IComboSlot = IComboSlotInternal;
  export type IYesNoSlot = IYesNoSlotInternal;
  export type IItemsSlot = IItemsSlotInternal;
  export type ILineSlot = ILineSlotInternal;
  export type IProgressSlot = IProgressSlotInternal;
  export type IRadioSlot = IRadioSlotInternal;
  export type IRatingSlot = IRatingSlotInternal;
  export type ISliderSlot = ISliderSlotInternal;
  export type ISwitchSlot = ISwitchSlotInternal;
  export type ITextSlot = ITextSlotInternal;
  export type IDateSlot = IDateSlotInternal;
  export type ITimeSlot = ITimeSlotInternal;
  export type IFileSlot = IFileSlotInternal;
  export type IDictSlot = IDictSlotInternal;
  export type ITreeSlot = ITreeSlotInternal;
  export type IChooseSlot = IChooseSlotIntetnal;
  export type ITypographySlot = ITypographySlotInternal;
  export type ICompleteSlot = ICompleteSlotInternal;
  export type IActionAddSlot = IActionAddSlotInternal;
  export type IActionFabSlot = IActionFabSlotInternal;
  export type IActionMenuSlot = IActionMenuSlotInternal;
  export type IBodyRowSlot = IBodyRowSlotInternal;
  export type ICheckboxCellSlot = ICheckboxCellSlotInternal;
  export type ICommonCellSlot = ICommonCellSlotInternal;
  export type IHeadRowSlot = IHeadRowSlotInternal;
  export type IActionListSlot = IActionListSlotInternal;
  export type IChipListSlot = IChipListSlotInternal;
  export type IFilterListSlot = IFilterListSlotInternal;
  export type ISearchSlot = ISearchSlotInternal;
  export type IOperationListSlot = IOperationListSlotInternal;
  export type IPositionActionListSlot = IPositionActionListSlotInternal;
  export { VirtualListBox } from "react-declarative/components/One/components/common/VirtualListBox";
  export { list2grid } from "react-declarative/utils/list2grid";
  export { openBlank } from "react-declarative/utils/openBlank";
  export { createDict } from "react-declarative/utils/createDict";
  export { copyToClipboard } from "react-declarative/utils/copyToClipboard";
  export { downloadBlank } from "react-declarative/utils/downloadBlank";
  export { removeSubstring } from "react-declarative/utils/removeSubstring";
  export { chooseFile } from "react-declarative/utils/chooseFile";
  export { loadScript } from "react-declarative/utils/loadScript";
  export { reloadPage } from "react-declarative/utils/reloadPage";
  export { compareFulltext } from "react-declarative/utils/compareFulltext";
  export {
    promiseState,
    promiseValue,
  } from "react-declarative/utils/promiseState";
  export { chooseMultipleFiles } from "react-declarative/utils/chooseMultipleFiles";
  export { errorData } from "react-declarative/utils/errorData";
  export { getMediaContext } from "react-declarative/utils/getMediaContext";
  export { getRouteParams } from "react-declarative/utils/getRouteParams";
  export { getRouteItem } from "react-declarative/utils/getRouteItem";
  export { getElementFromXPath } from "react-declarative/utils/getElementFromXPath";
  export { getXPathFromElement } from "react-declarative/utils/getXPathFromElement";
  export { arrays } from "react-declarative/utils/arrays";
  export { objects } from "react-declarative/utils/objects";
  export { compareArray } from "react-declarative/utils/compareArray";
  export { isObject } from "react-declarative/utils/isObject";
  export { FetchError, fetchApi } from "react-declarative/utils/fetchApi";
  export { createValueProvider } from "react-declarative/utils/createValueProvider";
  export { createStateProvider } from "react-declarative/utils/createStateProvider";
  export { createSsStateProvider } from "react-declarative/utils/createSsStateProvider";
  export { createLsStateProvider } from "react-declarative/utils/createLsStateProvider";
  export { normalizeText } from "react-declarative/utils/normalizeText";
  export { formatText } from "react-declarative/utils/formatText";
  export { roundTicks } from "react-declarative/utils/roundTicks";
  export { wordForm } from "react-declarative/utils/wordForm";
  export { singleshot } from "react-declarative/utils/hof/singleshot";
  export { singletick } from "react-declarative/utils/hof/singletick";
  export { afterinit } from "react-declarative/utils/hof/afterinit";
  export { retry } from "react-declarative/utils/hof/retry";
  export { singlerun, Task } from "react-declarative/utils/hof/singlerun";
  export {
    cancelable,
    CANCELED_SYMBOL as CANCELED_PROMISE_SYMBOL,
  } from "react-declarative/utils/hof/cancelable";
  export { debounce } from "react-declarative/utils/hof/debounce";
  export { queued } from "react-declarative/utils/hof/queued";
  export { lock } from "react-declarative/utils/hof/lock";
  export { cached } from "react-declarative/utils/hof/cached";
  export { memoize } from "react-declarative/utils/hof/memoize";
  export { trycatch } from "react-declarative/utils/hof/trycatch";
  export { ttl } from "react-declarative/utils/hof/ttl";
  export { sleep } from "react-declarative/utils/sleep";
  export { deepFlat } from "react-declarative/utils/deepFlat";
  export { BehaviorSubject } from "react-declarative/utils/rx/BehaviorSubject";
  export { EventEmitter } from "react-declarative/utils/rx/EventEmitter";
  export { Observer } from "react-declarative/utils/rx/Observer";
  export { Operator } from "react-declarative/utils/rx/Operator";
  export { Subject } from "react-declarative/utils/rx/Subject";
  export { Source } from "react-declarative/utils/rx/Source";
  export { and } from "react-declarative/utils/math/and";
  export { or } from "react-declarative/utils/math/or";
  export { not } from "react-declarative/utils/math/not";
  export { match } from "react-declarative/utils/math/match";
  export { first } from "react-declarative/utils/math/first";
  export { join } from "react-declarative/utils/math/join";
  export { last } from "react-declarative/utils/math/last";
  export { truely } from "react-declarative/utils/math/truely";
  export { getAvailableFields } from "react-declarative/utils/getAvailableFields";
  export { getInitialData } from "react-declarative/utils/getInitialData";
  export { flatArray } from "react-declarative/utils/flatArray";
  export { removeExtraSpaces } from "react-declarative/utils/removeExtraSpaces";
  export { replaceSubstring } from "react-declarative/utils/replaceSubstring";
  import TSubjectInternal from "react-declarative/model/TSubject";
  import TBehaviorSubjectInternal from "react-declarative/model/TBehaviorSubject";
  import TObserverInternal, {
    TObservable as TObservableInternal,
  } from "react-declarative/model/TObserver";
  import TPaginatorInternal from "react-declarative/model/TPaginator";
  export type TSubject<Data = void> = TSubjectInternal<Data>;
  export type TObserver<Data = void> = TObserverInternal<Data>;
  export type TObservable<Data = void> = TObservableInternal<Data>;
  export type TBehaviorSubject<Data = unknown> = TBehaviorSubjectInternal<Data>;
  export type TPaginator<
    FilterData extends {} = any,
    RowData extends IRowData = any,
    Payload = any,
  > = TPaginatorInternal<FilterData, RowData, Payload>;
  export { getErrorMessage } from "react-declarative/utils/getErrorMessage";
  import {
    IEntityAdapter as IEntityAdapterInternal,
    IEntity as IMvvmEntity,
  } from "react-declarative/utils/mvvm/Entity";
  import { ICollectionAdapter as ICollectionAdapterInternal } from "react-declarative/utils/mvvm/Collection";
  import { IModelAdapter as IModelAdapterInternal } from "react-declarative/utils/mvvm/Model";
  export type ICollectionAdapter<T extends IMvvmEntity = any> =
    ICollectionAdapterInternal<T>;
  export type IEntityAdapter<T extends IMvvmEntity = any> =
    IEntityAdapterInternal<T>;
  export type IModelAdapter<T extends {} = any> = IModelAdapterInternal<T>;
  export {
    Collection,
    EntityNotFoundError,
  } from "react-declarative/utils/mvvm/Collection";
  export { Entity } from "react-declarative/utils/mvvm/Entity";
  export { Model } from "react-declarative/utils/mvvm/Model";
  export { formatAmount } from "react-declarative/utils/formatAmount";
  export { createWindowHistory } from "react-declarative/utils/createWindowHistory";
  export { createLsManager } from "react-declarative/utils/createLsManager";
  export { createSsManager } from "react-declarative/utils/createSsManager";
  export { createCustomTag } from "react-declarative/utils/createCustomTag";
  export { mainColor } from "react-declarative/utils/mainColor";
  export { cacheSrc } from "react-declarative/utils/cacheSrc";
  export {
    parseBase64Json,
    stringifyBase64Json,
  } from "react-declarative/utils/base64Json";
  export {
    parseAsciiParams,
    serializeAsciiParams,
  } from "react-declarative/utils/asciiParams";
  export { fromBytes32, toBytes32 } from "react-declarative/utils/asciiParams";
  import * as datetimeInternal from "react-declarative/utils/datetime";
  export { waitForMove } from "react-declarative/utils/waitForMove";
  export const typo: {
    thinsp: " ";
    nbsp: " ";
    emdash: "—";
    endash: "–";
    terminator: "\0";
    bullet: "•";
  };
  export const datetime: {
    DATE_PLACEHOLDER: "DD/MM/YYYY";
    TIME_PLACEHOLDER: "HH:MM";
    DATE_EXPR: RegExp;
    TIME_EXPR: RegExp;
    Time: typeof datetimeInternal.Time;
    Date: typeof datetimeInternal.Date;
    parseDate: (date: string | null) => datetimeInternal.Date | null;
    serializeDate: (date: datetimeInternal.Date) => string | null;
    parseTime: (time: string | null) => datetimeInternal.Time | null;
    serializeTime: (time: datetimeInternal.Time) => string | null;
    currentDate: () => string;
    currentTime: () => string;
    timeStamp: (str?: string) => number;
    dateStamp: (str?: string) => number;
  };
  export const crypt: {
    crypt: (salt: string, text: string) => string;
    decrypt: (salt: string, encoded: any) => string;
  };
  export { compose } from "react-declarative/utils/compose";
  export {
    getMomentStamp,
    fromMomentStamp,
  } from "react-declarative/utils/getMomentStamp";
  export {
    getTimeStamp,
    fromTimeStamp,
  } from "react-declarative/utils/getTimeStamp";
  export { resolveDocuments } from "react-declarative/api/resolveDocuments";
  export { iterateDocuments } from "react-declarative/api/iterateDocuments";
  export { pickDocuments } from "react-declarative/api/pickDocuments";
  export { heavy } from "react-declarative/utils/heavy";
}

declare module "react-declarative/model/TypedField" {
  import IManaged, { IManagedShallow } from "react-declarative/model/IManaged";
  import IEntity from "react-declarative/model/IEntity";
  import FieldType from "react-declarative/model/FieldType";
  import IAnything from "react-declarative/model/IAnything";
  /**
   * Компоновки
   */
  import { IFragmentLayoutProps } from "react-declarative/components/One/layouts/FragmentLayout";
  import { IDivLayoutProps } from "react-declarative/components/One/layouts/DivLayout";
  import { IBoxLayoutProps } from "react-declarative/components/One/layouts/BoxLayout";
  import { ITabsLayoutProps } from "react-declarative/components/One/layouts/TabsLayout";
  import { ICenterLayoutProps } from "react-declarative/components/One/layouts/CenterLayout";
  import { IStretchLayoutProps } from "react-declarative/components/One/layouts/StretchLayout";
  import { IGroupLayoutProps } from "react-declarative/components/One/layouts/GroupLayout";
  import { IOutlineLayoutProps } from "react-declarative/components/One/layouts/OutlineLayout";
  import { IPaperLayoutProps } from "react-declarative/components/One/layouts/PaperLayout";
  import { IExpansionLayoutProps } from "react-declarative/components/One/layouts/ExpansionLayout";
  import { IHeroLayoutProps } from "react-declarative/components/One/layouts/HeroLayout";
  import { IConditionLayoutProps } from "react-declarative/components/One/layouts/ConditionLayout";
  import { ICustomLayoutProps } from "react-declarative/components/One/layouts/CustomLayout";
  /**
   * Поля ввода
   */
  import { ICheckboxFieldProps } from "react-declarative/components/One/fields/CheckboxField";
  import { IFileFieldProps } from "react-declarative/components/One/fields/FileField";
  import { IComboFieldProps } from "react-declarative/components/One/fields/ComboField";
  import { IComponentFieldProps } from "react-declarative/components/One/fields/ComponentField";
  import { IItemsFieldProps } from "react-declarative/components/One/fields/ItemsField";
  import { ILineFieldProps } from "react-declarative/components/One/fields/LineField";
  import { IProgressFieldProps } from "react-declarative/components/One/fields/ProgressField";
  import { IRadioFieldProps } from "react-declarative/components/One/fields/RadioField";
  import { IRatingFieldProps } from "react-declarative/components/One/fields/RatingField";
  import { ISliderFieldProps } from "react-declarative/components/One/fields/SliderField";
  import { ISwitchFieldProps } from "react-declarative/components/One/fields/SwitchField";
  import { ITextFieldProps } from "react-declarative/components/One/fields/TextField";
  import { IDateFieldProps } from "react-declarative/components/One/fields/DateField";
  import { ITimeFieldProps } from "react-declarative/components/One/fields/TimeField";
  import { ICompleteFieldProps } from "react-declarative/components/One/fields/CompleteField";
  import { ITypographyFieldProps } from "react-declarative/components/One/fields/TypographyField";
  import { IChooseFieldProps } from "react-declarative/components/One/fields/ChooseField";
  import { IYesNoFieldProps } from "react-declarative/components/One/fields/YesNoField";
  import { IInitFieldProps } from "react-declarative/components/One/fields/InitField";
  import { IDictFieldProps } from "react-declarative/components/One/fields/DictField";
  import { ITreeFieldProps } from "react-declarative/components/One/fields/TreeField";
  /**
   * Represents a class that excludes certain properties from a given type.
   *
   * @template Data - The type of data for the managed object.
   * @template Payload - The type of payload for the managed object.
   * @type Exclude<Data, Payload>
   */
  type Exclude<Data = IAnything, Payload = IAnything> = Omit<
    IManaged<Data, Payload>,
    keyof IEntity<Data, Payload>
  >;
  /**
   * A factory class for creating typed fields.
   *
   * @template Type - The type of field.
   * @template Fields - The interface for the fields.
   * @template Data - The type of data.
   * @template Payload - The type of payload.
   */
  type TypedFieldFactory<
    Type extends FieldType,
    Fields extends {},
    Data = IAnything,
    Payload = IAnything,
  > = {
    [Prop in keyof Omit<Fields, keyof Exclude<Data, Payload>>]?: Fields[Prop];
  } & {
    type: Type;
  };
  /**
   * Represents a factory for creating typed fields with a shallow data structure.
   *
   * @template Type - The type of the field.
   * @template Fields - The field definitions.
   * @template Data - The data type.
   * @template Payload - The payload type.
   *
   * @typedef {Object} TypedFieldFactoryShallow
   * @property {Type} Type - The type of the field.
   * @property {Fields} Fields - The field definitions.
   * @property {Data} Data - The data type.
   * @property {Payload} Payload - The payload type.
   */
  type TypedFieldFactoryShallow<
    Type extends FieldType,
    Fields extends {},
    Data = IAnything,
    Payload = IAnything,
  > = IManagedShallow<Data, Payload> &
    TypedFieldFactory<Type, Fields, Data, Payload>;
  type Group<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Group,
    IGroupLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Custom<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Layout,
    ICustomLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Paper<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Paper,
    IPaperLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Outline<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Outline,
    IOutlineLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Expansion<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Expansion,
    IExpansionLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Fragment<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Fragment,
    IFragmentLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Div<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Div,
    IDivLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Box<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Box,
    IBoxLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Tabs<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Tabs,
    ITabsLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Hero<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Hero,
    IHeroLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Center<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Center,
    ICenterLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Stretch<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Stretch,
    IStretchLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Condition<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Condition,
    IConditionLayoutProps<Data, Payload>,
    Data,
    Payload
  >;
  type Line<Data = IAnything, Payload = IAnything> = TypedFieldFactory<
    FieldType.Line,
    ILineFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Checkbox<
    Data = IAnything,
    Payload = IAnything,
  > = TypedFieldFactoryShallow<
    FieldType.Checkbox,
    ICheckboxFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Combo<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Combo,
    IComboFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Component<
    Data = IAnything,
    Payload = IAnything,
  > = TypedFieldFactoryShallow<
    FieldType.Component,
    IComponentFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Items<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Items,
    IItemsFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Progress<
    Data = IAnything,
    Payload = IAnything,
  > = TypedFieldFactoryShallow<
    FieldType.Progress,
    IProgressFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Radio<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Radio,
    IRadioFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Rating<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Rating,
    IRatingFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Slider<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Slider,
    ISliderFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Switch<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Switch,
    ISwitchFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Text<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Text,
    ITextFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type File<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.File,
    IFileFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Choose<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Choose,
    IChooseFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type YesNo<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.YesNo,
    IYesNoFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Init<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Init,
    IInitFieldProps,
    Data,
    Payload
  >;
  type Dict<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Dict,
    IDictFieldProps,
    Data,
    Payload
  >;
  type Tree<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Tree,
    ITreeFieldProps,
    Data,
    Payload
  >;
  type Date<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Date,
    IDateFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Time<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<
    FieldType.Time,
    ITimeFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Complete<
    Data = IAnything,
    Payload = IAnything,
  > = TypedFieldFactoryShallow<
    FieldType.Complete,
    ICompleteFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  type Typography<
    Data = IAnything,
    Payload = IAnything,
  > = TypedFieldFactoryShallow<
    FieldType.Typography,
    ITypographyFieldProps<Data, Payload>,
    Data,
    Payload
  >;
  /**
   * Логическое ветвление компонентов
   * Typescript type-guard
   */
  export type TypedFieldRegistry<
    Data = IAnything,
    Payload = IAnything,
    Target = any,
  > =
    Target extends Expansion<Data, Payload>
      ? Expansion<Data, Payload>
      : Target extends Group<Data, Payload>
        ? Group<Data, Payload>
        : Target extends Paper<Data, Payload>
          ? Paper<Data, Payload>
          : Target extends Outline<Data, Payload>
            ? Outline<Data, Payload>
            : Target extends Checkbox<Data, Payload>
              ? Checkbox<Data, Payload>
              : Target extends Combo<Data, Payload>
                ? Combo<Data, Payload>
                : Target extends Component<Data, Payload>
                  ? Component<Data, Payload>
                  : Target extends Items<Data, Payload>
                    ? Items<Data, Payload>
                    : Target extends Line<Data, Payload>
                      ? Line<Data, Payload>
                      : Target extends Progress<Data, Payload>
                        ? Progress<Data, Payload>
                        : Target extends Radio<Data, Payload>
                          ? Radio<Data, Payload>
                          : Target extends Rating<Data, Payload>
                            ? Rating<Data, Payload>
                            : Target extends Slider<Data, Payload>
                              ? Slider<Data, Payload>
                              : Target extends Switch<Data, Payload>
                                ? Switch<Data, Payload>
                                : Target extends Text<Data, Payload>
                                  ? Text<Data, Payload>
                                  : Target extends File<Data, Payload>
                                    ? File<Data, Payload>
                                    : Target extends Choose<Data, Payload>
                                      ? Choose<Data, Payload>
                                      : Target extends YesNo<Data, Payload>
                                        ? YesNo<Data, Payload>
                                        : Target extends Date<Data, Payload>
                                          ? Date<Data, Payload>
                                          : Target extends Time<Data, Payload>
                                            ? Time<Data, Payload>
                                            : Target extends Complete<
                                                  Data,
                                                  Payload
                                                >
                                              ? Complete<Data, Payload>
                                              : Target extends Typography<
                                                    Data,
                                                    Payload
                                                  >
                                                ? Typography<Data, Payload>
                                                : Target extends Fragment<
                                                      Data,
                                                      Payload
                                                    >
                                                  ? Fragment<Data, Payload>
                                                  : Target extends Div<
                                                        Data,
                                                        Payload
                                                      >
                                                    ? Div<Data, Payload>
                                                    : Target extends Custom<
                                                          Data,
                                                          Payload
                                                        >
                                                      ? Custom<Data, Payload>
                                                      : Target extends Box<
                                                            Data,
                                                            Payload
                                                          >
                                                        ? Box<Data, Payload>
                                                        : Target extends Tabs<
                                                              Data,
                                                              Payload
                                                            >
                                                          ? Tabs<Data, Payload>
                                                          : Target extends Center<
                                                                Data,
                                                                Payload
                                                              >
                                                            ? Center<
                                                                Data,
                                                                Payload
                                                              >
                                                            : Target extends Stretch<
                                                                  Data,
                                                                  Payload
                                                                >
                                                              ? Stretch<
                                                                  Data,
                                                                  Payload
                                                                >
                                                              : Target extends Hero<
                                                                    Data,
                                                                    Payload
                                                                  >
                                                                ? Hero<
                                                                    Data,
                                                                    Payload
                                                                  >
                                                                : Target extends Condition<
                                                                      Data,
                                                                      Payload
                                                                    >
                                                                  ? Condition<
                                                                      Data,
                                                                      Payload
                                                                    >
                                                                  : Target extends Init<
                                                                        Data,
                                                                        Payload
                                                                      >
                                                                    ? Init<
                                                                        Data,
                                                                        Payload
                                                                      >
                                                                    : Target extends Dict<
                                                                          Data,
                                                                          Payload
                                                                        >
                                                                      ? Dict<
                                                                          Data,
                                                                          Payload
                                                                        >
                                                                      : Target extends Tree<
                                                                            Data,
                                                                            Payload
                                                                          >
                                                                        ? Tree<
                                                                            Data,
                                                                            Payload
                                                                          >
                                                                        : never;
  /**
   * IOneProps - генерик, для прикладного программиста мы можем подменить IField
   * на TypedField.  Это  позволит  автоматически  выбрать  интерфейс  props для
   * IntelliSense после указания *type* или методом исключения
   */
  export type TypedField<
    Data = IAnything,
    Payload = IAnything,
  > = TypedFieldRegistry<Data, Payload> & {
    name?: string;
    fields?: TypedField<Data, Payload>[];
    child?: TypedField<Data, Payload>;
  };
  export default TypedField;
}

declare module "react-declarative/model/IField" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import type ComponentFieldInstance from "react-declarative/model/ComponentFieldInstance";
  import type { IDebug } from "react-declarative/model/ComponentFieldInstance";
  import { ISizeCallback } from "react-declarative/model/ISize";
  import FieldType from "react-declarative/model/FieldType";
  import IAnything from "react-declarative/model/IAnything";
  import ISearchItem from "react-declarative/components/SearchView/model/ISearchItem";
  import ISearchViewProps from "react-declarative/components/SearchView/model/ISearchViewProps";
  import IFieldMenu from "react-declarative/model/IFieldMenu";
  import ITreeNode from "react-declarative/model/ITreeNode";
  /**
   * Represents any possible variable value of <One /> component field.
   *
   * @typedef {string | string[] | number | boolean | null} Value - Represents a value in JavaScript.
   */
  export type Value = string | string[] | number | boolean | null;
  /**
   * Объект поля для прикладного программиста
   */
  export interface IField<Data = IAnything, Payload = IAnything> {
    /**
     * Общие поля. Поле name позволяет задать забор
     * поля из целевого объекта, не нужен для group,
     * expansion и line.
     */
    name?: string;
    /**
     * Коллбек для отладки
     */
    debug?: (params: IDebug<Data, Payload>) => void;
    /**
     * Позволяет создать контекстное меню
     */
    menuItems?: IFieldMenu[];
    /**
     * Флаг, убирающий поле из древа отрисовки. Следует использовать для
     * создания динамических значений полей компонента
     */
    hidden?: boolean | ((payload: Payload) => boolean);
    /**
     * Исключает группу из DOM древа на телефоне
     */
    phoneHidden?: boolean | ((payload: Payload) => boolean);
    /**
     * Исключает группу из DOM древа на планшете
     */
    tabletHidden?: boolean | ((payload: Payload) => boolean);
    /**
     * Исключает группу из DOM древа на компьютере
     */
    desktopHidden?: boolean | ((payload: Payload) => boolean);
    /**
     * Список бизнес-функций, необходимых для отображения поля
     */
    features?: string[];
    /**
     * Отключает нижний baseline для текущей компоновки
     */
    noBaseline?: boolean;
    /**
     * Флаг, удерживающий подпись текстового поля при пустом
     * значении
     */
    labelShrink?: boolean;
    /**
     * Коллбеки, вызываемый при фокусировке и потере фокуса.
     * Подразумевается изменение формы со стороны прикладного
     * программиста, а не работа с полем ввода
     * (например, обновление ссылки на изображение)
     */
    focus?: (
      name: string,
      data: Data,
      payload: Payload,
      onValueChange: (value: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
    blur?: (
      name: string,
      data: Data,
      payload: Payload,
      onValueChange: (value: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
    /**
     * Коллбек для обработки клика по элементу контекстного меню
     */
    menu?: (
      name: string,
      action: string,
      data: Data,
      payload: Payload,
      onValueChange: (value: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
    /**
     * Перехват клика по полю, следует использовать для копирования значения
     * у карточек просмотра без редактирования
     */
    click?: (
      name: string,
      e: React.MouseEvent<HTMLElement>,
      data: Data,
      payload: Payload,
      onValueChange: (value: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
    /**
     * Флаг только на чтение и "круглой окаймовки"
     */
    readonly?: boolean;
    outlined?: boolean;
    /**
     * Передает ссылку при перерисовках
     */
    groupRef?: (element?: HTMLDivElement | null) => void;
    inputRef?: (element?: HTMLInputElement | null) => void;
    /**
     * Автофокус и постоянное отключение поля
     */
    autoFocus?: boolean;
    disabled?: boolean;
    /**
     * Поле, специфичное для RadioField и позволяющее
     * задать значение при выборе элемента кликом
     */
    radioValue?: string;
    /**
     * Отключает цвет для Switch
     */
    switchNoColor?: boolean;
    /**
     * Применяет к Switch второй title
     */
    switchActiveLabel?: string;
    /**
     * Поле type для MatTextField
     */
    inputType?: keyof {
      text: never;
      color: never;
      date: never;
      email: never;
      month: never;
      number: never;
      password: never;
      search: never;
      tel: never;
      time: never;
      url: never;
      week: never;
    };
    /**
     * Паттерн для MatTextField
     * (inputmode: 'decimal' и pattern: '[0-9.,]+' добавят запятую на iOS клавиатуре)
     */
    inputPattern?: string;
    /**
     * Поле inputmode для MatTextField
     */
    inputMode?: keyof {
      none: never;
      text: never;
      tel: never;
      url: never;
      email: never;
      numeric: never;
      decimal: never;
      search: never;
    };
    /**
     * Форматтер, преобразующий пользовательский
     * ввод к нужному шаблону
     */
    inputFormatter?: (input: string) => string;
    /**
     * Шаблонов для форматтера
     */
    inputFormatterTemplate?: string;
    /**
     * Разделитель шаблона форматтера,
     * по дефолту 0
     */
    inputFormatterSymbol?: string;
    /**
     * Разрешенные к вводу символы
     */
    inputFormatterAllowed?: RegExp | ((char: string, idx: number) => boolean);
    /**
     * Замена символов для форматерра, например
     * запятую на точку в числе
     */
    inputFormatterReplace?: (char: string) => string | null;
    inputAutocomplete?: keyof {
      "new-password": never;
      on: never;
      off: never;
      false: never;
    };
    /**
     * Список вкладок для TabLayout
     */
    tabList?: string[];
    /**
     * Номер активной вкладки по-умолчанию
     */
    tabIndex?: number;
    /**
     * Вариант вывода вкладок для TabLayout
     */
    tabVariant?: "fullWidth" | "standard" | "scrollable";
    /**
     * Цвет вкладок для TabLayout
     */
    tabColor?: "primary" | "secondary";
    /**
     * Позволяет содержимому растягивать высоту блока
     * у TabLayout
     */
    tabKeepFlow?: boolean;
    /**
     * Событие изменения вкладки
     */
    tabChange?: (idx: number) => void;
    /**
     * Отделяет табы отчерком у TabLayout
     */
    tabLine?: boolean;
    /**
     * Закрашивает фон TabLayout в темный цвет
     */
    tabBackground?: boolean;
    /**
     * Делает TextField многострочным, если
     * inputRows больше единицы
     */
    inputRows?: number;
    /**
     * Ripple эффект для иконок
     */
    leadingIconRipple?: boolean;
    trailingIconRipple?: boolean;
    /**
     * Иконки для MatTextField
     */
    leadingIcon?: React.ComponentType<any>;
    trailingIcon?: React.ComponentType<any>;
    /**
     * При клике на иконку мы можем запросить данные из модального
     * окна, расположенного в коде прикладного программиста. Коллбек
     * получает на вход текущее значение поля и функцию onChange...
     */
    leadingIconClick?: (
      value: Value,
      data: Data,
      payload: Payload,
      onValueChange: (v: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
    trailingIconClick?: (
      value: Value,
      data: Data,
      payload: Payload,
      onValueChange: (v: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
    /**
     * Максимальное число для высчитывания процента
     * (минимальное число всегда ноль)
     */
    maxPercent?: number;
    /**
     * Отключает отчерк у линии
     */
    lineTransparent?: boolean;
    /**
     * Показывает процент числом слева
     */
    showPercentLabel?: boolean;
    /**
     * Внутренние отступы для Paper
     */
    innerPadding?: string;
    /**
     * Превращает FieldType.Paper в FieldType.Outline
     */
    outlinePaper?: boolean;
    transparentPaper?: boolean;
    /**
     * - Коллбеки, позволяющий перекрасить SliderField.
     * Работают только если заданы все вместе
     * - ВНИМАНИЕ! Потенциально возможна просадка производительности,
     * так как осуществляет рекомпиляцию стилей material-ui
     */
    sliderThumbColor?: (v: number) => string;
    sliderTrackColor?: (v: number) => string;
    sliderRailColor?: (v: number) => string;
    /**
     *  - Коллбеки, позволяющие перекрасить ProgressField.
     * Работают только если заданы все вместе
     *  - ВНИМАНИЕ! Потенциально возможна просадка производительности,
     * так как осуществляет рекомпиляцию стилей material-ui
     */
    progressColor?: (v: number) => string;
    progressBarColor?: (v: number) => string;
    /**
     * Поля, специфичные для SliderField
     */
    minSlider?: number;
    maxSlider?: number;
    stepSlider?: number;
    labelFormatSlider?: (v: number) => string | number;
    /**
     * Подсказки для CompleteField
     */
    tip?:
      | string[]
      | ((
          value: string,
          data: Data,
          payload: Payload,
        ) => string[] | Promise<string[]>);
    /**
     * Коллбек выбора элемента из CompleteField
     */
    tipSelect?: (
      value: string,
      data: Data,
      payload: Payload,
      onChange: (data: Data) => void,
    ) => void;
    /**
     * Поле, позволяющее передавать собственные значения в FieldType.Items и FieldType.Combo
     */
    freeSolo?: boolean;
    /**
     * Позволяет включить виртуализацию для FieldType.List и FieldType.Combo
     */
    virtualListBox?: boolean;
    /**
     * Варианты выбора для ComboField и ItemsField
     */
    itemList?:
      | string[]
      | ((data: Data, payload: Payload) => string[])
      | ((data: Data, payload: Payload) => Promise<string[]>);
    /**
     * Вариант выбора для TreeField
     */
    itemTree?:
      | ITreeNode[]
      | ((data: Data, payload: Payload) => ITreeNode[])
      | ((data: Data, payload: Payload) => Promise<ITreeNode[]>);
    /**
     * Отключает возможность сброса выбора значения для Items и Combo
     */
    noDeselect?: boolean;
    /**
     * Включает change-detection для выпадающих меню. По умолчанию выключено
     */
    watchItemList?: boolean;
    /**
     * Включает change-detection для поля компонента. По умолчанию выключено
     */
    watchOneContext?: boolean;
    /**
     * Позволяет мемоизировать вызов compute
     */
    shouldRecompute?: (
      prevData: Data,
      nextData: Data,
      payload: Payload,
    ) => boolean;
    /**
     * Позволяет мемоизировать перевод
     */
    shouldUpdateTr?: (
      prevArgs: [string, Data],
      currentArgs: [string, Data],
      payload: Payload,
    ) => boolean;
    /**
     * Позволяет мемоизировать список элементов
     */
    shouldUpdateItemList?: (
      prevData: Data,
      currentData: Data,
      payload: Payload,
    ) => boolean;
    /**
     * Позволяет перевести значения у ComboField и ItemsField
     * из поле itemList на человеческий, если
     * используются константы
     */
    tr?:
      | ((s: string, data: Data, payload: Payload) => string)
      | ((s: string, data: Data, payload: Payload) => Promise<string>);
    /**
     * Отключает fulltext фильтр для FieldType.Complete
     */
    keepRaw?: boolean;
    /**
     * Тип поля для логического ветвления при рендеринге
     */
    type: FieldType;
    /**
     * Наименование класса для корневого элемента поля (опционально)
     */
    className?: string;
    /**
     * Стиль корневого элемента для поля (опционально)
     */
    style?: React.CSSProperties;
    /**
     * Заголовок и описание, если возможен вывод у поля
     */
    title?: string;
    description?: string;
    /**
     * placeholder для TextField, ComboField, ItemsField
     */
    placeholder?: string;
    /**
     * Колонки для One. Не используются в List (кроме фильтров).
     * Если указано поле columns, то остальные приравниваются к
     * его значению
     */
    columns?: string;
    phoneColumns?: string;
    tabletColumns?: string;
    desktopColumns?: string;
    /**
     * Специальное поле только для MUI
     */
    sx?: SxProps<any>;
    /**
     * Произвольное количество колонок в строке
     */
    columnsOverride?: string;
    /**
     * Дочерние поля для групп
     */
    fields?: IField<Data>[];
    child?: IField<Data>;
    /**
     * Функция, позволяющая организовать валидацию. Если
     * возвращаемое значение не равно null, считается за
     * ошибкую
     */
    isInvalid?: (v: Data, payload: Payload) => null | string;
    /**
     * Функция, позволяющая огранизовать неблокирующую валидацию. Проверка
     * правописания (spellcheck) должен быть отображен в UI, но не должен
     * блокировать кнопку "Сохранить"
     */
    isIncorrect?: (v: Data, payload: Payload) => null | string;
    /**
     * Функция, позволяющая скрыть поле, исходя из целевого
     * объекта
     */
    isVisible?: (v: Data, payload: Payload) => boolean;
    /**
     * Функция, позволяющая отключить поле, исходя из целевого
     * объекта
     */
    isDisabled?: (v: Data, payload: Payload) => boolean;
    /**
     * Функция, позволяющая отключить ввод данных в поле, исходя из целевого
     * объекта
     */
    isReadonly?: (v: Data, payload: Payload) => boolean;
    /**
     * Функция, применяемая если значение поля вычисляется динамически.
     * Включает readonly.
     */
    compute?: (v: Data, payload: Payload) => Promise<Value> | Value;
    /**
     * Инъекция JSX для ComponentField
     */
    element?: React.ComponentType<ComponentFieldInstance<Data, Payload>>;
    /**
     * Коллбек, вызываемый у поля при не прохождении
     * валидации
     */
    invalidity?: (name: string, e: string, payload: Payload) => void;
    /**
     * Коллбек для 2Way биндингов. Вызывается если поле валидно
     * перед применением нового целевого объекта при исходящем изменении
     */
    map?: (data: Data, payload: Payload) => Data;
    /**
     * Значение по-умолчанию для поля
     */
    defaultValue?: Value | ((payload: Payload) => Value);
    /**
     * Позволяет задать limit для поля справочника
     */
    dictLimit?: number;
    /**
     * Позволяет задать задержку для api запросов поля справочника
     */
    dictDelay?: number;
    /**
     * Обработчик запроса справочника. Если число объектов
     * меньше dictLimit, подразумевается, что все данные выгружены
     * на фронт и новые запросы не выполняются
     */
    dictSearch?: (dto: {
      search: string;
      limit: number;
      offset: number;
      initial: boolean;
      rows: ISearchItem[];
      data: Data;
      payload: Payload;
    }) => ISearchItem[] | Promise<ISearchItem[]>;
    /**
     * Поле справочника позволяет создавать новые записи, если
     * поиск не дал результата
     */
    dictOnAppend?: (
      search: string,
      data: Data,
      payload: Payload,
      onValueChange: (value: string | null) => void,
      onChange: (value: Data) => void,
    ) => void;
    /**
     * Функция вызывается на каждое изменение текста. Подразумевается
     * запись в целевой объект. Для контекстного поиска по label, value можно записать в другое поле
     */
    dictOnText?: (
      text: string,
      data: Data,
      payload: Payload,
      onValueChange: (value: string | null) => void,
      onChange: (data: Data) => void,
    ) => void;
    /**
     * Функция вызывается на каждый выбор из модалки. Подразумевается
     * запись в целевой объект. Для контекстного поиска по label, value можно записать в другое поле
     */
    dictOnItem?: (
      value: string | null,
      data: Data,
      payload: Payload,
      onValueChange: (value: string | null) => void,
      onChange: (data: Data) => void,
    ) => void;
    /**
     * Функция позволяет загрузить label для выбранного элемента асинхронно
     */
    dictValue?: (
      value: string,
      data: Data,
      payload: Payload,
    ) => ISearchItem | Promise<ISearchItem>;
    /**
     * Функция позволяет загрузить searchText для выбранного элемента асинхронно
     */
    dictSearchText?: (data: Data, payload: Payload) => string | Promise<string>;
    /**
     * Функция позволяет переопределить компонент элемента списка
     * из модалки
     */
    dictSearchItem?: ISearchViewProps["SearchItem"];
    /**
     * Функция позволяет переопределить компонент создание записи
     * в словарь из модалки
     */
    dictCreateButton?: ISearchViewProps["CreateButton"];
    /**
     * Позволяет выключить отступ. Можно использовать по аналогии
     * с исключением последней запятой при склеивании массива
     * руками, если раздражает
     */
    fieldRightMargin?: string;
    fieldBottomMargin?: string;
    /**
     * Шрифт для поля Typography
     */
    typoVariant?: keyof {
      h2: "h2";
      h3: "h3";
      h4: "h4";
      h5: "h5";
      h6: "h6";
      subtitle1: "subtitle1";
      subtitle2: "subtitle2";
      body1: "body1";
      body2: "body2";
    };
    /**
     * Поле для ExpansionLayout
     */
    expansionOpened?: boolean;
    /**
     * Коллбек, позволяющий применить собственную компоновку
     */
    customLayout?: (
      props: React.PropsWithChildren<
        Data & {
          onChange: (data: Partial<Data>) => void;
          _fieldData: Data;
          _fieldParams: IField;
          _payload: Payload;
        }
      >,
    ) => React.ReactElement;
    /**
     * Предикат для компоновки Condition
     */
    condition?:
      | ((data: Data, payload: Payload) => boolean)
      | ((data: Data, payload: Payload) => Promise<boolean>);
    /**
     * Позволяет мемоизировать вызов condition
     */
    shouldCondition?: (
      prevData: Data,
      nextData: Data,
      payload: Payload,
    ) => boolean;
    /**
     * Компонент отображения загрузки condition
     */
    conditionLoading?: React.ComponentType<{
      data: Data;
      payload: Payload;
    }>;
    /**
     * Компонент отображения else для condition
     */
    conditionElse?: React.ComponentType<{
      data: Data;
      payload: Payload;
    }>;
    /**
     * mime тип выбираемого файла
     */
    fileAccept?: string;
    /**
     * Функция для загрузки файла на сервер
     */
    upload?: (
      file: File,
      data: Data,
      payload: Payload,
    ) => Promise<string> | string;
    view?: (file: string, data: Data, payload: Payload) => Promise<void> | void;
    /**
     * Функция для выбора документа из справочника
     * для useSearchModal
     */
    choose?: (
      data: Data,
      payload: Payload,
    ) => Promise<string | string[] | null> | string | string[] | null;
    /**
     * Свойства для компоновки Hero - инструмента настройки отступов
     */
    top?: string | ISizeCallback<Data>;
    phoneTop?: string | ISizeCallback<Data>;
    tabletTop?: string | ISizeCallback<Data>;
    desktopTop?: string | ISizeCallback<Data>;
    left?: string | ISizeCallback<Data>;
    phoneLeft?: string | ISizeCallback<Data>;
    tabletLeft?: string | ISizeCallback<Data>;
    desktopLeft?: string | ISizeCallback<Data>;
    right?: string | ISizeCallback<Data>;
    phoneRight?: string | ISizeCallback<Data>;
    tabletRight?: string | ISizeCallback<Data>;
    desktopRight?: string | ISizeCallback<Data>;
    bottom?: string | ISizeCallback<Data>;
    phoneBottom?: string | ISizeCallback<Data>;
    tabletBottom?: string | ISizeCallback<Data>;
    desktopBottom?: string | ISizeCallback<Data>;
    height?: string | ISizeCallback<Data>;
    phoneHeight?: string | ISizeCallback<Data>;
    tabletHeight?: string | ISizeCallback<Data>;
    desktopHeight?: string | ISizeCallback<Data>;
    minHeight?: string | ISizeCallback<Data>;
    phoneMinHeight?: string | ISizeCallback<Data>;
    tabletMinHeight?: string | ISizeCallback<Data>;
    desktopMinHeight?: string | ISizeCallback<Data>;
    maxHeight?: string | ISizeCallback<Data>;
    phoneMaxHeight?: string | ISizeCallback<Data>;
    tabletMaxHeight?: string | ISizeCallback<Data>;
    desktopMaxHeight?: string | ISizeCallback<Data>;
    width?: string | ISizeCallback<Data>;
    phoneWidth?: string | ISizeCallback<Data>;
    tabletWidth?: string | ISizeCallback<Data>;
    desktopWidth?: string | ISizeCallback<Data>;
    minWidth?: string | ISizeCallback<Data>;
    phoneMinWidth?: string | ISizeCallback<Data>;
    tabletMinWidth?: string | ISizeCallback<Data>;
    desktopMinWidth?: string | ISizeCallback<Data>;
    maxWidth?: string | ISizeCallback<Data>;
    phoneMaxWidth?: string | ISizeCallback<Data>;
    tabletMaxWidth?: string | ISizeCallback<Data>;
    desktopMaxWidth?: string | ISizeCallback<Data>;
    heroOuterStyle?: React.CSSProperties;
    heroOuterPhoneStyle?: React.CSSProperties;
    heroOuterTabletStyle?: React.CSSProperties;
    heroOuterDesktopStyle?: React.CSSProperties;
    heroInnerStyle?: React.CSSProperties;
    heroInnerPhoneStyle?: React.CSSProperties;
    heroInnerTabletStyle?: React.CSSProperties;
    heroInnerDesktopStyle?: React.CSSProperties;
  }
  export default IField;
}

declare module "react-declarative/model/IEntity" {
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  type exclude = "defaultValue";
  /**
   * Объект сущность представляет собой поле прикладного
   * программииста, расширенное входным параметром и
   * коллбеком изменения для внутренней организации
   * работы. ВАЖНО - изменение поля влечет изменение
   * всего целевого объекта, следуя паттерну immutable
   */
  export interface IEntity<Data = IAnything, Payload = IAnything>
    extends Omit<IField<Data, Payload>, exclude> {
    change?: (object: Data, invalidMap: Record<string, boolean>) => void;
    invalidity: (name: string, msg: string, payload: Payload) => void;
    fallback: (e: Error) => void;
    isBaselineAlign: boolean;
    outlinePaper: boolean;
    transparentPaper: boolean;
    dirty?: boolean;
    prefix: string;
    ready: () => void;
    object: Data;
  }
  export default IEntity;
}

declare module "react-declarative/model/IManaged" {
  import IField from "react-declarative/model/IField";
  import IEntity from "react-declarative/model/IEntity";
  import IAnything from "react-declarative/model/IAnything";
  export type PickProp<T extends {}, P extends keyof T> = T[P];
  export type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
  };
  /**
   * Represents a layout with various properties that control its visibility, disabled state, and other features.
   *
   * @template Data - The data type used by the layout.
   * @template Payload - The payload type used by the layout.
   */
  export interface IWrappedLayout<Data = IAnything, Payload = IAnything> {
    isVisible?: PickProp<IField<Data, Payload>, "isVisible">;
    isDisabled?: PickProp<IField<Data, Payload>, "isDisabled">;
    isReadonly?: PickProp<IField<Data, Payload>, "isReadonly">;
    features?: PickProp<IField<Data, Payload>, "features">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    phoneHidden?: PickProp<IField<Data, Payload>, "phoneHidden">;
    tabletHidden?: PickProp<IField<Data, Payload>, "tabletHidden">;
    desktopHidden?: PickProp<IField<Data, Payload>, "desktopHidden">;
    hidden?: PickProp<IField<Data, Payload>, "hidden">;
    noBaseline?: PickProp<IField<Data, Payload>, "noBaseline">;
  }
  /**
   * Типизацию компоновки следует вынести отдельно
   */
  export interface IManagedLayout<Data = IAnything, Payload = IAnything>
    extends IWrappedLayout<Data, Payload> {
    columnsOverride?: PickProp<IField<Data, Payload>, "columnsOverride">;
    sx?: PickProp<IField<Data, Payload>, "sx">;
    columns?: PickProp<IField<Data, Payload>, "columns">;
    phoneColumns?: PickProp<IField<Data, Payload>, "phoneColumns">;
    tabletColumns?: PickProp<IField<Data, Payload>, "tabletColumns">;
    desktopColumns?: PickProp<IField<Data, Payload>, "desktopColumns">;
    fieldRightMargin?: PickProp<IField<Data, Payload>, "fieldRightMargin">;
    fieldBottomMargin?: PickProp<IField<Data, Payload>, "fieldBottomMargin">;
    features?: PickProp<IField<Data, Payload>, "features">;
  }
  /**
   * Компонент высшего порядка makeField
   * перехватывает управление над свойствами
   * поля
   */
  export interface IManagedShallow<Data = IAnything, Payload = IAnything>
    extends IManagedLayout<Data> {
    isDisabled?: PickProp<IField<Data, Payload>, "isDisabled">;
    isVisible?: PickProp<IField<Data, Payload>, "isVisible">;
    isReadonly?: PickProp<IField<Data, Payload>, "isReadonly">;
    isInvalid?: PickProp<IField<Data, Payload>, "isInvalid">;
    isIncorrect?: PickProp<IField<Data, Payload>, "isIncorrect">;
    invalidity?: PickProp<IField<Data, Payload>, "invalidity">;
    shouldRecompute?: PickProp<IField<Data, Payload>, "shouldRecompute">;
    shouldUpdateItemList?: PickProp<
      IField<Data, Payload>,
      "shouldUpdateItemList"
    >;
    shouldUpdateTr?: PickProp<IField<Data, Payload>, "shouldUpdateTr">;
    debug?: PickProp<IField<Data, Payload>, "debug">;
    compute?: PickProp<IField<Data, Payload>, "compute">;
    click?: PickProp<IField<Data, Payload>, "click">;
    focus?: PickProp<IField<Data, Payload>, "focus">;
    blur?: PickProp<IField<Data, Payload>, "blur">;
    menuItems?: PickProp<IField<Data, Payload>, "menuItems">;
    menu?: PickProp<IField<Data, Payload>, "menu">;
    map?: PickProp<IField<Data, Payload>, "map">;
    defaultValue?: PickProp<IField<Data, Payload>, "defaultValue">;
    hidden?: PickProp<IField<Data, Payload>, "hidden">;
    features?: PickProp<IField<Data, Payload>, "features">;
  }
  /**
   * Свойства, не доступные управляемому полю
   */
  type Exclude<Data = IAnything> = {
    object: never;
    type: never;
    focus: never;
    blur: never;
    click: never;
    ready: never;
    check: never;
    change: never;
    name: never;
    menu: never;
    menuItems: never;
  } & IManagedShallow<Data>;
  /**
   * Свойства сущности, обернутой в компонент высшего порядка
   * Предоставляется удобная абстракция
   */
  export interface IManaged<Data = IAnything, Value = any>
    extends Omit<IEntity<Data>, keyof Exclude<Data>> {
    name: string;
    value: Value;
    dirty: boolean;
    withContextMenu: true | undefined;
    disabled: boolean;
    loading: boolean;
    readonly: boolean;
    incorrect: string | null;
    invalid: string | null;
    object: Data;
    onChange: (
      v: Value,
      config?: {
        skipReadonly?: boolean;
      },
    ) => void;
  }
  export default IManaged;
}

declare module "react-declarative/model/IColumn" {
  import ColumnType from "react-declarative/model/ColumnType";
  import {
    IListActionOption,
    ListHandlerChips,
    ListHandlerPagination,
    ListHandlerSortModel,
  } from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  import { Value } from "react-declarative/model/IField";
  /**
   * Represents a column in a table.
   *
   * @template FilterData - The type of filter data that can be used with the column.
   * @template RowData - The type of row data used in the table.
   * @template Payload - The type of payload used with the column.
   */
  export interface IColumn<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
    Payload = IAnything,
  > {
    type: ColumnType;
    field?: string;
    primary?: boolean;
    secondary?: boolean;
    avatar?: boolean;
    headerName?: string;
    fullName?: string;
    description?: string;
    width: string | ((width: number) => string | number);
    minHeight?: string | number;
    phoneOrder?: number;
    phoneHidden?: boolean;
    tabletOrder?: number;
    tabletHidden?: boolean;
    desktopOrder?: number;
    desktopHidden?: boolean;
    columnMenu?: IListActionOption[];
    isVisible?: (params: {
      filterData: FilterData;
      pagination: ListHandlerPagination;
      sortModel: ListHandlerSortModel<RowData>;
      chips: ListHandlerChips<RowData>;
      search: string;
      payload: Payload;
    }) => boolean;
    compute?: (
      row: RowData & {
        _payload: Payload;
      },
      payload: Payload,
    ) => Promise<Value> | Value;
    serialize?: (
      row: RowData & {
        _payload: Payload;
      },
      payload: Payload,
    ) => Promise<Value> | Value;
    element?: React.ComponentType<
      RowData & {
        _payload: Payload;
      }
    >;
    sortable?: boolean;
  }
  export default IColumn;
}

declare module "react-declarative/components/List/api/useApiPaginator" {
  import {
    ListHandler,
    ListHandlerChips,
    ListHandlerResult,
    ListHandlerSortModel,
    ListHandlerPagination,
  } from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  export interface IApiPaginatorParams<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    origin?: string;
    fetch?: typeof window.fetch;
    requestMap?: (url: URL) => URL;
    removeEmptyFilters?: (data: FilterData) => Partial<FilterData>;
    filterHandler?: (url: URL, filterData: FilterData) => URL;
    chipsHandler?: (url: URL, chips: ListHandlerChips<RowData>) => URL;
    sortHandler?: (url: URL, sort: ListHandlerSortModel<RowData>) => URL;
    searchHandler?: (url: URL, search: string) => URL;
    paginationHandler?: (url: URL, pagination: ListHandlerPagination) => URL;
    onLoadBegin?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    withAbortSignal?: boolean;
    withPagination?: boolean;
    withFilters?: boolean;
    withChips?: boolean;
    withSearch?: boolean;
    withSort?: boolean;
    fetchParams?: () => RequestInit;
    fallback?: (e: Error) => void;
    abortSignal?: AbortSignal;
    responseMap?: <T extends IRowData>(
      json: RowData[],
    ) => ListHandlerResult<T> | Promise<ListHandlerResult<T>>;
  }
  /**
   * Function that generates a list handler for API pagination.
   *
   * @param path - The API endpoint path.
   * @param options - The options object.
   * @param options.fetch - The fetch function to use for making API requests (default: window.fetch).
   * @param options.origin - The origin of the API (default: window.location.origin).
   * @param options.abortSignal - The AbortSignal object to use for aborting API requests.
   * @param options.removeEmptyFilters - The function to remove empty filters from the filter data (default: removeEmptyFiltersDefault).
   * @param options.fetchParams - The function to generate fetch parameters (e.g. headers, method, body) (default: null).
   * @param options.fallback - The function to handle error fallback (default: null).
   * @param options.onLoadBegin - The function to call before the API request is made (default: null).
   * @param options.onLoadEnd - The function to call after the API request is completed (default: null).
   * @param options.requestMap - The function to map the request URL (default: (url) => url).
   * @param options.responseMap - The function to map the API response (default: (data) => data).
   * @param options.filterHandler - The function to handle filters in the URL (default: (url, filterData) => { ... }).
   * @param options.chipsHandler - The function to handle chips in the URL (default: (url, chips) => { ... }).
   * @param options.sortHandler - The function to handle sorting in the URL (default: (url, sort) => { ... }).
   * @param options.searchHandler - The function to handle search in the URL (default: (url, search) => { ... }).
   * @param options.paginationHandler - The function to handle pagination in the URL (default: (url, pagination) => { ... }).
   * @param options.withAbortSignal - A flag to enable/disable abort signal usage (default: true).
   * @param options.withPagination - A flag to enable/disable pagination (default: true).
   * @param options.withFilters - A flag to enable/disable filters (default: true).
   * @param options.withSearch - A flag to enable/disable search (default: true).
   * @param options.withChips - A flag to enable/disable chips (default: true).
   * @param options.withSort - A flag to enable/disable sorting (default: true).
   * @returns - The list handler function.
   */
  export const useApiPaginator: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
  >(
    path: string,
    {
      fetch,
      origin,
      abortSignal: signal,
      removeEmptyFilters,
      fetchParams,
      fallback,
      onLoadBegin,
      onLoadEnd,
      requestMap,
      responseMap,
      filterHandler,
      chipsHandler,
      sortHandler,
      searchHandler,
      paginationHandler,
      withAbortSignal,
      withPagination,
      withFilters,
      withSearch,
      withChips,
      withSort,
    }?: IApiPaginatorParams<FilterData, RowData>,
  ) => ListHandler<FilterData, RowData, any>;
  export default useApiPaginator;
}

declare module "react-declarative/components/List/api/useArrayPaginator" {
  import {
    ListHandler,
    ListHandlerChips,
    ListHandlerSortModel,
    ListHandlerPagination,
  } from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  import { IState as ILastPaginationState } from "react-declarative/components/List/api/useLastPagination";
  export interface IArrayPaginatorParams<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    filterHandler?: (rows: RowData[], filterData: FilterData) => RowData[];
    chipsHandler?: (
      rows: RowData[],
      chips: ListHandlerChips<RowData>,
    ) => RowData[];
    sortHandler?: (
      rows: RowData[],
      sort: ListHandlerSortModel<RowData>,
    ) => RowData[];
    paginationHandler?: (
      rows: RowData[],
      pagination: ListHandlerPagination,
    ) => RowData[];
    responseMap?: (
      json: RowData[],
    ) => Record<string, any>[] | Promise<Record<string, any>[]>;
    searchHandler?: (rows: RowData[], search: string) => RowData[];
    compareFn?: (a: RowData, b: RowData, field: keyof RowData) => number;
    removeEmptyFilters?: (data: FilterData) => Partial<FilterData>;
    withPagination?: boolean;
    withFilters?: boolean;
    withChips?: boolean;
    withSort?: boolean;
    withTotal?: boolean;
    withSearch?: boolean;
    searchEntries?: string[];
    searchFilterChars?: string[];
    fallback?: (e: Error) => void;
    onData?: (
      rows: RowData[],
      state: ILastPaginationState<FilterData, RowData>,
    ) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
  }
  /**
   * A utility function for pagination and filtering an array of data rows.
   *
   * @template FilterData - The type of the filter data object.
   * @template RowData - The type of the row data object.
   *
   * @param rowsHandler - The function that retrieves the data rows.
   * @param options - The optional configuration options.
   * @param options.searchEntries - The array of property names to search in when using the search feature. Defaults to SEARCH_ENTRIES.
   * @param options.searchFilterChars - The array of characters to filter in the search feature. Defaults to FILTER_CHARS.
   * @param options.responseMap - The function to map the rows data to the desired output shape. Defaults to mapping to RowData.
   * @param options.removeEmptyFilters - The flag to remove empty filters from the filter data object. Defaults to removeEmptyFiltersDefault.
   * @param options.compareFn - The function to compare two rows based on a field value. Defaults to a default comparison logic.
   * @param options.filterHandler - The function to filter the rows based on the filter data. Defaults to a default filter
   * logic.
   * @param options.chipsHandler - The function to filter the rows based on the chip data. Defaults to a default chip filter logic
   *.
   * @param options.sortHandler - The function to sort the rows based on the sort model. Defaults
   * to a default sort logic.
   * @param options.searchHandler - The function to search for rows based on a search string. Defaults to a default search logic
   *.
   * @param options.paginationHandler - The function to paginate the rows based on the pagination
   * model. Defaults to a default pagination logic.
   * @param options.withPagination - The flag to enable pagination. Defaults to true.
   * @param options.withFilters - The flag to enable filtering. Defaults to true.
   * @param options.withChips - The flag to enable chip filtering. Defaults to true.
   * @param options.withSort - The flag to enable sorting. Defaults to true.
   * @param options.withTotal - The flag to enable total count. Defaults to true.
   * @param options.withSearch - The flag to enable searching. Defaults to true.
   * @param options.fallback - The function to handle errors. Defaults to null.
   * @param options.onLoadStart - The function to call when the data loading starts. Defaults to null.
   * @param options.onLoadEnd - The function to call when the data loading ends. Defaults to null.
   * @param options.onData - The function to call when the data is received. Defaults to null.
   *
   * @returns - The list handler function.
   */
  export const useArrayPaginator: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
  >(
    rowsHandler: ListHandler<FilterData, RowData, any>,
    {
      searchEntries,
      searchFilterChars,
      responseMap,
      removeEmptyFilters,
      compareFn,
      filterHandler,
      chipsHandler,
      sortHandler,
      searchHandler,
      paginationHandler,
      withPagination,
      withFilters,
      withChips,
      withSort,
      withTotal,
      withSearch,
      fallback,
      onLoadStart,
      onLoadEnd,
      onData,
    }?: IArrayPaginatorParams<FilterData, RowData>,
  ) => ListHandler<FilterData, RowData, any>;
  export default useArrayPaginator;
}

declare module "react-declarative/components/List" {
  export * from "react-declarative/components/List/List";
  export * from "react-declarative/components/List/slots";
  export { useProps as useListProps } from "react-declarative/components/List/hooks/useProps";
  export { useCachedRows as useListCachedRows } from "react-declarative/components/List/hooks/useCachedRows";
  export { useApiPaginator } from "react-declarative/components/List/api/useApiPaginator";
  export { useLastPagination } from "react-declarative/components/List/api/useLastPagination";
  export { useQueryPagination } from "react-declarative/components/List/api/useQueryPagination";
  export { useCachedPaginator } from "react-declarative/components/List/api/useCachedPaginator";
  export { useArrayPaginator } from "react-declarative/components/List/api/useArrayPaginator";
  export { useHistoryStatePagination } from "react-declarative/components/List/api/useHistoryStatePagination";
  export { useListSelection } from "react-declarative/components/List/api/useListSelection";
  export { useListAction } from "react-declarative/components/List/api/useListAction";
  export { default as ListSlotFactory } from "react-declarative/components/List/components/SlotFactory";
  export { defaultSlots as ListDefaultSlots } from "react-declarative/components/List/components/SlotFactory";
  export { useFilterData as useListFilterData } from "react-declarative/components/List/hooks/useFilterData";
  export { usePagination as useListPagination } from "react-declarative/components/List/hooks/usePagination";
  export { useSortModel as useListSortModel } from "react-declarative/components/List/hooks/useSortModel";
  export { useChips as useListChips } from "react-declarative/components/List/hooks/useChips";
  export { useSearch as useListSearch } from "react-declarative/components/List/hooks/useSearch";
  export { usePayload as useListPayload } from "react-declarative/components/List/hooks/usePayload";
  export { useReload as useListReload } from "react-declarative/components/List/hooks/useReload";
  export { useSelection as useListSelectionState } from "react-declarative/components/List/hooks/useSelection";
  export { ClassicChipListSlot } from "react-declarative/components/List/common/ClassicChipListSlot";
  export { ClassicFilterListSlot } from "react-declarative/components/List/common/ClassicFilterListSlot";
  export { DialogFilterListSlot } from "react-declarative/components/List/common/DialogFilterListSlot";
  export { ModalFilterListSlot } from "react-declarative/components/List/common/ModalFilterListSlot";
  export { ModernChipListSlot } from "react-declarative/components/List/common/ModernChipListSlot";
  export * from "react-declarative/components/List/hooks/useColumnConfig";
  export { default } from "react-declarative/components/List/List";
}

declare module "react-declarative/components/One/api/useApiHandler" {
  import { OneHandler } from "react-declarative/model/IOneProps";
  import IAnything from "react-declarative/model/IAnything";
  export interface IApiHandlerParams<Data extends IAnything = IAnything> {
    origin?: string;
    requestMap?: (url: URL) => URL;
    responseMap?: (
      json: Data,
    ) => Record<string, any> | Promise<Record<string, any>>;
    onLoadBegin?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    withAbortSignal?: boolean;
    fetchParams?: () => RequestInit;
    fallback?: (e: Error) => void;
    abortSignal?: AbortSignal;
    fetch?: typeof window.fetch;
  }
  /**
   * This function is a generic API handler that fetches data from a specified path using the Fetch API.
   * It provides options for customizing the fetch request, handling loading state, aborting the request, and error handling.
   *
   * @template Data - The type of the data returned from the API
   * @param path - The relative or absolute path to fetch from
   * @param options - An object containing optional configuration options for the API handler
   * @param options.fetch - The fetch function to use (default: window.fetch)
   * @param options.origin - The origin to use when constructing the URL (default: window.location.origin)
   * @param options.abortSignal - The AbortSignal object to use for aborting the request (default: abortManager.signal)
   * @param options.requestMap - A function to transform the URL before making the request (default: (url) => url)
   * @param options.responseMap - A function to transform the JSON response from the API (default: (json) => json as never)
   * @param options.onLoadBegin - An optional callback function to execute when the request begins loading
   * @param options.onLoadEnd - An optional callback function to execute when the request finishes loading
   * @param options.withAbortSignal - Whether to use the abort signal to cancel the request (default: true)
   * @param options.fetchParams - An optional function to retrieve additional fetch parameters to be passed to fetch
   * @param options.fallback - An optional function to handle errors and provide fallback behavior
   * @returns - The API handler function that can be invoked to make the request and retrieve the data
   */
  export const useApiHandler: <Data extends unknown = any>(
    path: string,
    {
      fetch,
      origin,
      abortSignal: signal,
      requestMap,
      responseMap,
      onLoadBegin,
      onLoadEnd,
      withAbortSignal,
      fetchParams,
      fallback,
    }?: IApiHandlerParams<Data>,
  ) => OneHandler<Data, any>;
  export default useApiHandler;
}

declare module "react-declarative/model/FieldType" {
  /**
   * Represents the type of a field in a <One /> component.
   */
  export enum FieldType {
    Layout = "custom-layout",
    Switch = "switch-field",
    YesNo = "yesno-field",
    Line = "line-field",
    File = "file-field",
    Group = "group-layout",
    Paper = "paper-layout",
    Outline = "outline-layout",
    Expansion = "expansion-layout",
    Radio = "radio-field",
    Checkbox = "checkbox-field",
    Text = "text-field",
    Date = "date-field",
    Time = "time-field",
    Progress = "progress-field",
    Component = "component-field",
    Slider = "slider-field",
    Combo = "combo-field",
    Choose = "choose-field",
    Tree = "tree-field",
    Dict = "dict-field",
    Init = "init-field",
    Complete = "complete-field",
    Items = "items-field",
    Rating = "rating-field",
    Typography = "typography-field",
    Fragment = "fragment-layout",
    Div = "div-layout",
    Box = "box-layout",
    Tabs = "tabs-layout",
    Hero = "hero-layout",
    Center = "center-layout",
    Stretch = "stretch-layout",
    Condition = "condition-layout",
  }
  export default FieldType;
}

declare module "react-declarative/model/ColumnType" {
  export enum ColumnType {
    Text = "text-cell",
    Action = "action-cell",
    CheckBox = "checkbox-cell",
    Compute = "compute-cell",
    Component = "component-cell",
  }
  export default ColumnType;
}

declare module "react-declarative/model/ActionType" {
  export enum ActionType {
    Add = "add-action",
    Fab = "fab-action",
    Menu = "menu-action",
  }
  export default ActionType;
}

declare module "react-declarative/model/SelectionMode" {
  /**
   * Enum representing different selection modes.
   *
   * @enum
   */
  export enum SelectionMode {
    Single = "single-selection",
    Multiple = "multiple-selection",
    None = "none-selection",
  }
  export default SelectionMode;
}

declare module "react-declarative/model/IListApi" {
  import { IListState } from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  /**
   * Represents an API for manipulating and retrieving data from a list.
   *
   * @template FilterData - The data type for the filter.
   * @template RowData - The data type for each row in the list.
   */
  export interface IListApi<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    reload: (keepPagination?: boolean) => Promise<void>;
    rerender: () => void;
    setLimit: (limit: number) => void;
    setPage: (page: number) => void;
    setRows: (rows: RowData[]) => void;
    setFilterData: (filterData: FilterData) => void;
    getState: () => IListState<FilterData, RowData>;
  }
  export default IListApi;
}

declare module "react-declarative/model/IOneApi" {
  import IAnything from "react-declarative/model/IAnything";
  /**
   * Represents an interface for interacting with the One component by api ref.
   * @template Data - The type of data that the OneApi operates on.
   */
  export interface IOneApi<Data = IAnything> {
    reload: () => Promise<void>;
    change: (data: Data, initial?: boolean) => void;
    getData: () => Data;
  }
  export default IOneApi;
}

declare module "react-declarative/model/IListOperation" {
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  import IOption from "react-declarative/model/IOption";
  /**
   * Represents an operation that can be performed on a list of row data.
   *
   * @template RowData The type of the row data in the list.
   * @template Payload The type of the payload for the operation.
   */
  export interface IListOperation<
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
  > extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isAvailable?:
      | ((
          rowIds: RowData[],
          isAll: boolean,
          payload: Payload,
        ) => boolean | Promise<boolean>)
      | boolean;
  }
  export default IListOperation;
}

declare module "react-declarative/model/IListRowAction" {
  import IOption from "react-declarative/model/IOption";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  /**
   * Represents a row action for a list row.
   *
   * @template RowData - The type of data for the row.
   * @template Payload - The type of payload for the action.
   */
  export interface IListRowAction<
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
  > extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isVisible?: (row: RowData, payload: Payload) => Promise<boolean> | boolean;
    isDisabled?: (row: RowData, payload: Payload) => Promise<boolean> | boolean;
    enabled?: boolean;
  }
  export default IListRowAction;
}

declare module "react-declarative/model/IListProps" {
  import { Ref } from "react";
  import ActionType from "react-declarative/model/ActionType";
  import SelectionMode from "react-declarative/model/SelectionMode";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData, { RowId } from "react-declarative/model/IRowData";
  import IColumn from "react-declarative/model/IColumn";
  import IListOperation from "react-declarative/model/IListOperation";
  import IListRowAction from "react-declarative/model/IListRowAction";
  import IField from "react-declarative/model/IField";
  import IListApi from "react-declarative/model/IListApi";
  import IOption from "react-declarative/model/IOption";
  import IOnePublicProps from "react-declarative/model/IOnePublicProps";
  import { TSubject } from "react-declarative/utils/rx/Subject";
  import { ISlotFactoryContext } from "react-declarative/components/List/components/SlotFactory";
  /**
   * An interface representing the update options for a list action.
   *
   * @typeparam RowData - The type of row data.
   *
   * @extends IListActionOption<RowData>
   */
  interface IUpdateOption<RowData extends IRowData = IAnything>
    extends Omit<
      IListActionOption<RowData>,
      keyof {
        label: never;
        icon: never;
      }
    > {
    action: "update-now";
    label?: IOption["label"];
    icon?: IOption["icon"];
  }
  /**
   * Represents a resort option for a list action.
   * @interface
   * @template RowData - The type of row data for the resort option.
   * @extends {Omit<IListActionOption<RowData>, "label" | "icon">}
   */
  interface IResortOption<RowData extends IRowData = IAnything>
    extends Omit<
      IListActionOption<RowData>,
      keyof {
        label: never;
        icon: never;
      }
    > {
    action: "resort-action";
    label?: IOption["label"];
    icon?: IOption["icon"];
  }
  /**
   * Represents the options for the "drop-filters" action in a list.
   *
   * @template RowData - The type of the row data.
   *
   * @interface IDropFiltersOption
   * @extends {Omit<IListActionOption<RowData>, 'label' | 'icon'>}
   */
  interface IDropFiltersOption<RowData extends IRowData = IAnything>
    extends Omit<
      IListActionOption<RowData>,
      keyof {
        label: never;
        icon: never;
      }
    > {
    action: "drop-filters";
    label?: IOption["label"];
    icon?: IOption["icon"];
  }
  /**
   * Represents an option for adding filters.
   *
   * @template RowData - The type of the row data.
   */
  interface IAddFiltersOption<RowData extends IRowData = IAnything>
    extends Omit<
      IListActionOption<RowData>,
      keyof {
        label: never;
        icon: never;
      }
    > {
    action: "add-action";
    label?: IOption["label"];
    icon?: IOption["icon"];
  }
  /**
   * Represents an option for a list action.
   *
   * @template RowData - The type of the row data.
   * @template Payload - The type of the payload.
   */
  export interface IListActionOption<
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
  > extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isVisible?: (
      selectedRows: RowData[],
      payload: Payload,
    ) => Promise<boolean> | boolean;
    isDisabled?: (
      selectedRows: RowData[],
      payload: Payload,
    ) => Promise<boolean> | boolean;
  }
  /**
   * Represents an action that can be performed on a list of data.
   * @template RowData - The type of the row data.
   * @template Payload - The type of the payload.
   */
  export interface IListAction<
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
  > {
    type: ActionType;
    action?: string;
    label?: string;
    isVisible?: (
      selectedRows: RowData[],
      payload: Payload,
    ) => Promise<boolean> | boolean;
    isDisabled?: (
      selectedRows: RowData[],
      payload: Payload,
    ) => Promise<boolean> | boolean;
    icon?: React.ComponentType<any>;
    options?: (
      | IListActionOption<RowData>
      | IUpdateOption<RowData>
      | IResortOption<RowData>
      | IDropFiltersOption<RowData>
      | IAddFiltersOption<RowData>
    )[];
  }
  /**
   * Represents a chip in a list.
   *
   * @template RowData - The type of the row data associated with the chip.
   */
  export interface IListChip<RowData extends IRowData = IAnything> {
    name: keyof RowData;
    label: string;
    color?: string;
    enabled?: boolean;
  }
  /**
   * Represents the result of a list handling operation.
   *
   * @template RowData - The type of the row data.
   * @typedef {RowData[]} ListHandlerResult
   * @typedef {{
   *   rows: RowData[];
   *   total: number | null;
   * }} ListHandlerResult[]
   */
  export type ListHandlerResult<RowData extends IRowData = IAnything> =
    | RowData[]
    | {
        rows: RowData[];
        total: number | null;
      };
  /**
   * Represents the avatar for the list item.
   * @typedef {Object} ListAvatar
   * @property  [src] - The source URL for the avatar image.
   * @property  [alt] - The alternate text for the avatar image.
   */
  export type ListAvatar = {
    src?: string;
    alt?: string;
  };
  /**
   * Represents a pagination handler for a list.
   *
   * @typedef {Object} ListHandlerPagination
   * @property  limit - The number of items to retrieve per page.
   * @property  offset - The starting index of the items to retrieve.
   */
  export type ListHandlerPagination = {
    limit: number;
    offset: number;
  };
  /**
   * Represents a list handler for chips.
   * @template RowData - The type of row data.
   */
  export type ListHandlerChips<RowData extends IRowData = IAnything> = Partial<
    Record<keyof RowData, boolean>
  >;
  /**
   * Represents a sorting model for a list handler.
   *
   * @template RowData - The type of data in list rows.
   */
  export type ListHandlerSortModel<RowData extends IRowData = IAnything> =
    IListSortItem<RowData>[];
  /**
   * Represents a ListHandler class that handles filtering, pagination, sorting, and searching data.
   *
   * @param <FilterData> The type of data used for filtering.
   * @param <RowData> The type of data in each row.
   * @param <Payload> Optional payload data.
   */
  export type ListHandler<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
    Payload = IAnything,
  > =
    | RowData[]
    | ((
        data: FilterData,
        pagination: ListHandlerPagination,
        sort: ListHandlerSortModel<RowData>,
        chips: ListHandlerChips<RowData>,
        search: string,
        payload: Payload,
      ) => Promise<ListHandlerResult<RowData>> | ListHandlerResult<RowData>);
  /**
   * Represents the state of a list.
   *
   * @template FilterData - The type of the filter data.
   * @template RowData - The type of the row data.
   */
  export interface IListState<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    initComplete: boolean;
    payload: IAnything;
    filterData: FilterData;
    isChooser: boolean;
    rows: RowData[];
    limit: number;
    offset: number;
    total: number | null;
    loading: boolean;
    search: string;
    filtersCollapsed: boolean;
    sort: ListHandlerSortModel<RowData>;
    chips: ListHandlerChips<RowData>;
    rerender: boolean;
  }
  /**
   * Interface contract for callback functions used in IList functionality.
   *
   * @template FilterData - The type of data to be used in filter operations.
   * @template RowData - The type of data contained in each row.
   */
  export interface IListCallbacks<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    handleDefault: () => Promise<void>;
    handleSortModel: (sort: ListHandlerSortModel<RowData>) => void;
    handleFilter: (data: FilterData, keepPagination?: boolean) => void;
    handlePageChange: (page: number) => void;
    handleLimitChange: (limit: number) => void;
    handleRowsChange: (rows: RowData[]) => void;
    handleFiltersCollapsed: (filtersCollapsed: boolean) => void;
    handleChips: (chips: ListHandlerChips) => void;
    handleReload: (keepPagination?: boolean) => Promise<void>;
    handleSearch: (search: string) => void;
    handleRerender: () => void;
    ready: () => void;
  }
  /**
   * Represents a slot of position action in a list.
   * @interface
   * @template FilterData - The type of filter data.
   * @template RowData - The type of row data.
   * @template Payload - The type of payload.
   */
  export interface IPositionActionListSlot<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
  > extends Omit<IListCallbacks<FilterData, RowData>, "ready"> {
    filterData: Record<string, any>;
    pagination: ListHandlerPagination;
    sortModel: ListHandlerSortModel<RowData>;
    chips: Record<string | number | symbol, boolean | undefined>;
    search: string;
    payload: Payload;
  }
  /**
   * Represents an item used for sorting in a list.
   * @template RowData - The type of the row data in the list.
   */
  export interface IListSortItem<RowData extends IRowData = IAnything> {
    field: keyof RowData;
    sort: "asc" | "desc";
  }
  /**
   * Interface for the List datagrid component props.
   * @template FilterData The type of the filter data.
   * @template RowData The type of the row data.
   * @template Payload The type of the payload.
   * @template Field The type of the field.
   */
  export interface IListProps<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
    Field extends IField = IField<FilterData, Payload>,
  > {
    apiRef?: Ref<IListApi<FilterData, RowData>>;
    BeforeActionList?: React.ComponentType<
      IPositionActionListSlot<FilterData, RowData, Payload>
    >;
    AfterActionList?: React.ComponentType<
      IPositionActionListSlot<FilterData, RowData, Payload>
    >;
    BeforeOperationList?: React.ComponentType<
      IPositionActionListSlot<FilterData, RowData, Payload>
    >;
    AfterOperationList?: React.ComponentType<
      IPositionActionListSlot<FilterData, RowData, Payload>
    >;
    fetchDebounce?: number;
    className?: string;
    style?: React.CSSProperties;
    title?: string;
    withRawSearch?: boolean;
    filterLabel?: string;
    actions?: IListAction<RowData, Payload>[];
    operations?: IListOperation<RowData, Payload>[];
    limit?: number;
    page?: number;
    sizeByElement?: boolean;
    selectedRows?: RowId[];
    features?: IOnePublicProps<FilterData>["features"];
    heightRequest?: (height: number) => number;
    widthRequest?: (width: number) => number;
    onRows?: (rows: RowData[]) => void;
    onSelectedRows?: (rowIds: RowId[], initialChange: boolean) => void;
    onFilterChange?: (data: FilterData) => void;
    onChipsChange?: (data: ListHandlerChips<RowData>) => void;
    onSearchChange?: (search: string) => void;
    onSortModelChange?: (sort: ListHandlerSortModel<RowData>) => void;
    onOperation?: (
      action: string,
      selectedRows: RowData[],
      isAll: boolean,
      reload: (keepPagination?: boolean) => Promise<void>,
    ) => void;
    onRowAction?: (
      action: string,
      row: RowData,
      reload: (keepPagination?: boolean) => Promise<void>,
    ) => void;
    onRowClick?: (
      row: RowData,
      reload: (keepPagination?: boolean) => Promise<void>,
    ) => void;
    onPageChange?: (page: number) => void;
    onColumnAction?: (
      field: string,
      action: string,
      selectedRows: RowData[],
      reload: (keepPagination?: boolean) => Promise<void>,
    ) => void;
    onLimitChange?: (limit: number) => void;
    onLoadStart?: (source: string) => void;
    onLoadEnd?: (isOk: boolean, source: string) => void;
    onAction?: (
      action: string,
      selectedRows: RowData[],
      reload: (keepPagination?: boolean) => Promise<void>,
    ) => void;
    columns: IColumn<FilterData, RowData, Payload>[];
    filters?: Field[];
    handler: ListHandler<FilterData, RowData>;
    payload?: Payload | (() => Payload);
    rowMark?:
      | ((row: RowData) => string)
      | ((row: RowData) => Promise<string>)
      | string;
    rowColor?: (row: RowData) => string;
    isRowDisabled?: (
      row: RowData,
      params: {
        filterData: FilterData;
        pagination: ListHandlerPagination;
        sortModel: ListHandlerSortModel<RowData>;
        chips: ListHandlerChips<RowData>;
        search: string;
        payload: Payload;
      },
    ) => boolean;
    labelDisplayedRows?: (paginationInfo: {
      from: number;
      to: number;
      count: number;
      page: number;
    }) => string;
    fallback?: (e: Error) => void;
    reloadSubject?: TSubject<void>;
    rerenderSubject?: TSubject<void>;
    setLimitSubject?: TSubject<number>;
    setPageSubject?: TSubject<number>;
    setRowsSubject?: TSubject<RowData[]>;
    setFilterDataSubject?: TSubject<FilterData>;
    rowActions?: IListRowAction[];
    noDisplayedRows?: boolean;
    withCustomFilters?: boolean;
    withOutlinePaper?: boolean;
    withTransparentPaper?: boolean;
    withSingleChip?: boolean;
    withAllListOperations?: boolean;
    withSelectOnRowClick?: boolean;
    withToggledFilters?: boolean;
    withSingleSort?: boolean;
    withSearch?: boolean;
    withLoader?: boolean;
    withMobile?: boolean;
    withArrowPagination?: boolean;
    withRangePagination?: boolean;
    withInitialLoader?: boolean;
    selectionLabel?: (size: number) => string | Promise<string>;
    rowsPerPage?: Array<
      | number
      | {
          value: number;
          label: string;
        }
    >;
    selectionMode?: SelectionMode;
    chips?: IListChip<RowData>[];
    chipData?: ListHandlerChips<RowData>;
    search?: string;
    filterData?: Partial<FilterData>;
    sortModel?: ListHandlerSortModel<RowData>;
    isChooser?: boolean;
    slots?: Partial<ISlotFactoryContext>;
  }
  export default IListProps;
}

declare module "react-declarative/model/IOption" {
  import IAnything from "react-declarative/model/IAnything";
  /**
   * Represents an option for a specific action or behavior.
   *
   * @template Payload - The payload type for evaluating option visibility and disabled state.
   */
  export interface IOption<Payload = IAnything> {
    label?: string;
    action?: string;
    divider?: boolean;
    icon?: React.ComponentType<any>;
    isVisible?: (payload: Payload) => Promise<boolean> | boolean;
    isDisabled?: (payload: Payload) => Promise<boolean> | boolean;
  }
  export default IOption;
}

declare module "react-declarative/model/IBreadcrumbsOption" {
  import IOption from "react-declarative/model/IOption";
  /**
   * Represents the options for the Breadcrumbs component.
   *
   * @template T - The type of the payload that can be passed to the isVisible and isDisabled functions.
   */
  export interface IBreadcrumbsOption<T extends any = any>
    extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isVisible?: (payload: T) => Promise<boolean> | boolean;
    isDisabled?: (payload: T) => Promise<boolean> | boolean;
  }
  export default IBreadcrumbsOption;
}

declare module "react-declarative/helpers/serviceManager" {
  type Key = string | symbol;
  export interface IService {
    prefetch?: () => Promise<void>;
    unload?: () => Promise<void>;
  }
  class ServiceManager {
    constructor(_name?: string);
    registerInstance: <T = object>(key: Key, inst: T) => void;
    registerCreator: <T = object>(key: Key, ctor: () => T | Promise<T>) => void;
    inject: <T = object>(key: Key, verbose?: boolean) => T;
    waitForProvide: ((verbose?: any) => Promise<void>) &
      import("../utils/hof/singleshot").IClearable;
    prefetch: ((verbose?: any) => Promise<void>) &
      import("../utils/hof/singleshot").IClearable;
    unload: ((verbose?: any) => Promise<void>) &
      import("../utils/hof/singleshot").IClearable;
    clear: () => void;
  }
  global {
    interface Window {
      __reactDeclarative_ServiceManager: ServiceManager;
    }
  }
  export const serviceManager: {
    _serviceManager: ServiceManager;
    registerInstance: <T = object>(key: Key, inst: T) => void;
    registerCreator: <T_1 = object>(
      key: Key,
      ctor: () => T_1 | Promise<T_1>,
    ) => void;
    inject: <T_2 = object>(key: Key, verbose?: boolean) => T_2;
    waitForProvide: (verbose?: boolean) => Promise<void>;
    prefetch: (verbose?: boolean) => Promise<void>;
    unload: (verbose?: boolean) => Promise<void>;
    clear: () => void;
  };
  const provide: <T = object>(key: Key, ctor: () => T | Promise<T>) => void,
    waitForProvide: (verbose?: boolean) => Promise<void>,
    inject: <T = object>(key: Key, verbose?: boolean) => T,
    prefetch: (verbose?: boolean) => Promise<void>,
    unload: (verbose?: boolean) => Promise<void>;
  export { provide, inject, waitForProvide, prefetch, unload };
  export const createServiceManager: (name?: string) => {
    serviceManager: ServiceManager;
    provide: <T = object>(key: Key, ctor: () => T | Promise<T>) => void;
    inject: <T_1 = object>(key: Key) => T_1;
    prefetch: () => Promise<void>;
    unload: () => Promise<void>;
    dispose: () => Promise<void>;
  };
  export default createServiceManager;
}

declare module "react-declarative/helpers/routeManager" {
  import { BrowserHistory, HashHistory, MemoryHistory } from "history";
  import { ISwitchItem } from "react-declarative/utils/getRouteParams";
  import Subject from "react-declarative/utils/rx/Subject";
  export class RouteManager<
    T extends Record<string, any> = Record<string, any>,
    I extends ISwitchItem = ISwitchItem,
  > extends Subject<void> {
    get params(): T | null;
    get item(): I | null;
    constructor(
      routes: I[],
      history: MemoryHistory | BrowserHistory | HashHistory,
    );
    dispose: () => void;
  }
  export const createRouteParamsManager: <
    T extends Record<string, any> = Record<string, any>,
    I extends ISwitchItem = ISwitchItem,
  >(
    routes: I[],
    history: MemoryHistory | BrowserHistory | HashHistory,
  ) => {
    (): T | null;
    clear: void;
  };
  export const createRouteItemManager: <
    T extends Record<string, any> = Record<string, any>,
    I extends ISwitchItem = ISwitchItem,
  >(
    routes: I[],
    history: MemoryHistory | BrowserHistory | HashHistory,
  ) => {
    (): I | null;
    clear: void;
  };
  export { ISwitchItem };
  export default RouteManager;
}

declare module "react-declarative/hooks/usePreventAutofill" {
  import * as React from "react";
  interface IParams<T = HTMLInputElement> {
    onFocus?: React.FocusEventHandler<T>;
    onTouchStart?: React.TouchEventHandler<T>;
    onContextMenu: React.MouseEventHandler<T>;
    readOnly?: boolean;
  }
  interface IResult<T = HTMLInputElement> {
    readOnly: boolean;
    onFocus: React.FocusEventHandler<T>;
    onTouchStart: React.TouchEventHandler<T>;
    onContextMenu: React.MouseEventHandler<T>;
  }
  /**
   * This function takes an object with optional parameters and returns an object with properties and event handlers related to preventing autofill behavior on an HTMLInputElement.
   *
   * @see https://stackoverflow.com/questions/15738259/disabling-chrome-autofill/36283282
   *
   * @template T - The type of the HTMLInputElement.
   * @param [params={}] - An object containing optional parameters.
   * @param [params.readOnly] - Specifies whether the input element is read-only.
   * @param [params.onFocus] - Event handler for the "focus" event.
   * @param [params.onTouchStart] - Event handler for the "touchstart" event.
   * @param [params.onContextMenu] - Event handler for the "contextmenu" event.
   * @returns - An object with properties and event handlers related to preventing autofill behavior on an HTMLInputElement.
   */
  export const usePreventAutofill: <T = HTMLInputElement>({
    readOnly: upperReadOnly,
    onFocus,
    onTouchStart,
    onContextMenu,
  }?: Partial<IParams<T>>) => IResult<T>;
  export default usePreventAutofill;
}

declare module "react-declarative/hooks/useContextMenu" {
  import * as React from "react";
  import { IAsyncProps } from "react-declarative/components/Async";
  import IOption from "react-declarative/model/IOption";
  import TSubject from "react-declarative/model/TSubject";
  interface IParams<T extends any = object> {
    keepMounted?: boolean;
    options: Partial<IOption>[];
    onAction?: (action: string) => void;
    fallback?: (e: Error) => void;
    deps?: any[];
    throwError?: boolean;
    reloadSubject?: TSubject<void>;
    payload?: IAsyncProps<T>["payload"];
    onLoadStart?: IAsyncProps<T>["onLoadStart"];
    onLoadEnd?: IAsyncProps<T>["onLoadEnd"];
    BeforeContent?: React.ComponentType<any>;
    AfterContent?: React.ComponentType<any>;
  }
  interface IResult {
    elementProps: {
      onContextMenu: React.MouseEventHandler<HTMLDivElement>;
    };
    render: () => React.ReactNode;
  }
  /**
   * Represents a utility for displaying a context menu.
   *
   * @template T - The type of the payload object.
   *
   * @param params - The parameters for configuring the context menu.
   * @param [params.keepMounted=false] - Flag indicating if the menu should remain mounted when closed.
   * @param [params.AfterContent] - The component to render after the menu items.
   * @param [params.BeforeContent] - The component to render before the menu items.
   * @param [params.deps] - Dependencies to trigger reload of menu items.
   * @param [params.payload] - The payload object to pass to menu item handlers.
   * @param [params.onLoadStart] - The callback to invoke when the menu items start loading.
   * @param [params.onLoadEnd] - The callback to invoke when the menu items finish loading.
   * @param [params.onAction=() => undefined] - The callback to invoke when a menu item is clicked.
   * @param [params.options=[]] - The array of options to render as menu items.
   * @param [params.fallback] - The component to render as a fallback during loading.
   * @param [params.reloadSubject] - The subject to trigger a reload of menu items.
   * @param [params.throwError] - Flag indicating if an error should be thrown on loading failures.
   *
   * @returns - The object containing the properties and methods for rendering the context menu.
   * @property elementProps - The properties to apply to the element that triggers the context menu.
   * @property render - The function to render the context menu component.
   */
  export const useContextMenu: <T extends unknown = object>({
    keepMounted,
    AfterContent,
    BeforeContent,
    deps,
    payload,
    onLoadStart,
    onLoadEnd,
    onAction,
    options,
    fallback,
    reloadSubject,
    throwError,
  }: IParams<T>) => IResult;
  export default useContextMenu;
}

declare module "react-declarative/hooks/useRouteItem" {
  import { BrowserHistory, HashHistory, MemoryHistory } from "history";
  import { ISwitchItem } from "react-declarative/helpers/routeManager";
  /**
   * Returns the current item based on the provided routes and history.
   *
   * @template T - The type of the record for route parameters and data.
   * @template I - The type of the switch item.
   *
   * @param routes - An array of switch items representing the different routes.
   * @param history - The history object used for navigation.
   *
   * @returns - The current switch item based on the provided routes and history.
   */
  export const useRouteItem: <
    T extends Record<string, any> = Record<string, any>,
    I extends ISwitchItem = ISwitchItem,
  >(
    routes: I[],
    history: MemoryHistory | BrowserHistory | HashHistory,
  ) => I | null;
  export default useRouteItem;
}

declare module "react-declarative/hooks/useRouteParams" {
  import { BrowserHistory, HashHistory, MemoryHistory } from "history";
  import { ISwitchItem } from "react-declarative/helpers/routeManager";
  /**
   * The `useRouteParams` hook is used to retrieve the parameters of the currently active route.
   *
   * @template T - The type of the route parameters.
   * @template I - The type of the switch items.
   *
   * @param routes - Array of route items.
   * @param history - The history object to track route changes.
   *
   * @returns - The parameters of the currently active route.
   */
  export const useRouteParams: <
    T extends Record<string, any> = Record<string, any>,
    I extends ISwitchItem = ISwitchItem,
  >(
    routes: I[],
    history: MemoryHistory | BrowserHistory | HashHistory,
  ) => T | null;
  export default useRouteParams;
}

declare module "react-declarative/hooks/useWatchChanges" {
  /**
   * Watches for changes in dependencies and provides a subject to track changes.
   *
   * @param deps - The dependencies to watch for changes.
   * @returns An object containing methods and properties for watching changes.
   */
  export const useWatchChanges: (deps?: any[]) => {
    readonly useChanges: () => void;
    readonly changeSubject: import("..").Subject<void>;
    readonly watch: {
      resetWatcher: () => void;
      beginWatch: () => void;
      stopWatch: () => void;
    };
  };
  export default useWatchChanges;
}

declare module "react-declarative/hooks/useForceUpdate" {
  /**
   * A custom hook that returns a function for force updating a component.
   *
   * @returns The function to be used for force updating.
   * @example
   * useForceUpdate();
   */
  export const useForceUpdate: () => () => void;
  export default useForceUpdate;
}

declare module "react-declarative/hooks/useLocalHistory" {
  import History from "react-declarative/model/History";
  interface IParams {
    history?: History;
    pathname: string;
  }
  /**
   * Initializes and manages a local history object.
   *
   * @param options - The options for the local history.
   * @param options.history - The upper history object to sync with.
   * @param [options.pathname="/"] - The initial pathname for the history.
   *
   * @return - The local history object.
   */
  export const useLocalHistory: ({
    history: upperHistory,
    pathname,
  }?: Partial<IParams>) => {
    history: import("history").MemoryHistory;
  };
  export default useLocalHistory;
}

declare module "react-declarative/utils/toRouteUrl" {
  /**
   * Converts a template string and params object into a route URL.
   * @param template - The template string representing the route URL.
   * @param params - The parameters object to be filled into the template.
   * @returns The generated route URL.
   */
  export const toRouteUrl: (template: string, params: object) => string;
  export default toRouteUrl;
}

declare module "react-declarative/utils/parseRouteUrl" {
  /**
   * Parses the given route template and URL to match them and returns the result.
   *
   * @param template - The route template to match against.
   * @param url - The URL to be matched.
   * @returns - The matched result or null if no match is found.
   */
  export const parseRouteUrl: (
    template: string,
    url: string,
  ) => import("path-to-regexp").MatchResult<object> | null;
  export default parseRouteUrl;
}

declare module "react-declarative/model/IMenuGroup" {
  import * as React from "react";
  /**
   * Represents a menu option.
   *
   * @template T - The type of the payload for dynamic properties.
   */
  export interface IMenuOption<T extends any = any> {
    name?: string;
    label: string;
    icon?: React.ComponentType<any>;
    lifted?: boolean;
    roles?: string[];
    bold?: boolean;
    visible?: boolean;
    disabled?: boolean;
    getRoles?: ((payload: T) => string[]) | ((payload: T) => Promise<string[]>);
    isBold?: ((payload: T) => boolean) | ((payload: T) => Promise<boolean>);
    isDisabled?: ((payload: T) => boolean) | ((payload: T) => Promise<boolean>);
    isVisible?: ((payload: T) => boolean) | ((payload: T) => Promise<boolean>);
  }
  export interface IMenuGroup<T extends any = any> extends IMenuOption<T> {
    options?: IMenuGroup<T>[];
  }
  export default IMenuGroup;
}

declare module "react-declarative/model/IOneProps" {
  import React from "react";
  import { SxProps } from "@mui/material";
  import IField, { Value } from "react-declarative/model/IField";
  import IEntity from "react-declarative/model/IEntity";
  import IAnything from "react-declarative/model/IAnything";
  import IOneApi from "react-declarative/model/IOneApi";
  import { TSubject } from "react-declarative/utils/rx/Subject";
  import { ISlotFactoryContext } from "react-declarative/components/One/components/SlotFactory";
  type DataOrNull<Data = IAnything> = Data | null;
  export type OneHandler<Data = IAnything, Payload = IAnything> =
    | Data
    | ((payload: Payload) => DataOrNull<Data>)
    | ((payload: Payload) => Promise<DataOrNull<Data>>)
    | null;
  /**
   * Properties of the <One /> template engine component
   */
  export interface IOneProps<
    Data = IAnything,
    Payload = IAnything,
    Field = IField<Data, Payload>,
  > {
    /**
     * Ссылка на объект API
     */
    apiRef?: React.Ref<IOneApi>;
    /**
     * Контекст кастомных полей, в отличие от
     * payload доступен к change detection
     */
    context?: Record<string, any>;
    /**
     * Эмиттер для запроса данных
     */
    reloadSubject?: TSubject<void>;
    /**
     * Генерирует плейсхолдеры согласно схеме полей целевого объекта
     */
    withNamedPlaceholders?: boolean;
    /**
     * Эмиттер для перезаписи данных. Вызывает change(data, true)
     */
    changeSubject?: TSubject<Data>;
    /**
     * Эмиттер для изменения данных. Вызывает change(data, false)
     */
    updateSubject?: TSubject<Data>;
    /**
     * Фабрика для создания полей пользователя
     */
    createField?: (
      entity: IEntity<Data>,
      currentPath: string,
    ) => React.ReactElement;
    /**
     * Фабрика для создания компоновок пользователя
     */
    createLayout?: (
      entity: IEntity<Data>,
      children: React.ReactNode,
      currentPath: string,
    ) => React.ReactElement;
    /**
     * Класс корневой группы
     */
    className?: string;
    /**
     * Если флаг включен, показываем валидацию до фокусировки по полю
     */
    dirty?: boolean;
    /**
     * Список бизнес-функций, ограничивающий отображение полей
     */
    features?: string[];
    /**
     * Стиль корневой группы
     */
    style?: React.CSSProperties;
    /**
     * SX для корневой группы
     */
    sx?: SxProps<any>;
    /**
     * Позволяет загружать данные в компонент
     */
    handler?: OneHandler<Data, Payload>;
    /**
     * Объект, передающийся в пользовательские
     * поля через контекст
     */
    payload?: Payload | (() => Payload);
    /**
     * Вызывается при ошибке в handler
     */
    fallback?: (e: Error) => void;
    /**
     * Коллбек, вызываемый при не прохождении
     * валидации
     */
    invalidity?: (name: string, msg: string, payload: Payload) => void;
    /**
     * Вызываются при фокусировки по филду
     * в компоненте и потере фокуса
     */
    focus?: (
      name: string,
      data: Data,
      payload: Payload,
      onValueChange: (value: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
    blur?: (
      name: string,
      data: Data,
      payload: Payload,
      onValueChange: (value: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
    /**
     * Коллбек для управления контекстным меню
     */
    menu?: (
      name: string,
      action: string,
      data: Data,
      payload: Payload,
      onValueChange: (value: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
    /**
     * Коллбек для перехвата клика по полю
     */
    click?: (
      name: string,
      data: Data,
      payload: Payload,
      onValueChange: (value: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
    /**
     * Вызывается, когда все поля успели отрисоваться
     * в первый раз, после появления формы
     */
    ready?: () => void;
    /**
     * Вызывается после изменения и передает измененный
     * объект прикладному программисту
     */
    change?: (Data: Data, initial: boolean) => void;
    /**
     * Массив полей, выводимый в компоненте
     */
    fields: Field[];
    /**
     * Префикс для формирования ключей элементов
     */
    prefix?: string;
    /**
     * Коллбеки управления отображением
     * состоянием загрузки
     */
    loadStart?: (source: string) => void;
    loadEnd?: (isOk: boolean, source: string) => void;
    /**
     * Превращает FieldType.Paper в FieldType.Outline
     */
    outlinePaper?: boolean;
    transparentPaper?: boolean;
    /**
     * Отключает ввод данных
     */
    readonly?: boolean;
    /**
     * Слоты для полей ввода
     */
    slots?: Partial<ISlotFactoryContext>;
    /**
     * Debounce для FieldType.Text
     */
    fieldDebounce?: number;
  }
  export default IOneProps;
}

declare module "react-declarative/hooks/useActualCallback" {
  /**
   * Executes a given callback function while preserving its reference and memoizing it with specified dependencies.
   *
   * @template T - Type of the callback function
   * @param run - The callback function to be executed
   * @param [deps=[]] - The dependencies to be memoized
   * @returns - The memoized callback function
   */
  export const useActualCallback: <T extends (...args: any[]) => any>(
    run: T,
    deps?: any[],
  ) => T;
  export default useActualCallback;
}

declare module "react-declarative/hooks/useActualValue" {
  /**
   * Initializes a ref with the provided value and keeps it up to date.
   *
   * @template T - The type of the value.
   * @param value - The initial value.
   * @returns - A reference object that contains the provided value.
   */
  export const useActualValue: <T = undefined>(
    value: T,
  ) => import("react").MutableRefObject<T>;
  export default useActualValue;
}

declare module "react-declarative/hooks/useActualState" {
  /**
   * Returns an array of values representing the current state and a function to update the state.
   *
   * @template S - The type of the state.
   * @param [initialState] - Optional initial state.
   * @returns - An array containing the mutable reference to the state and the state update function
   *.
   */
  export const useActualState: <S = undefined>(
    initialState?: S | (() => S) | undefined,
  ) => readonly [
    import("react").MutableRefObject<S>,
    import("react").Dispatch<import("react").SetStateAction<S>>,
  ];
  export default useActualState;
}

declare module "react-declarative/hooks/useActualRef" {
  /**
   * Custom hook that creates a mutable reference to a state value
   * and a function to update the state value.
   *
   * @template S - The type of the state value
   * @param initialState - The initial state value or a function that returns the initial state value
   * @returns - An array containing the state reference and handleState function
   */
  export const useActualRef: <S = undefined>(
    initialState?: S | (() => S) | undefined,
  ) => readonly [
    import("react").MutableRefObject<S>,
    (dispatch: S | ((prevState: S) => S)) => void,
  ];
  export default useActualRef;
}

declare module "react-declarative/hooks/useRenderWaiter" {
  /**
   * Creates a render waiter hook.
   *
   * @param [deps] - Optional array of dependencies. When the dependencies change, the render waiter will trigger a re-render.
   * @param [delay=0] - Optional delay in milliseconds before triggering the render waiter.
   * @returns - Render waiter function that returns a promise that resolves when the render is complete.
   */
  export const useRenderWaiter: (
    deps?: any[] | undefined,
    delay?: number,
  ) => () => Promise<void>;
  export default useRenderWaiter;
}

declare module "react-declarative/hooks/useOneArray" {
  /**
   * Hook that manages an array of data.
   *
   * @template T - The type of elements in the array
   * @param [initialValue] - Optional initial value for the array
   * @returns - A tuple containing the managed array and a function to update it
   */
  export const useOneArray: <T = any>(
    initialValue?: T[] | (() => T[]) | null | undefined,
  ) => readonly [
    T[],
    import("react").Dispatch<import("react").SetStateAction<T[] | null>>,
  ];
  export const oneArrayIncludes: <T = any>(
    data: T[] | null,
    ...items: T[]
  ) => boolean;
  export const isOneArray: <T = any>(data: T[]) => boolean;
  export const toOneArray: <T = any>(data: T[]) => unknown[] | null;
  export default useOneArray;
}

declare module "react-declarative/hooks/useAsyncProgress" {
  import IAnything from "react-declarative/model/IAnything";
  interface IParams<Data extends IAnything, Result = void> {
    delay?: number;
    onBegin?: () => void;
    onEnd?: (isOk: boolean) => void;
    onFinish?: (
      data: Data[],
      errors: IError[],
      result: (Result | null)[],
    ) => void;
    onError?: (errors: IError[]) => void;
    onProgress?: (progress: number) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
  }
  interface IError {
    label: string;
    message: string;
    error: Error;
  }
  interface IProcess<Data extends IAnything> {
    label: string;
    data: Data;
  }
  /**
   * Executes a process asynchronously with progress tracking and error handling.
   *
   * @template Data - The type of data to be processed.
   * @template Result - The type of the process result.
   * @param process - The process function to be executed on each item.
   * @param options - Optional parameters for customizing the process behavior.
   * @param options.delay - The delay in milliseconds before each item processing. Default is 0.
   * @param options.onError - Callback function to be executed when an error occurs during processing. Default is an empty function.
   * @param options.onProgress - Callback function to be executed on each progress update. Default is an empty function.
   * @param options.onFinish - Callback function to be executed when all items are finished processing. Default is an empty function.
   * @param options.onBegin - Callback function to be executed when the process begins. Default is an empty function.
   * @param options.onEnd - Callback function to be executed when the process ends. Default is an empty function.
   * @returns An object containing the execute function, loading state, progress, and errors.
   *
   * @example
   * const items = [
   *   { label: 'Item 1', data: { id: 1 } },
   *   { label: 'Item 2', data: { id: 2 } },
   * ];
   *
   * const { execute, loading, progress, errors } = useAsyncProgress(
   *   async (item: IProcess<Data>) => {
   *     // Process the data here
   *   },
   *   {
   *     delay: 2000,
   *     onError: (error) => console.error(error),
   *     onProgress: (progress) => console.log(progress),
   *     onFinish: (data, errors, result) => console.log(data, errors, result),
   *     onBegin: () => console.log('Process started'),
   *     onEnd: (isOk) => console.log(`Process ended ${isOk ? 'successfully' : 'with errors'}`),
   *   }
   * );
   *
   * useEffect(() => {
   *   execute(items);
   * }, []);
   */
  export const useAsyncProgress: <Data extends unknown = any, Result = void>(
    process: (item: IProcess<Data>) => Result | Promise<Result>,
    {
      delay,
      onError,
      onProgress,
      onFinish,
      onBegin,
      onEnd,
      ...otherParams
    }: IParams<Data, Result>,
  ) => {
    readonly errors: IError[];
    readonly progress: number;
    readonly execute: (items: IProcess<Data>[]) => void;
    readonly loading: boolean;
  };
  export default useAsyncProgress;
}

declare module "react-declarative/hooks/useAsyncAction" {
  interface IParams {
    fallback?: (e: Error) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
  }
  export interface IResult<
    Data extends any = any,
    Payload extends any = object,
  > {
    loading: boolean;
    error: boolean;
    execute: (p?: Payload) => Promise<Data | null>;
  }
  /**
   * Executes an asynchronous action with options for handling loading, error, and cancellation.
   *
   * @template Data - The data type returned by the action.
   * @template Payload - The payload type passed to the action.
   * @param run - The action function to execute.
   * @param options - Optional parameters for customizing behavior.
   * @param options.onLoadStart - A callback function to run when the action starts loading.
   * @param options.onLoadEnd - A callback function to run when the action finishes loading.
   * @param options.fallback - A callback function to handle errors when throwError is set to false.
   * @param options.throwError - Whether to throw an error when the action fails.
   * @returns - An object containing loading, error, and execute properties.
   */
  export const useAsyncAction: <
    Data extends unknown = any,
    Payload extends unknown = any,
  >(
    run: (p: Payload) => Data | Promise<Data>,
    { onLoadStart, onLoadEnd, fallback, throwError }?: IParams,
  ) => IResult<Data, Payload>;
  export default useAsyncAction;
}

declare module "react-declarative/hooks/useAsyncValue" {
  import { IResult } from "react-declarative/hooks/useAsyncAction";
  interface IParams {
    fallback?: (e: Error) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
    deps?: any[];
  }
  /**
   * This function allows you to manage an asynchronous value by providing a run function and optional parameters.
   *
   * @template Data - The data type of the async value.
   * @param run - A function that returns the async value or a promise that resolves to the async value.
   * @param [params={}] - Optional parameters for customizing the behavior of the async value.
   * @returns - An array containing the current async value, action object for executing the async action, and a setter function
   * to update the async value.
   */
  export const useAsyncValue: <Data extends unknown = any>(
    run: () => Data | Promise<Data>,
    params?: IParams,
  ) => [Data | null, IResult<void, void>, (data: Data) => void];
  export default useAsyncValue;
}

declare module "react-declarative/hooks/useSinglerunAction" {
  interface IParams {
    fallback?: (e: Error) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
  }
  interface IResult<Data extends any = any, Payload extends any = object> {
    loading: boolean;
    error: boolean;
    execute: IExecute<Data, Payload>;
  }
  export interface IExecute<
    Data extends any = any,
    Payload extends any = object,
  > {
    (payload?: Payload): Promise<Data | null>;
    clear(): void;
  }
  /**
   * Function useSinglerunAction
   *
   * @description This function is a custom hook that helps to handle asynchronous actions and manage loading and error states.
   *
   * @template Data - The type of data that the asynchronous action will return.
   * @template Payload - The type of payload that the asynchronous action accepts.
   *
   * @param run - The asynchronous action to be executed.
   * @param options - Additional options for the hook.
   * @param [options.onLoadStart] - Callback function called when the asynchronous action starts.
   * @param [options.onLoadEnd] - Callback function called when the asynchronous action ends.
   * @param [options.fallback] - Callback function called when an error occurs, if `throwError` is set to `false`.
   * @param [options.throwError] - Flag to determine whether to throw an error or call the `fallback` function when an error occurs. Default is `true`.
   *
   * @returns - An object containing the loading state, error state, and an `execute` function to execute the asynchronous action.
   */
  export const useSinglerunAction: <
    Data extends unknown = any,
    Payload extends unknown = any,
  >(
    run: (p: Payload) => Data | Promise<Data>,
    { onLoadStart, onLoadEnd, fallback, throwError }?: IParams,
  ) => IResult<Data, Payload>;
  export default useSinglerunAction;
}

declare module "react-declarative/hooks/useQueuedAction" {
  import { CANCELED_SYMBOL } from "react-declarative/utils/hof/queued";
  interface IParams {
    fallback?: (e: Error) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
  }
  export interface IResult<
    Data extends any = any,
    Payload extends any = object,
  > {
    loading: boolean;
    error: boolean;
    execute: IExecute<Data, Payload>;
  }
  export interface IExecute<
    Data extends any = any,
    Payload extends any = object,
  > {
    (payload?: Payload): Promise<Data | null>;
    clear(): void;
    cancel(): void;
  }
  /**
   * Executes an asynchronous action with queuing and provides loading and error state.
   *
   * @template Data - The type of data returned by the action.
   * @template Payload - The type of payload accepted by the action.
   *
   * @param run - The function that represents the action to be executed.
   * @param options - Optional parameters for configuring the behavior of the action execution.
   * @param options.onLoadStart - Callback function to be executed when the action starts loading.
   * @param options.onLoadEnd - Callback function to be executed when the action finishes loading.
   * @param options.fallback - Callback function to be executed when an error occurs and `throwError` is set to `false`.
   * @param options.throwError - Specifies whether to throw an error if one occurs during the action execution.
   *
   * @returns - The result object containing the loading state, error state, and the execute function to trigger the action execution.
   */
  export const useQueuedAction: <
    Data extends unknown = any,
    Payload extends unknown = any,
  >(
    run: (p: Payload) => Data | Promise<Data>,
    { onLoadStart, onLoadEnd, fallback, throwError }?: IParams,
  ) => IResult<Data, Payload>;
  export { CANCELED_SYMBOL };
  export default useQueuedAction;
}

declare module "react-declarative/hooks/useMediaContext" {
  /**
   * Returns an object containing information about the current media context.
   *
   * @return The media context object.
   * @property isPhone - Indicates whether the current device is a phone.
   * @property isTablet - Indicates whether the current device is a tablet.
   * @property isDesktop - Indicates whether the current device is a desktop.
   * @property isWide - Indicates whether the current device is a tablet or desktop.
   * @property isMobile - Indicates whether the current device is a phone.
   */
  export const useMediaContext: () => {
    isPhone: boolean;
    isTablet: boolean;
    isDesktop: boolean;
    isWide: boolean;
    isMobile: boolean;
  };
  export default useMediaContext;
}

declare module "react-declarative/hooks/useAudioPlayer" {
  import * as React from "react";
  interface IParams {
    src: string;
  }
  /**
   * Creates an audio player that can be used to play audio files.
   *
   * @param params - The parameters for the audio player.
   * @returns An object with properties and functions for controlling the audio player.
   */
  export const useAudioPlayer: ({ src }: IParams) => {
    audioRef: React.RefObject<HTMLAudioElement>;
    render: () => JSX.Element;
    play: () => void;
  };
  export default useAudioPlayer;
}

declare module "react-declarative/hooks/useChangeSubject" {
  import Subject from "react-declarative/utils/rx/Subject";
  /**
   * Creates a subject that emits the given value whenever it changes.
   *
   * @template T - The type of the value to be emitted by the subject.
   *
   * @param value - The initial value of the subject.
   *
   * @returns - The subject that emits the value whenever it changes.
   */
  export const useChangeSubject: <T = undefined>(value: T) => Subject<T>;
  export default useChangeSubject;
}

declare module "react-declarative/hooks/useReloadTrigger" {
  /**
   * Hook for setting up a reload trigger.
   *
   * @param autoReload - The interval for automatic reload triggering in milliseconds. Default is 0 (disabled).
   * @returns - Object containing the reload trigger value and the reload function.
   */
  export const useReloadTrigger: (autoReload?: number) => {
    reloadTrigger: string;
    doReload: () => void;
  };
  export default useReloadTrigger;
}

declare module "react-declarative/hooks/useSingleton" {
  /**
   * Returns a singleton instance of a given value or a function that creates the value.
   *
   * @template T - The type of the value to be returned.
   * @param value - The value or function that creates the value.
   * @returns The singleton instance of the value.
   */
  export const useSingleton: <T = undefined>(value: T | (() => T)) => T;
  export default useSingleton;
}

declare module "react-declarative/hooks/useBehaviorSubject" {
  import BehaviorSubject from "react-declarative/utils/rx/BehaviorSubject";
  /**
   * Initializes a new BehaviorSubject with optional initial data value.
   *
   * @template Data The type of data stored in the BehaviorSubject.
   * @param [data=null] The initial value of the BehaviorSubject. Defaults to null.
   * @returns The newly created BehaviorSubject instance.
   */
  export const useBehaviorSubject: <Data = any>(
    data?: Data | null,
  ) => BehaviorSubject<Data>;
  export default useBehaviorSubject;
}

declare module "react-declarative/hooks/useSubscription" {
  /**
   * Subscribes to a function and triggers it as a side effect.
   *
   * @param fn - The function to be subscribed to.
   */
  export const useSubscription: (fn: () => () => void) => void;
  export default useSubscription;
}

declare module "react-declarative/hooks/useSubjectValue" {
  import { TSubject } from "react-declarative/utils/rx/Subject";
  /**
   * A function that retrieves and sets the value of a subject.
   *
   * @template Data - The type of data stored in the subject.
   * @param target - The subject to subscribe to.
   * @param [value] - The initial value for the subject, if not provided the subject's initial value will be used.
   * @returns - The current value of the subject.
   */
  export const useSubjectValue: <Data = any>(
    target: TSubject<Data>,
    value?: Data | (() => Data) | undefined,
  ) => Data;
  export default useSubjectValue;
}

declare module "react-declarative/hooks/useElementSize" {
  interface ISize {
    height: number;
    width: number;
  }
  interface IParams<Size extends ISize> {
    defaultSize?: ISize;
    target?: HTMLElement | null;
    closest?: string;
    selector?: string;
    debounce?: number;
    compute?: (size: ISize) => Size;
    onResize?: (size: Size) => void;
  }
  /**
   * Calculates the size of an HTML element and updates it when it changes.
   *
   * @template T - The type of the HTML element.
   * @template Size - The interface defining the size object type.
   *
   * @typedef  ISize - The interface defining the size object type.
   *
   * @typedef IParams - The interface defining the optional parameters for the useElementSize function.
   * @property defaultSize - The default size of the element.
   * @property target - The target element to calculate the size for. If not provided, the component's element will be used.
   * @property closest - The selector for the closest ancestor element.
   * @property selector - The selector for a specific descendant element.
   * @property debounce - The debounce delay in milliseconds for resizing events. Defaults to 0 (no debounce).
   * @property compute - A function to compute the size object based on the raw size object. Defaults to a simple type casting.
   * @property onResize - A callback function called when the element size changes.
   *
   * @param options - The optional parameters for the useElementSize function.
   * @returns - An object containing a ref to the element and the current size.
   */
  export const useElementSize: <
    T extends HTMLElement,
    Size extends ISize = ISize,
  >({
    defaultSize: { height, width },
    target,
    closest,
    selector,
    debounce: delay,
    compute,
    onResize,
  }?: Partial<IParams<Size>>) => {
    elementRef: import("react").RefObject<T>;
    size: Size;
  };
  export default useElementSize;
}

declare module "react-declarative/hooks/useWindowSize" {
  import ISize from "react-declarative/model/ISize";
  interface IParams<Size extends ISize> {
    debounce: number;
    compute: (size: ISize) => Size;
    onResize?: (size: Size) => void;
  }
  /**
   * Returns the size of the window.
   * @template Size - The type of the size object.
   * @param [options] - Optional configuration options.
   * @param [options.debounce] - The delay in milliseconds for debouncing the resize event. Default is `RESIZE_DEBOUNCE`.
   * @param [options.compute] - A function that computes the size object from the window size. Default is `(size) => size as Size`.
   * @param [options.onResize] - A callback function to be called when the window size changes.
   * @returns The size of the window.
   */
  export const useWindowSize: <Size extends ISize = ISize>({
    debounce: delay,
    compute,
    onResize,
  }?: Partial<IParams<Size>>) => Size;
  export default useWindowSize;
}

declare module "react-declarative/hooks/useSubject" {
  import Subject, { TSubject } from "react-declarative/utils/rx/Subject";
  /**
   * Creates and returns a subject that can be subscribed to.
   *
   * @template Data - The data type of the subject.
   * @param target - An optional target subject to subscribe to.
   * @returns - The created subject.
   */
  export const useSubject: <Data = any>(
    target?: TSubject<Data> | null | undefined,
  ) => Subject<Data>;
  export default useSubject;
}

declare module "react-declarative/hooks/useChange" {
  /**
   * Hook for managing the execution of an effect based on changes in dependencies.
   *
   * @param effect - The effect to be executed.
   * @param [deps=[]] - The dependencies to watch for changes.
   * @param [stopWatchByDefault=false] - Whether to initially stop watching for changes.
   * @returns - An object containing utility functions for managing the watcher.
   */
  export const useChange: (
    effect: React.EffectCallback,
    deps?: import("react").DependencyList,
    stopWatchByDefault?: boolean,
  ) => {
    resetWatcher: () => void;
    beginWatch: () => void;
    stopWatch: () => void;
  };
  export default useChange;
}

declare module "react-declarative/components" {
  export * from "react-declarative/components/One";
  export * from "react-declarative/components/OneIcon";
  export * from "react-declarative/components/OneButton";
  export * from "react-declarative/components/Dot";
  export * from "react-declarative/components/List";
  export * from "react-declarative/components/NoSsr";
  export * from "react-declarative/components/Switch";
  export * from "react-declarative/components/Center";
  export * from "react-declarative/components/Square";
  export * from "react-declarative/components/Scaffold";
  export * from "react-declarative/components/Scaffold2";
  export * from "react-declarative/components/Translate";
  export * from "react-declarative/components/Breadcrumbs";
  export * from "react-declarative/components/Breadcrumbs2";
  export * from "react-declarative/components/ErrorBoundary";
  export * from "react-declarative/components/ColorButton";
  export * from "react-declarative/components/ActionMenu";
  export * from "react-declarative/components/ActionButton";
  export * from "react-declarative/components/ActionStopIcon";
  export * from "react-declarative/components/ActionFab";
  export * from "react-declarative/components/ActionFilter";
  export * from "react-declarative/components/ActionTrigger";
  export * from "react-declarative/components/ActionIcon";
  export * from "react-declarative/components/ActionToggle";
  export * from "react-declarative/components/ActionModal";
  export * from "react-declarative/components/SearchModal";
  export * from "react-declarative/components/SearchView";
  export * from "react-declarative/components/SizeProvider";
  export * from "react-declarative/components/ModalProvider";
  export * from "react-declarative/components/SnackProvider";
  export * from "react-declarative/components/ConstraintView";
  export * from "react-declarative/components/ScrollTopView";
  export * from "react-declarative/components/OutletView";
  export * from "react-declarative/components/AlertView";
  export * from "react-declarative/components/PaperView";
  export * from "react-declarative/components/DragDropView";
  export * from "react-declarative/components/FilesView";
  export * from "react-declarative/components/ScrollView";
  export * from "react-declarative/components/ScaleView";
  export * from "react-declarative/components/AutoSizer";
  export * from "react-declarative/components/FadeView";
  export * from "react-declarative/components/TabsView";
  export * from "react-declarative/components/FetchView";
  export * from "react-declarative/components/WaitView";
  export * from "react-declarative/components/PingView";
  export * from "react-declarative/components/HtmlView";
  export * from "react-declarative/components/OfflineView";
  export * from "react-declarative/components/RevealView";
  export * from "react-declarative/components/SecretView";
  export * from "react-declarative/components/VisibilityView";
  export * from "react-declarative/components/WizardView";
  export * from "react-declarative/components/PortalView";
  export * from "react-declarative/components/RecordView";
  export * from "react-declarative/components/ErrorView";
  export * from "react-declarative/components/AuthView";
  export * from "react-declarative/components/CardView";
  export * from "react-declarative/components/KanbanView";
  export * from "react-declarative/components/ReloadView";
  export * from "react-declarative/components/InfiniteView";
  export * from "react-declarative/components/VirtualView";
  export * from "react-declarative/components/LoaderView";
  export * from "react-declarative/components/FeatureView";
  export * from "react-declarative/components/CalendarView";
  export * from "react-declarative/components/DocumentView";
  export * from "react-declarative/components/ImageView";
  export * from "react-declarative/components/TreeView";
  export * from "react-declarative/components/GridView";
  export * from "react-declarative/components/Grid";
  export * from "react-declarative/components/Tile";
  export * from "react-declarative/components/Spinner";
  export * from "react-declarative/components/Async";
  export * from "react-declarative/components/Copy";
  export * from "react-declarative/components/If";
  export * from "react-declarative/components/CopyButton";
  export * from "react-declarative/components/SubjectBinding";
  export * from "react-declarative/components/Countdown";
  export * from "react-declarative/components/Chip";
  export * from "react-declarative/components/ScrollAdjust";
  export * from "react-declarative/components/MasterDetail";
}

declare module "react-declarative/hooks/useModel" {
  import Model, { IModelAdapter } from "react-declarative/utils/mvvm/Model";
  import Subject from "react-declarative/utils/rx/Subject";
  export interface IParams<T extends {} = any> {
    initialValue: T | Model<T> | (() => T);
    onChange?: (item: ModelAdapter<T>) => void;
    debounce?: number;
  }
  export class ModelAdapter<T extends {} = any> implements IModelAdapter<T> {
    constructor(
      _model$: React.MutableRefObject<Model<T>>,
      _dispose: Subject<true>,
    );
    get data(): T;
    setData: (
      data: Partial<T> | ((prevData: T) => Partial<T>),
    ) => Promise<void>;
    refresh: () => Promise<void>;
    toObject: () => T;
    toModel: () => Model<T>;
  }
  /**
   * Custom hook that creates and manages a model object for a given value.
   *
   * @template T - The type of the initial value and model data.
   * @param params - The parameters for the useModel hook.
   * @param params.initialValue - The initial value for the model.
   * @param [params.onChange=() => null] - The function to be called whenever the model value changes.
   * @param [params.debounce=CHANGE_DEBOUNCE] - The debounce value for handling model value changes.
   * @returns - The model adapter object.
   */
  export const useModel: <T extends {} = any>({
    initialValue,
    onChange,
    debounce,
  }: IParams<T>) => ModelAdapter<T>;
  export default useModel;
}

declare module "react-declarative/hooks/useEntity" {
  import Entity, {
    IEntity,
    IEntityAdapter,
  } from "react-declarative/utils/mvvm/Entity";
  import Subject from "react-declarative/utils/rx/Subject";
  export interface IParams<T extends IEntity = any> {
    initialValue: T | Entity<T> | (() => T);
    onChange?: (item: EntityAdapter<T>) => void;
    debounce?: number;
  }
  export class EntityAdapter<T extends IEntity = any>
    implements IEntityAdapter<T>
  {
    constructor(
      _entity$: React.MutableRefObject<Entity<T>>,
      _dispose: Subject<true>,
    );
    get data(): T;
    get id(): string | number;
    setData: (
      data: Partial<T> | ((prevData: T) => Partial<T>),
    ) => Promise<void>;
    refresh: () => Promise<void>;
    toObject: () => T;
    toEntity: () => Entity<T>;
  }
  /**
   * Creates a hook that manages an entity state.
   *
   * @template T - The type of the entity.
   * @param params - The parameters to configure the hook.
   * @param params.initialValue - The initial value of the entity.
   * @param [params.onChange=() => null] - The callback function to execute when the entity changes.
   * @param [params.debounce=CHANGE_DEBOUNCE] - The debounce delay in milliseconds.
   * @returns - The entity adapter object.
   */
  export const useEntity: <T extends IEntity = any>({
    initialValue,
    onChange,
    debounce,
  }: IParams<T>) => EntityAdapter<T>;
  export default useEntity;
}

declare module "react-declarative/hooks/useListEditor" {
  import React from "react";
  type RowId = number;
  /**
   * Creates a list editor that allows adding, updating, and removing items.
   *
   * @template Data - The type of data for each item in the list.
   * @param renderItem - The function that renders each item in the list.
   * @param options - The options for the list editor.
   * @param [options.initialValue=[]] - The initial list of items.
   * @param [options.onChange] - The callback function called when the list of items changes.
   * @returns An object with the following properties and methods:
   *   - onAddItem: a function that adds a new item to the list.
   *   - onUpdateItem: a function that updates an item in the list.
   *   - onRemoveItem: a function that removes an item from the list.
   *   - items: an array of the current items in the list.
   *   - render: a function that renders the list of items.
   */
  export const useListEditor: <Data extends unknown = undefined>(
    renderItem: (id: RowId, item: Data) => React.ReactElement,
    {
      initialValue,
      onChange,
    }: {
      initialValue?: Data[] | undefined;
      onChange?: ((items: Data[]) => void) | undefined;
    },
  ) => {
    onAddItem: (data: Data) => number;
    onUpdateItem: (id: RowId, data: Data) => void;
    onRemoveItem: (id: RowId) => void;
    items: Data[];
    render: () => JSX.Element;
  };
  export default useListEditor;
}

declare module "react-declarative/hooks/useMediaStreamBuilder" {
  interface IParams {
    fallback?: (e: Error) => void;
    onChange?: (
      stream: MediaStream,
      ids: {
        audioCaptureId: string;
        cameraCaptureId: string;
        screenCaptureId: string;
      },
    ) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
    compressFrame?: number;
    maxFps?: number;
    withInitialVideo?: boolean;
    withInitialAudio?: boolean;
  }
  /**
   * Creates a media stream builder that provides functionality to capture audio, video, and screen using the WebRTC API.
   * @param [params] - The parameters for the media stream builder.
   * @param [params.fallback] - The fallback function to be called when an error occurs during capture. It receives an Error object as its argument.
   * @param [params.onLoadStart] - The callback function to be called when the capture starts.
   * @param [params.onLoadEnd] - The callback function to be called when the capture ends.
   * @param [params.onChange] - The callback function to be called when the media stream changes. It receives the media stream and an object with the current capture IDs as
   * arguments.
   * @param [params.throwError=false] - Determines whether to throw an error when an error occurs during capture instead of using the fallback function.
   * @param [params.withInitialVideo=false] - Determines whether to capture video when the media stream builder is initialized.
   * @param [params.withInitialAudio=false] - Determines whether to capture audio when the media stream builder is initialized.
   * @param [params.compressFrame=COMPRESS_FRAME] - The factor to compress the video frame by. (COMPRESS_FRAME is a constant value)
   * @param [params.maxFps=MAX_FPS] - The maximum frame rate of the video capture. (MAX_FPS is a constant value)
   * @returns The media stream builder.
   * @property mediaStream - The media stream that contains the captured audio and video tracks.
   * @property hasAudioCapture - Determines whether audio capture is currently active.
   * @property hasCameraCapture - Determines whether camera capture is currently active.
   * @property hasScreenCapture - Determines whether screen capture is currently active.
   * @property requestScreenCapture - Function to request screen capture.
   * @property requestCameraCapture - Function to request camera capture.
   * @property requestAudioCapture - Function to request audio capture.
   * @property stopScreenCapture - Function to stop screen capture.
   * @property stopCameraCapture - Function to stop camera capture.
   * @property stopAudioCapture - Function to stop audio capture.
   */
  export const useMediaStreamBuilder: ({
    fallback,
    onLoadStart,
    onLoadEnd,
    onChange,
    throwError,
    withInitialVideo,
    withInitialAudio,
    compressFrame,
    maxFps,
  }?: IParams) => {
    mediaStream: MediaStream;
    hasAudioCapture: boolean;
    hasCameraCapture: boolean;
    hasScreenCapture: boolean;
    requestScreenCapture: () => Promise<void>;
    requestCameraCapture: () => Promise<void>;
    requestAudioCapture: () => Promise<void>;
    stopScreenCapture: () => void;
    stopCameraCapture: () => void;
    stopAudioCapture: () => void;
  };
  export default useMediaStreamBuilder;
}

declare module "react-declarative/hooks/useCollection" {
  import Subject from "react-declarative/utils/rx/Subject";
  import Collection, {
    ICollectionAdapter,
  } from "react-declarative/utils/mvvm/Collection";
  import Entity, {
    IEntity,
    IEntityAdapter,
  } from "react-declarative/utils/mvvm/Entity";
  export interface IParams<T extends IEntity = any> {
    initialValue?: T[] | (() => T[]) | Entity<T>[] | Collection<T>;
    onChange?: (
      item: CollectionAdapter<T>,
      target: CollectionEntityAdapter<T> | null,
    ) => void;
    debounce?: number;
  }
  export class CollectionEntityAdapter<T extends IEntity = any>
    implements IEntityAdapter<T>
  {
    readonly id: IEntity["id"];
    constructor(
      id: IEntity["id"],
      _collection$: React.MutableRefObject<Collection<T>>,
      _dispose: Subject<true>,
    );
    get data(): T;
    setData: (
      data: Partial<T> | ((prevData: T) => Partial<T>),
    ) => Promise<void>;
    refresh: () => Promise<void>;
    toObject: () => T;
    toEntity: () => Entity<T>;
  }
  export class CollectionAdapter<T extends IEntity = any>
    implements ICollectionAdapter<T>
  {
    constructor(
      _collection$: React.MutableRefObject<Collection<T>>,
      _dispose: Subject<true>,
    );
    get ids(): (string | number)[];
    get lastIdx(): number;
    get items(): CollectionEntityAdapter<T>[];
    get isEmpty(): boolean;
    setData: (items: T[]) => Promise<void>;
    refresh: () => Promise<void>;
    clear: () => Promise<void>;
    push: (...items: T[] | T[][]) => Promise<void>;
    upsert: (...items: T[] | T[][]) => Promise<void>;
    remove: (entity: IEntity) => Promise<void>;
    removeById: (id: string | number) => Promise<void>;
    removeAll: () => Promise<void>;
    findById: (id: string | number) => CollectionEntityAdapter<T>;
    some: (
      fn: (value: CollectionEntityAdapter<T>, idx: number) => boolean,
    ) => boolean;
    forEach: (
      fn: (value: CollectionEntityAdapter<T>, idx: number) => void,
    ) => void;
    find: (
      fn: (value: CollectionEntityAdapter<T>, idx: number) => boolean,
    ) => CollectionEntityAdapter<T> | undefined;
    filter: (
      fn: (value: CollectionEntityAdapter<T>, idx: number) => boolean,
    ) => CollectionEntityAdapter<T>[];
    map: <V extends unknown = any>(
      fn: (value: CollectionEntityAdapter<T>, idx: number) => V,
    ) => V[];
    toArray: () => T[];
    toCollection: () => Collection<T>;
  }
  /**
   * A custom hook that provides a collection management functionality.
   *
   * @template T - The type of entities in the collection.
   * @param [initialValue=[]] - The initial value of the collection.
   * @param [onChange=() => null] - A callback function to execute when the collection changes.
   * @param [debounce=CHANGE_DEBOUNCE] - The debounce duration in milliseconds for the collection changes.
   * @returns - A memoized instance of the CollectionAdapter class.
   */
  export const useCollection: <T extends IEntity = any>({
    initialValue,
    onChange,
    debounce,
  }?: IParams<T>) => CollectionAdapter<T>;
  export default useCollection;
}

declare module "react-declarative/hooks/useRequestSnackbar" {
  export interface IParams {
    noSnackOnOk?: boolean;
    message?: string;
    loading: boolean | null;
    error: string | null;
    delay?: number;
    onClose?: (isOk: boolean) => void;
  }
  /**
   * Represents a custom hook to display a snackbar with request feedback.
   *
   * @param options - The options for the snackbar.
   * @param options.message - The message to display in the snackbar. Default: "Client update successful".
   * @param options.noSnackOnOk - Whether to not display a snackbar when the request is successful. Default: false.
   * @param options.loading - Whether the request is still loading.
   * @param options.error - The error message, if any, to display in the snackbar.
   * @param options.delay - The duration for which the snackbar should be displayed. Default: AUTO_HIDE_DURATION.
   * @param options.onClose - The callback function to execute when the snackbar is closed. Default: () => undefined.
   *
   * @returns - The snackbar hook object.
   * @returns beginWatch - The function to start watching for changes in the loading and error states.
   * @returns resetWatcher - The function to reset the watch state.
   * @returns stopWatch - The function to stop watching for changes.
   * @returns render - The function to render the snackbar element.
   */
  export const useRequestSnackbar: ({
    message,
    noSnackOnOk,
    loading,
    error,
    delay,
    onClose,
  }: IParams) => {
    beginWatch: () => void;
    resetWatcher: () => void;
    stopWatch: () => void;
    render: () => JSX.Element;
  };
  export default useRequestSnackbar;
}

declare module "react-declarative/components/ModalProvider" {
  export * from "react-declarative/components/ModalProvider/ModalProvider";
  export { default } from "react-declarative/components/ModalProvider/ModalProvider";
}

declare module "react-declarative/components/SnackProvider" {
  export * from "react-declarative/components/SnackProvider/SnackProvider";
  export { default } from "react-declarative/components/SnackProvider/SnackProvider";
}

declare module "react-declarative/components/SizeProvider" {
  export * from "react-declarative/components/SizeProvider/SizeProvider";
  export { default } from "react-declarative/components/SizeProvider/SizeProvider";
}

declare module "react-declarative/components/ModalManager" {
  export * from "react-declarative/components/ModalManager/ModalManagerProvider";
  export * from "react-declarative/components/ModalManager/model/IModal";
  export * from "react-declarative/components/ModalManager/model/ModalRender";
  export { useModalManager } from "react-declarative/components/ModalManager/hooks/useModalManager";
  export { default } from "react-declarative/components/ModalManager/ModalManagerProvider";
}

declare module "react-declarative/hooks/useList" {
  import IColumn from "react-declarative/model/IColumn";
  import IRowData from "react-declarative/model/IRowData";
  import IAnything from "react-declarative/model/IAnything";
  import IListProps from "react-declarative/model/IListProps";
  import SelectionMode from "react-declarative/model/SelectionMode";
  import { IListPickerProps } from "react-declarative/components/common/ListPicker";
  type Fn<Data = IAnything> = (d: Data[] | null) => void;
  interface IParams<RowData extends IRowData = IAnything>
    extends Omit<
      IListPickerProps<RowData>,
      keyof {
        onChange: never;
        selectionMode: never;
        selectedRows: never;
        minHeight: never;
        minWidth: never;
        title: never;
        columns: never;
        open: never;
      }
    > {
    selectionMode?: SelectionMode.Single | SelectionMode.Multiple;
    selectedRows?: IListProps<RowData>["selectedRows"];
    columns: Omit<
      IColumn<RowData>,
      keyof {
        headerName: never;
        width: never;
      }
    >[];
    minHeight?: number;
    minWidth?: number;
    title?: string;
  }
  /**
   * Creates a ListPicker modal with default or custom configurations and returns a promise that resolves with the selected rows.
   *
   * @template RowData - The type of the row data.
   *
   * @param options - The options object.
   * @param options.handler - The handler function to be called when a row is selected.
   * @param options.columns - The columns to be displayed in the ListPicker.
   * @param options.rowActions - The actions to be displayed for each row in the ListPicker.
   * @param options.payload - The payload to be passed to the ListPicker component.
   * @param options.features - The features to be enabled in the ListPicker.
   * @param [options.selectionMode=SelectionMode.Single] - The selection mode for the ListPicker.
   * @param [options.title="Pick item"] - The title of the ListPicker modal.
   * @param [options.minWidth=425] - The minimum width of the ListPicker modal.
   * @param [options.minHeight=375] - The minimum height of the ListPicker modal.
   * @param [options.selectedRows] - The initially selected rows in the ListPicker.
   *
   * @returns - A function that creates and opens the ListPicker modal.
   *
   * @example
   * const listPicker = useList({
   *   handler: handleSelection,
   *   columns: [
   *     { label: 'Name', field: 'name' },
   *     { label: 'Age', field: 'age' }
   *   ],
   *   rowActions: [
   *     { label: 'Edit', action: editRow },
   *     { label: 'Delete', action: deleteRow }
   *   ],
   *   payload: { id: 123 },
   *   features: ['sorting', 'filtering'],
   *   selectionMode: SelectionMode.Multiple,
   *   title: 'Select items',
   *   minWidth: 500,
   *   minHeight: 400,
   *   selectedRows: [1, 2, 3]
   * });
   *
   * listPicker({
   *   title: 'Custom title',
   *   minHeight: 300
   * }).then((selectedRows) => {
   *   // Handle selected rows
   * });
   *
   * @example
   * const listPicker = useList({
   *   handler: handleSelection,
   *   columns: [],
   *   rowActions: [],
   *   payload: null,
   *   features: [],
   *   selectionMode: SelectionMode.Single,
   *   title: 'Pick an item',
   *   minWidth: 425,
   *   minHeight: 375,
   *   selectedRows: null
   * });
   *
   * const selectedRows = await listPicker().toPromise();
   */
  export const useList: <RowData extends IRowData = any>({
    handler,
    columns,
    rowActions,
    payload,
    features,
    selectionMode,
    title: titleDefault,
    minWidth: minWidthDefault,
    minHeight: minHeightDefault,
    selectedRows: selectedRowsDefault,
  }: IParams<RowData>) => ({
    title,
    minWidth,
    minHeight,
    selectedRows,
  }?: Partial<IParams<RowData>>) => {
    then: (onData: Fn) => void;
    toPromise: () => Promise<RowData[] | null>;
  };
  export default useList;
}

declare module "react-declarative/hooks/useFile" {
  interface IParams {
    accept?: string;
    onSelect?: (...files: File[]) => void;
  }
  /**
   * Represents and provides functionality for a file input element.
   */
  export const useFile: ({ accept, onSelect }: IParams) => {
    render: () => JSX.Element;
    open: () => void;
  };
  export default useFile;
}

declare module "react-declarative/hooks/useConfirm" {
  type Fn = (result: boolean) => void;
  interface IParams {
    title?: string;
    msg?: string;
    canCancel?: boolean;
  }
  /**
   * A hook that provides a confirm dialog functionality.
   *
   * @param params - The parameter object.
   * @param params.title - The default title of the confirm dialog.
   * @param params.msg - The default message of the confirm dialog.
   * @param params.canCancel - The default cancelability flag of the confirm dialog.
   *
   * @returns - A function that can be invoked to show the confirm dialog.
   */
  export const useConfirm: ({
    title: defaultTitle,
    msg: defaultMsg,
    canCancel: defaultCanCancel,
  }?: IParams) => ({ canCancel, title, msg }?: Partial<IParams>) => {
    then: (onData: Fn) => void;
    toPromise: () => Promise<boolean>;
  };
  export default useConfirm;
}

declare module "react-declarative/hooks/usePrompt" {
  type Fn = (result: string | null) => void;
  interface IParams {
    title?: string;
    value?: string;
    large?: boolean;
    placeholder?: string;
    canCancel?: boolean;
  }
  /**
   * A function that creates and displays a prompt modal.
   *
   * @param usePrompt - The configuration options for the prompt.
   * @param usePrompt.title - The title of the prompt modal.
   * @param usePrompt.value - The default value of the prompt input.
   * @param usePrompt.placeholder - The placeholder text for the prompt input.
   * @param usePrompt.canCancel - Whether the prompt can be cancelled.
   * @param usePrompt.large - Whether to display a large prompt modal.
   * @returns A function that creates and displays the prompt modal when called.
   */
  export const usePrompt: ({
    title: defaultTitle,
    value: defaultValue,
    placeholder: defaultPlaceholder,
    canCancel: defaultCanCancel,
    large,
  }?: IParams) => ({
    canCancel,
    title,
    placeholder,
    value,
  }?: Partial<IParams>) => {
    then: (onData: Fn) => void;
    toPromise: () => Promise<string | null>;
  };
  export default usePrompt;
}

declare module "react-declarative/hooks/useAlert" {
  type Fn = () => void;
  interface IParams {
    title?: string;
    description?: string;
    large?: boolean;
  }
  /**
   * Function for displaying an alert modal.
   * @param params - The alert parameters.
   * @param params.title - The title of the alert. Default is "Alert".
   * @param params.description - The description of the alert. Default is an empty string.
   * @param params.large - Whether to display a large alert. Default is false.
   * @returns - A function that, when called, displays the alert and returns a Promise.
   *                      The Promise resolves when the alert is closed.
   *
   * @example
   * const alert = useAlert();
   * alert({ title: "My Alert", description: "This is my alert message" })
   *   .then(() => {
   *     console.log("Alert closed");
   *   })
   *   .catch((error) => {
   *     console.error("Error occurred: ", error);
   *   });
   */
  export const useAlert: ({
    title: defaultTitle,
    description: defaultDescription,
    large,
  }?: IParams) => ({ description, title }?: Partial<IParams>) => {
    then: (onData: Fn) => void;
    toPromise: () => Promise<void>;
  };
  export default useAlert;
}

declare module "react-declarative/hooks/useDate" {
  import dayjs from "dayjs";
  type Fn = (d: dayjs.Dayjs | null) => void;
  /**
   * useDate
   *
   * A custom hook that returns a function for using a modal with a DatePicker component.
   * The returned function can be used to display the modal and retrieve the selected date.
   *
   * @returns A function that can be called to display the modal and retrieve the selected date.
   *
   * @example
   * const dateGetter = useDate();
   * dateGetter().then((selectedDate) => {
   *   console.log(selectedDate);
   * });
   */
  export const useDate: () => () => {
    then: (onData: Fn) => void;
    toPromise: () => Promise<dayjs.Dayjs | null>;
  };
  export default useDate;
}

declare module "react-declarative/hooks/useTime" {
  import dayjs from "dayjs";
  type Fn = (d: dayjs.Dayjs | null) => void;
  /**
   * useTime is a custom hook/function that provides a time picker modal functionality.
   * It returns an object with methods to interact with the time picker.
   *
   * @returns - A function that returns an object with methods.
   */
  export const useTime: () => () => {
    then: (onData: Fn) => void;
    toPromise: () => Promise<dayjs.Dayjs | null>;
  };
  export default useTime;
}

declare module "react-declarative/hooks/useOne" {
  import IField from "react-declarative/model/IField";
  import IAnything from "react-declarative/model/IAnything";
  import TypedField from "react-declarative/model/TypedField";
  import IOneProps, { OneHandler } from "react-declarative/model/IOneProps";
  import IOnePublicProps from "react-declarative/model/IOnePublicProps";
  type Fn<Data = IAnything> = (d: Data | null) => void;
  interface IParams<
    Data extends IAnything = IAnything,
    Payload = IAnything,
    Field = IField<Data, Payload>,
  > {
    fields: Field[];
    title?: string;
    large?: boolean;
    handler?: OneHandler<Data, Payload>;
    payload?: IOneProps<Data, Payload, Field>["payload"];
    features?: IOnePublicProps<Data, Payload, Field>["features"];
    waitForChangesDelay?: number;
  }
  /**
   * Function useOne
   *
   * @template Data - The type of data.
   * @template Payload - The type of the payload.
   * @template Field - The type of the field.
   *
   * @param params - The parameters object.
   * @param params.fields - The fields array.
   * @param params.large - Indicates if the picker is large.
   * @param params.title - The default title.
   * @param params.handler - The default handler function.
   * @param params.payload - The default payload.
   * @param params.waitForChangesDelay - The delay for waiting changes.
   * @param params.features - The additional features.
   *
   * @returns - The function to open the picker.
   */
  export const useOne: <
    Data extends unknown = any,
    Payload = any,
    Field = IField<Data, Payload>,
  >({
    fields,
    large,
    title: defaultTitle,
    handler: defaultHandler,
    payload: defaultPayload,
    waitForChangesDelay,
    features,
  }: IParams<Data, Payload, Field>) => ({
    handler,
    payload,
    title,
  }?: Partial<IParams<Data, Payload, Field>>) => {
    then: (onData: Fn) => void;
    toPromise: () => Promise<Data | null>;
  };
  export const useOneTyped: <Data extends unknown = any, Payload = any>(
    params: IParams<Data, Payload, TypedField<Data, Payload>>,
  ) => ({
    handler,
    payload,
    title,
  }?: Partial<IParams<Data, Payload, TypedField<Data, Payload>>>) => {
    then: (onData: Fn) => void;
    toPromise: () => Promise<Data | null>;
  };
  export default useOne;
}

declare module "react-declarative/hooks/useSearchParams" {
  export type Value = string | number | boolean | null | undefined;
  /**
   * Returns an object representing the parsed search parameters from the current URL.
   * The object will have the specified default values, which can be a partial object or a function that returns a partial object.
   * The returned object will have the same properties as the default values, with values parsed from the URL search parameters.
   *
   * @template T - The type of the default values object.
   * @param [defaultValues={}] - The default values object or function. Defaults to an empty object.
   * @returns - The parsed search parameters object.
   */
  export const useSearchParams: <T = Record<string, Value>>(
    defaultValues?: Partial<T> | (() => Partial<T>),
  ) => T;
  export default useSearchParams;
}

declare module "react-declarative/hooks/useSearchState" {
  import { Value } from "react-declarative/hooks/useSearchParams";
  /**
   * Custom hook useSearchState for managing search state in the URL.
   *
   * @template T - Type of the search state object.
   * @param defaultValues - Default values for the search state object.
   * @returns - An array containing the search state object and a function to update the search state.
   */
  export const useSearchState: <T extends Record<string, Value>>(
    defaultValues?: Partial<T> | (() => Partial<T>),
  ) => readonly [
    T,
    import("react").Dispatch<import("react").SetStateAction<T>>,
  ];
  export default useSearchState;
}

declare module "react-declarative/model/IAnything" {
  export type IAnything = any;
  export default IAnything;
}

declare module "react-declarative/model/IRowData" {
  /**
   * Represents a data row in a table.
   * @interface
   */
  export interface IRowData {
    id: RowId;
  }
  export type RowId = string | number;
  export default IRowData;
}

declare module "react-declarative/components/CardView" {
  export * from "react-declarative/components/CardView/CardView";
  export * from "react-declarative/components/CardView/model/ICardViewAction";
  export * from "react-declarative/components/CardView/model/ICardViewOperation";
  export { IItemData as ICardViewItemData } from "react-declarative/components/CardView/model/IItemData";
  export { default } from "react-declarative/components/CardView/CardView";
}

declare module "react-declarative/components/CalendarView" {
  export * from "react-declarative/components/CalendarView/CalendarView";
  export * from "react-declarative/components/CalendarView/model/ICalendarItem";
  export * from "react-declarative/components/CalendarView/model/ICalendarRequest";
  export * from "react-declarative/components/CalendarView/model/ICalendarTile";
  export { default } from "react-declarative/components/CalendarView/CalendarView";
}

declare module "react-declarative/components/FeatureView" {
  export * from "react-declarative/components/FeatureView/FeatureView";
  export * from "react-declarative/components/FeatureView/hooks/useFeatureView";
  export * from "react-declarative/components/FeatureView/model/IFeature";
  export * from "react-declarative/components/FeatureView/model/IFeatureGroup";
  export * from "react-declarative/components/FeatureView/model/FeatureType";
  export { default } from "react-declarative/components/FeatureView/FeatureView";
}

declare module "react-declarative/components/VisibilityView" {
  export * from "react-declarative/components/VisibilityView/VisibilityView";
  export * from "react-declarative/components/VisibilityView/model/IVisibilityGroup";
  export * from "react-declarative/components/VisibilityView/hooks/useVisibilityView";
  export { default } from "react-declarative/components/VisibilityView/VisibilityView";
}

declare module "react-declarative/components/RecordView" {
  export * from "react-declarative/components/RecordView/RecordView";
  export { excelExport as recordToExcelExport } from "react-declarative/components/RecordView/helpers/excelExport";
  export { default } from "react-declarative/components/RecordView/RecordView";
}

declare module "react-declarative/components/Scaffold2" {
  export * from "react-declarative/components/Scaffold2/Scaffold2";
  export * from "react-declarative/components/Scaffold2/model/IScaffold2Action";
  export * from "react-declarative/components/Scaffold2/model/IScaffold2Group";
  export * from "react-declarative/components/Scaffold2/model/IScaffold2Option";
  export * from "react-declarative/components/Scaffold2/model/IScaffold2Tab";
  export { default } from "react-declarative/components/Scaffold2/Scaffold2";
}

declare module "react-declarative/components/Breadcrumbs2" {
  export * from "react-declarative/components/Breadcrumbs2/Breadcrumbs2";
  export * from "react-declarative/components/Breadcrumbs2/model/Breadcrumbs2Type";
  export * from "react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Action";
  export * from "react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Option";
  export { default } from "react-declarative/components/Breadcrumbs2/Breadcrumbs2";
}

declare module "react-declarative/model/IOnePublicProps" {
  import IAnything from "react-declarative/model/IAnything";
  import IField, { Value } from "react-declarative/model/IField";
  import IOneProps from "react-declarative/model/IOneProps";
  /**
   * Represents the interface for the public properties of the class IOnePublicProps.
   *
   * @template Data - The type of data.
   * @template Payload - The type of payload.
   * @template Field - The type of field.
   *
   * @interface IOnePublicProps
   * @extends Omit<IOneProps<Data, Payload, Field>, keyof { features: never }>
   */
  export interface IOnePublicProps<
    Data = IAnything,
    Payload = IAnything,
    Field = IField<Data>,
  > extends Omit<
      IOneProps<Data, Payload, Field>,
      keyof {
        features: never;
      }
    > {
    onFocus?: IOneProps<Data, Payload, Field>["focus"];
    onBlur?: IOneProps<Data, Payload, Field>["blur"];
    onMenu?: IOneProps<Data, Payload, Field>["menu"];
    onReady?: IOneProps<Data, Payload, Field>["ready"];
    onChange?: IOneProps<Data, Payload, Field>["change"];
    onClick?: IOneProps<Data, Payload, Field>["click"];
    onInvalid?: IOneProps<Data, Payload, Field>["invalidity"];
    onLoadStart?: IOneProps<Data, Payload, Field>["loadStart"];
    onLoadEnd?: IOneProps<Data, Payload, Field>["loadEnd"];
    features?:
      | Record<string, Value>
      | string[]
      | (() => string[] | Record<string, Value>);
  }
  export default IOnePublicProps;
}

declare module "react-declarative/model/History" {
  import { BrowserHistory, HashHistory, MemoryHistory } from "history";
  /**
   * Represents a history object used for navigation.
   * @typedef {(MemoryHistory | BrowserHistory | HashHistory)} History
   */
  export type History = MemoryHistory | BrowserHistory | HashHistory;
  export default History;
}

declare module "react-declarative/components/One/components/common/VirtualListBox" {
  import * as React from "react";
  interface IVirtualListBoxProps extends React.HTMLAttributes<HTMLElement> {
    children?: React.ReactNode;
  }
  /**
   * A virtual list box component that renders a list of items in a virtualized manner.
   *
   * @component
   *
   * @param props - The props object.
   * @param props.className - The class name to apply to the list box container.
   * @param props.children - The children to render within the list box.
   * @param props.role - The role attribute value for the list box container.
   * @param ref - The ref object for accessing the underlying HTMLDivElement.
   *
   * @returns {React.ReactElement} The rendered list box component.
   */
  export const VirtualListBox: React.ForwardRefExoticComponent<
    IVirtualListBoxProps & React.RefAttributes<HTMLDivElement>
  >;
  export default VirtualListBox;
}

declare module "react-declarative/utils/list2grid" {
  import { IGridColumn } from "react-declarative/components/Grid";
  import IColumn from "react-declarative/model/IColumn";
  /**
   * Converts a list of columns and a payload into a grid configuration.
   *
   * @param columns - The list of columns.
   * @param payload - The payload data used for formatting.
   * @returns - The grid configuration.
   */
  export const list2grid: (
    columns: IColumn[],
    payload: Record<string, any>,
  ) => IGridColumn[];
  export default list2grid;
}

declare module "react-declarative/utils/openBlank" {
  /**
   * Opens the given URL in a new browser tab.
   *
   * @param url - The URL to open in a new tab.
   *
   * @returns
   */
  export const openBlank: {
    (url: string): void;
    override(ref: (url: string) => void): void;
  };
  export default openBlank;
}

declare module "react-declarative/utils/createDict" {
  type Dict = Record<string, any>;
  /**
   * Creates a dictionary object from the given record object.
   *
   * @template T - The type of the dictionary object.
   * @param record - The record object to create the dictionary from.
   * @returns - The frozen dictionary object.
   */
  export const createDict: <T extends Dict = Dict>(record: T) => any;
  export default createDict;
}

declare module "react-declarative/utils/copyToClipboard" {
  /**
   * Copies the given text to the clipboard.
   *
   * @param text - The text to be copied.
   * @returns - A promise that resolves to a boolean indicating whether the copy operation was successful.
   */
  export const copyToClipboard: {
    (text: string): Promise<boolean>;
    override(ref: (text: string) => void | Promise<void>): void;
  };
  export default copyToClipboard;
}

declare module "react-declarative/utils/downloadBlank" {
  /**
   * Downloads a file from the given URL with the specified name.
   * If overrideRef is defined, it will be invoked before initiating the download.
   * The file will be downloaded in a new browser tab or window.
   *
   * @param url - The URL of the file to download.
   * @param name - The name to be used for the downloaded file.
   * @returns
   */
  export const downloadBlank: {
    (url: string, name: string): void;
    override(ref: (url: string, name: string) => void): void;
  };
  export default downloadBlank;
}

declare module "react-declarative/utils/removeSubstring" {
  /**
   * Removes specified substrings from a given text.
   *
   * @param text - The input text to remove substrings from.
   * @param remove - One or more substrings to remove from the text.
   * @return - The modified text with the specified substrings removed.
   */
  export const removeSubstring: (text: string, ...remove: string[]) => string;
  export default removeSubstring;
}

declare module "react-declarative/utils/chooseFile" {
  /**
   * Opens a file chooser dialog and allows the user to select a file.
   *
   * @param [accept] - Optional file type filter. Can be a comma-separated list of MIME types or file extensions.
   * @returns A promise that resolves with the selected file or null if the selection was canceled.
   */
  export const chooseFile: (
    accept?: string | undefined,
  ) => Promise<File | null>;
  export default chooseFile;
}

declare module "react-declarative/utils/loadScript" {
  /**
   * Loads an external script dynamically.
   *
   * @param src - The source URL of the script to load.
   * @param [async=false] - Whether to load the script asynchronously.
   * @returns - A promise that resolves when the script is loaded successfully, or rejects when an error occurs.
   */
  export const loadScript: (src: string, async?: boolean) => Promise<void>;
  export default loadScript;
}

declare module "react-declarative/utils/reloadPage" {
  global {
    interface Location {
      reload(forceReload: boolean): void;
    }
  }
  /**
   * Reloads the current page.
   *
   * @returns A promise that resolves when the page has reloaded.
   */
  export const reloadPage: {
    (): Promise<void>;
    override(ref: () => void): void;
  };
  export default reloadPage;
}

declare module "react-declarative/utils/compareFulltext" {
  /**
   * Compares the full text in a given data object with a search term.
   *
   * @template T - The generic type for the data object.
   * @param data - The data object to compare.
   * @param search - The search term to compare against the data object.
   * @param keys - The keys in the data object to compare against.
   * @returns - Returns true if the full text in the data object contains the search term, false otherwise.
   */
  export const compareFulltext: <T extends Record<string, any>>(
    data: T,
    search: string,
    ...keys: string[]
  ) => boolean;
  export default compareFulltext;
}

declare module "react-declarative/utils/promiseState" {
  /**
   * Determines the state of a given promise.
   *
   * @param promise - The promise to check the state of.
   *
   * @returns - The state of the promise, which can be either 'sync' or 'async'.
   */
  export const promiseState: <T = any>(
    promise: T | Promise<T>,
  ) => "async" | "sync";
  export const promiseValue: <T = any>(promise: T | Promise<T>) => T | null;
  export default promiseState;
}

declare module "react-declarative/utils/chooseMultipleFiles" {
  /**
   * Creates a file chooser dialog that allows the user to select multiple files.
   *
   * @param accept - Optional MIME type filter for accepted file types.
   * @returns - A promise that resolves to an array of selected files
   * or null if the dialog was canceled.
   */
  export const chooseMultipleFiles: (
    accept?: string | undefined,
  ) => Promise<File[] | null>;
  export default chooseMultipleFiles;
}

declare module "react-declarative/utils/errorData" {
  /**
   * Extracts the enumerable properties from an Error object and returns them in a new object.
   *
   * @param error - The Error object.
   * @returns - An object containing the enumerable properties of the Error object.
   */
  export const errorData: (error: Error) => {};
  export default errorData;
}

declare module "react-declarative/utils/getMediaContext" {
  interface IBreakpoints {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
  }
  /**
   * Calculates the media context based on provided breakpoints.
   * @param breakpoints - The breakpoints to use for the media context calculation.
   * @param [breakpoints.xs=0] - The extra small breakpoint.
   * @param [breakpoints.sm=600] - The small breakpoint.
   * @param [breakpoints.lg=1280] - The large breakpoint.
   * @returns - The media context object.
   * @property isPhone - Indicates if the media context is for a phone.
   * @property isTablet - Indicates if the media context is for a tablet.
   * @property isDesktop - Indicates if the media context is for a desktop.
   * @property isWide - Indicates if the media context is for a wide screen.
   * @property isMobile - Indicates if the media context is for a mobile device.
   */
  export const getMediaContext: ({ xs, sm, lg }?: Partial<IBreakpoints>) => {
    isPhone: boolean;
    isTablet: boolean;
    isDesktop: boolean;
    isWide: boolean;
    isMobile: boolean;
  };
  export default getMediaContext;
}

declare module "react-declarative/utils/getRouteParams" {
  export interface ISwitchItem {
    path: string;
  }
  /**
   * Retrieves the route parameters from a given pathname based on a set of routes.
   *
   * @template T - The type of object to return as the parameters.
   * @param routes - The array of route objects to search through.
   * @param pathname - The pathname to extract the parameters from.
   * @returns - The extracted route parameters or null if no match is found.
   */
  export const getRouteParams: <T = Record<string, any>>(
    routes: ISwitchItem[],
    pathname: string,
  ) => T | null;
  export default getRouteParams;
}

declare module "react-declarative/utils/getRouteItem" {
  import { ISwitchItem } from "react-declarative/utils/getRouteParams";
  /**
   * Finds a route item that matches the given pathname from the provided routes array.
   *
   * @param routes - An array of switch items.
   * @param pathname - The pathname to match against the route items.
   * @return - The matched route item, or null if no match is found.
   */
  export const getRouteItem: <T extends ISwitchItem = ISwitchItem>(
    routes: T[],
    pathname: string,
  ) => T | null;
  export default getRouteItem;
}

declare module "react-declarative/utils/getElementFromXPath" {
  /**
   * Retrieves the first element matching the given XPath expression.
   *
   * @param xpath - The XPath expression to match the element(s).
   * @returns - The first element that matches the XPath expression, or null if no match is found.
   */
  export const getElementFromXPath: (xpath: string) => Node | null;
  export default getElementFromXPath;
}

declare module "react-declarative/utils/getXPathFromElement" {
  /**
   * Get the XPath of a given HTML element.
   *
   * @param element - The HTML element to get the XPath from.
   * @returns - The XPath of the element, or null if it couldn't be determined.
   */
  export const getXPathFromElement: (element: HTMLElement) => string | null;
  export default getXPathFromElement;
}

declare module "react-declarative/utils/arrays" {
  /**
   * Converts nested object properties to arrays.
   *
   * @param root - The root object to convert.
   * @param [forceArray=false] - Optional parameter to force conversion to arrays even if no numeric keys are present.
   * @returns - The converted object with nested properties converted to arrays.
   */
  export const arrays: (root: any, forceArray?: boolean) => any;
  export default arrays;
}

declare module "react-declarative/utils/objects" {
  /**
   * Recursively processes an object and its nested properties.
   *
   * @param root - The root object to be processed.
   * @returns - The processed object.
   */
  export const objects: (root: any) => any;
  export default objects;
}

declare module "react-declarative/utils/compareArray" {
  /**
   * Compares two arrays and determines if they are equal.
   *
   * @param a_arr - The first array to compare.
   * @param b_arr - The second array to compare.
   * @returns - Returns `true` if the arrays are equal, otherwise `false`.
   */
  export const compareArray: (a_arr: any, b_arr: any) => boolean;
  export default compareArray;
}

declare module "react-declarative/utils/isObject" {
  /**
   * Check if a given value is an object.
   *
   * @param obj - The value to check.
   * @returns - Returns `true` if the value is an object, else `false`.
   */
  export const isObject: (obj: any) => boolean;
  export default isObject;
}

declare module "react-declarative/utils/fetchApi" {
  export class FetchError extends Error {
    readonly originalError: any;
    readonly request: RequestInfo;
    readonly response: Response | undefined;
    constructor(
      originalError: any,
      request: RequestInfo,
      response: Response | undefined,
    );
  }
  /**
   * Makes an asynchronous HTTP request using the Fetch API.
   *
   * @param input - The resource URL or an instance of the URL class.
   * @param [init] - The request options.
   * @returns - The response data as a Promise.
   * @throws {FetchError} - If an error occurs during the request.
   */
  export const fetchApi: <T = any>(
    input: RequestInfo | URL,
    init?: RequestInit | undefined,
  ) => Promise<T>;
  export default fetchApi;
}

declare module "react-declarative/utils/createValueProvider" {
  import React from "react";
  /**
   * Creates a value provider with a default value.
   * @param defaultValue - The default value for the provider.
   * @returns A tuple containing the provider component and a hook to access the value.
   */
  export const createValueProvider: <P extends unknown = object>(
    defaultValue?: P | undefined,
  ) => readonly [
    ({
      children,
      payload,
    }: {
      children: React.ReactNode;
      payload: P;
    }) => JSX.Element,
    () => P,
  ];
  export default createValueProvider;
}

declare module "react-declarative/utils/createStateProvider" {
  import * as React from "react";
  /**
   * Creates a state provider with a given state type.
   *
   * @template S - The type of the state
   * @returns - A tuple containing the Provider component and the useStateProvider function.
   */
  export const createStateProvider: <S extends unknown>() => readonly [
    ({
      children,
      initialState,
      onChange,
    }: {
      onChange?: ((state: S) => void) | undefined;
      children: React.ReactNode;
      initialState: S | (() => S);
    }) => JSX.Element,
    () => readonly [S, (state: S | ((prevState: S) => S)) => void],
  ];
  export default createStateProvider;
}

declare module "react-declarative/utils/createSsStateProvider" {
  import * as React from "react";
  /**
   * Creates a state provider for React components with support for persistent state storage.
   * @param storageKey - The key used to store the state in the storage manager.
   * @returns - An array containing the WrappedStateProvider and useStateProvider components.
   * @template S - The type of the state object.
   */
  export const createSsStateProvider: <S extends unknown>(
    storageKey: string,
  ) => readonly [
    ({
      children,
      initialState,
      onChange,
    }: {
      onChange?: ((state: S) => void) | undefined;
      children: React.ReactNode;
      initialState: S | (() => S);
    }) => JSX.Element,
    () => readonly [S, (state: S | ((prevState: S) => S)) => void],
  ];
  export default createSsStateProvider;
}

declare module "react-declarative/utils/createLsStateProvider" {
  import * as React from "react";
  /**
   * Creates a state provider that persists state in local storage using a given storage key.
   *
   * @template S The type of the state.
   * @param storageKey The key used to store the state value in local storage.
   * @returns A tuple containing the wrapped state provider
   * component and the state hook.
   */
  export const createLsStateProvider: <S extends unknown>(
    storageKey: string,
  ) => readonly [
    ({
      children,
      initialState,
      onChange,
    }: {
      onChange?: ((state: S) => void) | undefined;
      children: React.ReactNode;
      initialState: S | (() => S);
    }) => JSX.Element,
    () => readonly [S, (state: S | ((prevState: S) => S)) => void],
  ];
  export default createLsStateProvider;
}

declare module "react-declarative/utils/normalizeText" {
  import IField from "react-declarative/model/IField";
  interface IConfig {
    inputFormatterSymbol: IField["inputFormatterSymbol"];
    inputFormatterAllowed: IField["inputFormatterAllowed"];
    inputFormatterReplace: IField["inputFormatterReplace"];
    inputFormatterTemplate: IField["inputFormatterTemplate"];
    inputFormatter: IField["inputFormatter"];
  }
  /**
   * Normalize text by applying inputFormatter function to each character.
   *
   * @param text - The input text to normalize.
   * @param config - The configuration object.
   * @param [config.inputFormatterSymbol='0'] - The symbol used in input formatter.
   * @param [config.inputFormatterAllowed] - The list of allowed characters in input formatter.
   * @param [config.inputFormatterReplace] - The mapping of characters to be replaced in input formatter.
   * @param [config.inputFormatterTemplate=''] - The template used in input formatter.
   * @param [config.inputFormatter] - The input formatter function to apply on each character.
   * @returns - The normalized text.
   */
  export const normalizeText: (
    text: string,
    {
      inputFormatterSymbol: symbol,
      inputFormatterAllowed: allowed,
      inputFormatterReplace: replace,
      inputFormatterTemplate: template,
      inputFormatter,
    }?: Partial<IConfig>,
  ) => string;
  export default normalizeText;
}

declare module "react-declarative/utils/formatText" {
  interface IParams {
    symbol?: string;
    allowed?: RegExp | ((char: string, idx: number) => boolean);
    replace?: (char: string) => string | null;
  }
  /**
   * Formats a raw string using a template and optional parameters.
   *
   * @param raw - The raw string to be formatted.
   * @param template - The template string used for formatting.
   * @param [params] - Optional parameters for customization.
   * @param [params.symbol='0'] - The symbol used in the template to indicate characters to be replaced.
   * @param [params.allowed] - A function or regular expression used to filter characters in the raw string.
   * @param [params.replace] - A function used to replace characters in the raw string.
   * @returns The formatted string.
   */
  export const formatText: (
    raw: string,
    template: string,
    { symbol, allowed, replace }?: IParams,
  ) => string;
  export default formatText;
}

declare module "react-declarative/utils/roundTicks" {
  /**
   * Rounds a number and formats it as a string with a fixed number of decimal places.
   *
   * @param price - The number to be formatted.
   * @param [tickSize=8] - The number of decimal places to round to.
   * @return - The formatted number as a string.
   */
  export const roundTicks: (price: number, tickSize?: number) => string;
  export default roundTicks;
}

declare module "react-declarative/utils/wordForm" {
  interface IWordForm {
    one: string;
    two?: string;
    many: string;
  }
  /**
   * Returns a word form based on a given number value.
   *
   * @param value - The number value to determine the word form for.
   * @param options - The options object.
   * @param options.one - The word form for when the value is 1.
   * @param options.many - The word form for when the value is 0 or ends with 0, or when the value is between 11 and 20 (inclusive).
   * @param [options.two=options.many] - The word form for when the value ends with 2 (e.g., 12, 22, 32).
   * @return The word form with the given number value.
   */
  export const wordForm: (
    value: number,
    { one, many, two }: IWordForm,
  ) => string;
  export default wordForm;
}

declare module "react-declarative/utils/hof/singleshot" {
  export interface IClearable {
    clear: () => void;
  }
  /**
   * Creates a function that is only executed once, and then memoizes and returns the result.
   *
   * @template T - The type of the function to be executed once.
   * @param run - The function to be executed once.
   * @returns - The executed function with additional "clear" method to reset the execution state.
   */
  export const singleshot: <T extends (...args: any[]) => any>(
    run: T,
  ) => T & IClearable;
  export default singleshot;
}

declare module "react-declarative/utils/hof/singletick" {
  export interface IClearable {
    clear: () => void;
  }
  /**
   * Wraps a function with a single event loop ticking behavior.
   *
   * @param run - The function to be wrapped.
   * @returns A wrapped function that executes with a single ticking behavior.
   */
  export const singletick: {
    <T extends (...args: any[]) => any>(run: T): T & IClearable;
    delay: number;
  };
  export default singletick;
}

declare module "react-declarative/utils/hof/afterinit" {
  export interface IWrappedFn<T extends any = any, P extends any[] = any> {
    (...args: P): Promise<T>;
    clear(): void;
  }
  /**
   * Creates a wrapped function that only executes the provided function after the initial call has completed.
   * The wrapped function can be cleared to allow subsequent calls to execute the provided function again.
   *
   * @template T The type of the promise resolved by the provided function.
   * @template P The type of the arguments passed to the provided function.
   * @param run The function to be wrapped.
   * @returns The wrapped function.
   */
  export const afterinit: <T extends unknown = any, P extends any[] = any[]>(
    run: (...args: P) => Promise<T>,
  ) => IWrappedFn<T, P>;
  export default afterinit;
}

declare module "react-declarative/utils/hof/retry" {
  import { CANCELED_SYMBOL } from "react-declarative/utils/hof/cancelable";
  export interface IWrappedFn<T extends any = any, P extends any[] = any> {
    (...args: P): Promise<T | typeof CANCELED_SYMBOL>;
    cancel(): void;
  }
  /**
   * Retries a function multiple times until it succeeds or reaches the maximum number of retries.
   *
   * @param run - The function to run.
   * @param count - The maximum number of retries (default is 5).
   * @returns - The wrapped function that can be canceled.
   */
  export const retry: <T extends unknown = any, P extends any[] = any[]>(
    run: (...args: P) => Promise<T>,
    count?: number,
  ) => IWrappedFn<T, P>;
  export default retry;
}

declare module "react-declarative/utils/hof/singlerun" {
  export interface IClearable {
    clear: () => void;
  }
  export class Task {
    readonly target: Promise<any>;
    get status(): "pending" | "fulfilled" | "rejected";
    constructor(target: Promise<any>);
  }
  /**
   * Represents a higher-order function that runs a task only once and provides a way to clear the result.
   * @template T - The function type.
   * @param run - The function to be executed.
   * @returns - The wrapped function with additional clear functionality.
   */
  export const singlerun: <T extends (...args: any[]) => any>(
    run: T,
  ) => T & IClearable;
  export default singlerun;
}

declare module "react-declarative/utils/hof/cancelable" {
  export interface IWrappedFn<T extends any = any, P extends any[] = any> {
    (...args: P): Promise<T | typeof CANCELED_SYMBOL>;
    cancel(): void;
  }
  export const CANCELED_SYMBOL: unique symbol;
  /**
   * Wraps a promise function and provides cancellation functionality.
   *
   * @param promise - The promise function to wrap.
   * @returns The wrapped function with cancellation capability.
   * @template T - The type of the promise's resolved value.
   * @template P - The type of the promise function's arguments.
   */
  export const cancelable: <T extends unknown = any, P extends any[] = any[]>(
    promise: (...args: P) => Promise<T>,
  ) => IWrappedFn<T, P>;
  export default cancelable;
}

declare module "react-declarative/utils/hof/debounce" {
  export interface IClearable {
    clear: () => void;
    flush: () => void;
  }
  /**
   * Creates a debounced version of a function.
   *
   * @template T - The type of the original function.
   * @param run - The function to debounce.
   * @param [delay=1000] - The delay in milliseconds before executing the debounced function.
   * @returns - The debounced function with additional methods for clearing and flushing.
   */
  export const debounce: <T extends (...args: any[]) => any>(
    run: T,
    delay?: number,
  ) => T & IClearable;
  export default debounce;
}

declare module "react-declarative/utils/hof/queued" {
  import { CANCELED_SYMBOL } from "react-declarative/utils/hof/cancelable";
  export interface IWrappedFn<T extends any = any, P extends any[] = any> {
    (...args: P): Promise<T | typeof CANCELED_SYMBOL>;
    clear(): void;
    cancel(): void;
  }
  /**
   * Creates a wrapper function for a Promise that allows for cancellation and clearing of queued Promises.
   *
   * @template T - The resolved value of the Promise.
   * @template P - The types of the arguments passed to the promise function.
   * @param promise - The promise function to be wrapped.
   * @returns - The wrapped function.
   */
  export const queued: <T extends unknown = any, P extends any[] = any[]>(
    promise: (...args: P) => Promise<T>,
  ) => IWrappedFn<T, P>;
  export { CANCELED_SYMBOL };
  export default queued;
}

declare module "react-declarative/utils/hof/lock" {
  import { IWrappedFn as IWrappedFnInternal } from "react-declarative/utils/hof/queued";
  interface IWrappedFn<T extends any = any, P extends any[] = any>
    extends IWrappedFnInternal<T, P> {
    beginLock(): void;
    endLock(): Promise<void>;
  }
  /**
   * Wraps a promise function with lock functionality.
   *
   * @param promise - The promise function to be wrapped.
   * @returns The wrapped function with lock functionality.
   */
  export const lock: <T extends unknown = any, P extends any[] = any[]>(
    promise: (...args: P) => Promise<T>,
  ) => IWrappedFn<T, P>;
  export default lock;
}

declare module "react-declarative/utils/hof/cached" {
  interface IClearable {
    clear: () => void;
  }
  /**
   * Caches the result of a function based on the change of arguments.
   * @template T - The type of the function to be cached.
   * @template A - The type of the arguments of the function.
   * @param changed - Function to determine if the arguments have changed.
   * @param run - The function to be cached.
   * @returns - The cached function with additional clear method.
   */
  export const cached: <T extends (...args: A) => any, A extends any[]>(
    changed: (prevArgs: A, currentArgs: A) => boolean,
    run: T,
  ) => T & IClearable;
  export default cached;
}

declare module "react-declarative/utils/hof/memoize" {
  export interface IClearable<K = string> {
    clear: (key?: K) => void;
  }
  export interface IRef<T = any> {
    current: T;
  }
  export const GET_VALUE_MAP: unique symbol;
  /**
   * A memoization function that caches the result of a function based on its arguments.
   *
   * @template T - The function type that will be memoized
   * @template A - The argument types of the function
   * @template K - The key type used to store the memoized results
   * @param key - A function that generates a unique key based on the arguments of the original function
   * @param run - The original function to be memoized
   * @returns - A memoized version of the original function with the ability to clear the cache
   */
  export const memoize: <
    T extends (...args: A) => any,
    A extends any[],
    K = string,
  >(
    key: (args: A) => K,
    run: T,
  ) => T & IClearable<K>;
  export default memoize;
}

declare module "react-declarative/utils/hof/trycatch" {
  interface IConfig {
    fallback?: (error: Error) => void;
    defaultValue: null | false;
  }
  /**
   * A higher-order function that wraps the provided function with a try-catch block. It catches any errors that occur during the execution of the function and handles them according to
   * the specified configuration.
   *
   * @template T - The type of the function being wrapped
   * @template A - An array of arguments that the function accepts
   * @template V - The type of the value returned by the function
   *
   * @param run - The function to be wrapped
   * @param config - The configuration object
   * @param config.fallback - The fallback function to be called with the caught error (optional)
   * @param config.defaultValue - The default value to be returned if an error occurs (optional, default: null)
   *
   * @returns - The wrapped function that handles errors and returns the result or the default value
   */
  export const trycatch: <
    T extends (...args: A) => any,
    A extends any[],
    V extends unknown,
  >(
    run: T,
    { fallback, defaultValue }?: Partial<IConfig>,
  ) => (...args: A) => ReturnType<T> | null;
  export default trycatch;
}

declare module "react-declarative/utils/hof/ttl" {
  import { IClearable as IClearableInternal } from "react-declarative/utils/hof/memoize";
  export interface IClearable<K = string> extends IClearableInternal<K> {
    gc: () => void;
  }
  /**
   * Wrap a function with time-to-live (TTL) caching.
   *
   * @template T - The function type.
   * @template A - The argument types of the function.
   * @template K - The key type for caching.
   * @param run - The function to wrap.
   * @param options - The configuration options.
   * @param [options.key] - The key generator function that generates a key based on function arguments.
   * @param [options.timeout] - The TTL duration in milliseconds.
   * @returns - The wrapped function with caching capability.
   */
  export const ttl: <
    T extends (...args: A) => any,
    A extends any[],
    K = string,
  >(
    run: T,
    {
      key,
      timeout,
    }?: {
      key?: ((args: A) => K) | undefined;
      timeout?: number | undefined;
    },
  ) => T & IClearable<K>;
  export default ttl;
}

declare module "react-declarative/utils/sleep" {
  /**
   * Delays the execution for the specified amount of time.
   *
   * @param [timeout=1000] - The duration to wait in milliseconds.
   * @returns A promise that resolves once the timeout has elapsed.
   */
  export const sleep: (timeout?: number) => Promise<void>;
  export default sleep;
}

declare module "react-declarative/utils/deepFlat" {
  /**
   * A utility function to deep flatten an array of objects.
   *
   * @param arr - The input array to be deep flattened.
   * @returns - The deep flattened array.
   * @template T - The type of elements in the input array.
   */
  export const deepFlat: <T = any>(arr?: T[]) => T[];
  export default deepFlat;
}

declare module "react-declarative/utils/rx/BehaviorSubject" {
  import Subject from "react-declarative/utils/rx/Subject";
  import TBehaviorSubject from "react-declarative/model/TBehaviorSubject";
  import TObserver, { TObservable } from "react-declarative/model/TObserver";
  export class BehaviorSubject<Data = any>
    extends Subject<Data>
    implements TBehaviorSubject<Data>, TObservable<Data>
  {
    constructor(_data?: Data | null);
    get data(): Data | null;
    next: (data: Data) => Promise<void>;
    toObserver: () => TObserver<Data>;
  }
  export { TBehaviorSubject };
  export default BehaviorSubject;
}

declare module "react-declarative/utils/rx/EventEmitter" {
  type EventKey = string | symbol;
  type Function = (...args: any[]) => void;
  export class EventEmitter {
    get hasListeners(): boolean;
    getListeners: (key: EventKey) => Function[];
    subscribe: (eventName: EventKey, callback: Function) => void;
    unsubscribe: (eventName: EventKey, callback: Function) => void;
    unsubscribeAll: () => void;
    once: (eventName: EventKey, callback: Function) => () => void;
    emit: (eventName: EventKey, ...args: any[]) => Promise<void>;
  }
  export default EventEmitter;
}

declare module "react-declarative/utils/rx/Observer" {
  import TObserver from "react-declarative/model/TObserver";
  export const LISTEN_CONNECT: unique symbol;
  export const LISTEN_DISCONNECT: unique symbol;
  type Fn = (...args: any[]) => void;
  export class Observer<Data = any> implements TObserver<Data> {
    get isShared(): boolean;
    get hasListeners(): boolean;
    constructor(dispose: Fn);
    [LISTEN_CONNECT](fn: () => void): void;
    [LISTEN_DISCONNECT](fn: () => void): void;
    map: <T = any>(callbackfn: (value: Data) => T) => Observer<T>;
    flatMap: <T = any>(callbackfn: (value: Data) => T[]) => Observer<T>;
    operator: <T = any>(
      callbackfn: (target: TObserver<Data>) => TObserver<T>,
    ) => TObserver<T>;
    reduce: <T = any>(
      callbackfn: (acm: T, cur: Data) => T,
      begin: T,
    ) => Observer<T>;
    split: () => Observer<ReadonlyArray<FlatArray<Data[], 20>>>;
    mapAsync: <T = any>(
      callbackfn: (value: Data) => Promise<T>,
      fallbackfn?: ((e: Error) => void) | undefined,
    ) => Observer<T>;
    filter: (callbackfn: (value: Data) => boolean) => Observer<Data>;
    tap: (callbackfn: (value: Data) => void) => Observer<Data>;
    debounce: (delay?: number | undefined) => Observer<Data>;
    emit: (data: Data) => void;
    connect: (
      callbackfn: (value: Data) => void,
    ) => import("../compose").Function;
    once: (callbackfn: (value: Data) => void) => Fn;
    share: () => this;
    repeat: (interval?: number) => Observer<Data>;
    merge: <T = any>(observer: TObserver<T>) => Observer<Data | T>;
    unsubscribe: () => void;
    toPromise: () => Promise<Data>;
    toIteratorContext: () => {
      iterate: () => AsyncGenerator<Awaited<Data>, void, unknown>;
      done(): void;
    };
  }
  export { TObserver };
  export default Observer;
}

declare module "react-declarative/utils/rx/Operator" {
  export class Operator {
    static take: <T = any>(
      count: number,
    ) => (
      target: import("./Observer").TObserver<T>,
    ) => import("./Observer").TObserver<T>;
    static skip: <T = any>(
      the: number,
    ) => (
      target: import("./Observer").TObserver<T>,
    ) => import("./Observer").TObserver<T>;
    static pair: <T = any>(
      by?: number,
    ) => (
      target: import("./Observer").TObserver<T>,
    ) => import("./Observer").TObserver<[T, T]>;
    static group: <T = any>(
      by: number,
    ) => (
      target: import("./Observer").TObserver<T>,
    ) => import("./Observer").TObserver<T[]>;
    static strideTricks: <T = any>(
      strideSize: number,
      step?: number,
    ) => (
      target: import("./Observer").TObserver<T[]>,
    ) => import("./Observer").TObserver<T[][]>;
    static distinct: <T = any, V = any>(
      getCompareValue?: (value: T) => V,
    ) => (
      target: import("./Observer").TObserver<T>,
    ) => import("./Observer").TObserver<T>;
    static liveness: <T = any>(
      fallbackfn: () => void,
      waitFor?: number,
    ) => (
      target: import("./Observer").TObserver<T>,
    ) => import("./Observer").TObserver<T>;
    static count: <T = any>() => (
      target: import("./Observer").TObserver<T>,
    ) => import("./Observer").TObserver<import("./lib/count").ICounted<T>>;
  }
  export default Operator;
}

declare module "react-declarative/utils/rx/Subject" {
  import Observer from "react-declarative/utils/rx/Observer";
  import TSubject from "react-declarative/model/TSubject";
  import TObserver, { TObservable } from "react-declarative/model/TObserver";
  export const SUBJECT_EVENT: unique symbol;
  type Function = (...args: any[]) => void;
  export class Subject<Data = any>
    implements TSubject<Data>, TObservable<Data>
  {
    constructor();
    map: <T = any>(callbackfn: (value: Data) => T) => TObserver<T>;
    flatMap: <T = any>(callbackfn: (value: Data) => T[]) => TObserver<T>;
    reduce: <T = any>(
      callbackfn: (acm: T, cur: Data) => T,
      begin: T,
    ) => TObserver<T>;
    mapAsync: <T = any>(
      callbackfn: (value: Data) => Promise<T>,
      fallbackfn?: ((e: Error) => void) | undefined,
    ) => TObserver<T>;
    filter: (callbackfn: (value: Data) => boolean) => TObserver<Data>;
    tap: (callbackfn: (value: Data) => void) => TObserver<Data>;
    operator: <T = any>(
      callbackfn: (value: TObserver<Data>) => TObserver<T>,
    ) => TObserver<T>;
    split: () => Observer<ReadonlyArray<FlatArray<Data[], 20>>>;
    debounce: (delay?: number | undefined) => TObserver<Data>;
    repeat: (interval?: number | undefined) => TObserver<Data>;
    merge: <T = any>(observer: TObserver<T>) => TObserver<Data | T>;
    subscribe: (callback: Function) => () => void;
    unsubscribeAll: () => void;
    once: (callback: Function) => () => void;
    next(data: Data): Promise<void>;
    toObserver(): TObserver<Data>;
    toPromise: () => Promise<Data>;
    toIteratorContext: () => {
      iterate(): AsyncGenerator<Data, void, unknown>;
      done(): void;
    };
  }
  export { TSubject };
  export default Subject;
}

declare module "react-declarative/utils/rx/Source" {
  import Observer from "react-declarative/utils/rx/Observer";
  import TObserver from "react-declarative/model/TObserver";
  import { TSubject } from "react-declarative/utils/rx/Subject";
  import { TBehaviorSubject } from "react-declarative/utils/rx/BehaviorSubject";
  export class Source {
    static merge: <
      A = never,
      B = never,
      C = never,
      D = never,
      E = never,
      F = never,
      G = never,
      H = never,
      I = never,
      J = never,
    >(
      observers: [
        TObserver<A>,
        (TObserver<B> | undefined)?,
        (TObserver<C> | undefined)?,
        (TObserver<D> | undefined)?,
        (TObserver<E> | undefined)?,
        (TObserver<F> | undefined)?,
        (TObserver<G> | undefined)?,
        (TObserver<H> | undefined)?,
        (TObserver<I> | undefined)?,
        (TObserver<J> | undefined)?,
      ],
    ) => TObserver<A | B | C | D | E | F | G | H | I | J>;
    static join: <
      A = never,
      B = never,
      C = never,
      D = never,
      E = never,
      F = never,
      G = never,
      H = never,
      I = never,
      J = never,
    >(
      observers: [
        TObserver<A>,
        (TObserver<B> | undefined)?,
        (TObserver<C> | undefined)?,
        (TObserver<D> | undefined)?,
        (TObserver<E> | undefined)?,
        (TObserver<F> | undefined)?,
        (TObserver<G> | undefined)?,
        (TObserver<H> | undefined)?,
        (TObserver<I> | undefined)?,
        (TObserver<J> | undefined)?,
      ],
      {
        race,
        buffer,
      }?: {
        buffer?:
          | [
              A,
              (B | undefined)?,
              (C | undefined)?,
              (D | undefined)?,
              (E | undefined)?,
              (F | undefined)?,
              (G | undefined)?,
              (H | undefined)?,
              (I | undefined)?,
              (J | undefined)?,
            ]
          | undefined;
        race?: boolean | undefined;
      },
    ) => TObserver<[A, B, C, D, E, F, G, H, I, J]>;
    static unicast: <Data = any>(
      factory: () => TObserver<Data>,
    ) => TObserver<Data> & {
      isUnicasted: true;
    };
    static multicast: <Data = any>(
      factory: () => TObserver<Data>,
    ) => TObserver<Data> & {
      isMulticasted: true;
      getRef: any;
    };
    static createHot: <Data = any>(
      emitter: (next: (data: Data) => void) => (() => void) | void,
    ) => Observer<Data>;
    static createCold: <Data = any>(
      emitter: (next: (data: Data) => void) => (() => void) | void,
    ) => Observer<Data>;
    static create: <Data = any>(
      emitter: (next: (data: Data) => void) => (() => void) | void,
    ) => Observer<Data>;
    static pipe: <Data = any, Output = any>(
      target: TObserver<Data>,
      emitter: (
        subject: TSubject<Data>,
        next: (output: Output) => void,
      ) => (() => void) | void,
    ) => Observer<Output>;
    static fromInterval: (delay: number) => TObserver<number>;
    static fromPromise: <Data = any>(
      callbackfn: () => Promise<Data>,
      fallbackfn?: ((e: Error) => void) | undefined,
    ) => TObserver<Data>;
    static fromDelay: (delay: number) => TObserver<void>;
    static fromArray: <Data = any>(
      data: Data,
    ) => TObserver<
      readonly (Data extends readonly (infer InnerArr)[]
        ? InnerArr extends readonly (infer InnerArr)[]
          ? InnerArr extends readonly (infer InnerArr)[]
            ? InnerArr extends readonly (infer InnerArr)[]
              ? InnerArr extends readonly (infer InnerArr)[]
                ? InnerArr extends readonly (infer InnerArr)[]
                  ? InnerArr extends readonly (infer InnerArr)[]
                    ? InnerArr extends readonly (infer InnerArr)[]
                      ? InnerArr extends readonly (infer InnerArr)[]
                        ? InnerArr extends readonly (infer InnerArr)[]
                          ? InnerArr extends readonly (infer InnerArr)[]
                            ? any
                            : InnerArr
                          : InnerArr
                        : InnerArr
                      : InnerArr
                    : InnerArr
                  : InnerArr
                : InnerArr
              : InnerArr
            : InnerArr
          : InnerArr
        : Data)[]
    >;
    static fromEvent: (
      event: keyof DocumentEventMap,
    ) => TObserver<
      | Event
      | MouseEvent
      | UIEvent
      | ErrorEvent
      | ProgressEvent<EventTarget>
      | SubmitEvent
      | FocusEvent
      | ClipboardEvent
      | AnimationEvent
      | InputEvent
      | CompositionEvent
      | DragEvent
      | FormDataEvent
      | PointerEvent
      | KeyboardEvent
      | SecurityPolicyViolationEvent
      | TouchEvent
      | TransitionEvent
      | WheelEvent
    >;
    static fromValue: <Data = any>(
      data: Data | (() => Data),
    ) => TObserver<Data>;
    static fromSubject: <Data = any>(subject: TSubject<Data>) => Observer<Data>;
    static fromBehaviorSubject: <Data = any>(
      subject: TBehaviorSubject<Data>,
    ) => Observer<Data>;
  }
  export default Source;
}

declare module "react-declarative/utils/math/and" {
  type Value = number | boolean;
  /**
   * Performs a logical AND operation on multiple values.
   *
   * @template T - The type of the values
   * @param args - The values to perform the logical AND operation on
   * @returns - The result of the logical AND operation
   */
  export const and: <T = Promise<Value>>(...args: T[]) => T;
  export default and;
}

declare module "react-declarative/utils/math/or" {
  type Value = number | boolean;
  /**
   * Returns a value of type T representing the logical OR operation on the given arguments.
   *
   * @param args - The arguments to be evaluated for the logical OR operation.
   * @returns A value of type T representing the result of the logical OR operation.
   * @throws If any of the arguments is a rejected promise.
   * @typeparam T - The type of the arguments and the return value.
   */
  export const or: <T = Promise<Value>>(...args: T[]) => T;
  export default or;
}

declare module "react-declarative/utils/math/not" {
  type Value = number | boolean;
  /**
   * Applies the logical negation operator to the given argument.
   * If the argument is a Promise, it returns a new Promise that resolves to the negation of the resolved value of the argument Promise.
   * If the argument is not a Promise, it returns the negation of the argument.
   *
   * @template T - The type of the argument and the return value.
   * @param arg - The argument to apply the logical negation operator.
   * @returns - The result of apply the logical negation operator to the argument.
   */
  export const not: <T = Promise<Value>>(arg: T) => T;
  export default not;
}

declare module "react-declarative/utils/math/match" {
  type Value = number | boolean;
  /**
   * Executes conditional branching based on the provided conditions and returns the appropriate value.
   *
   * @template A - Type of the condition value.
   * @template T - Type of the run value.
   * @template E - Type of the not value.
   *
   * @param params - The parameters object.
   * @param params.condition - The condition value or a function that returns the condition value.
   * @param params.run - The run value or a function that returns the run value.
   * @param [params.not=false] - The not value or a function that returns the not value. Defaults to false.
   *
   * @returns - The result of executing the condition and returning the appropriate value.
   */
  export const match: <A = Promise<Value>, T = Promise<Value>, E = false>({
    condition,
    run,
    not,
  }: {
    condition: A | (() => A);
    run: T | (() => T);
    not?: E | (() => E) | undefined;
  }) => A | T | E;
  export default match;
}

declare module "react-declarative/utils/math/first" {
  /**
   * Returns the first element of an array.
   *
   * @template T - The type of array elements.
   * @param arr - The input array.
   * @returns - The first element of the array, or null if the array is null or empty.
   */
  export const first: <T = any>(arr: T[] | null | undefined) => T | null;
  export default first;
}

declare module "react-declarative/utils/math/join" {
  /**
   * Joins multiple arrays into a single array, removing duplicates and filtering out null values.
   *
   * @param arr - The arrays to join.
   * @returns - The joined array.
   *
   * @template T - The type of values in the array.
   */
  export const join: <T = string>(
    ...arr: (T | T[] | null)[] | (T | T[] | null)[][]
  ) => T[];
  export default join;
}

declare module "react-declarative/utils/math/last" {
  /**
   * Returns the last element of an array or null if the array is empty or not an array.
   *
   * @param arr - The array from which to retrieve the last element.
   * @returns - The last element of the array or null.
   */
  export const last: <T = any>(arr: T[] | null | undefined) => T | null;
  export default last;
}

declare module "react-declarative/utils/math/truely" {
  /**
   * Filters an array and removes null values, casting the resulting array to a specific generic type if specified.
   *
   * @param arr - The input array containing values of type T or null.
   * @returns - The filtered array with null values removed.
   *
   * @template T - The generic type of the array elements.
   */
  export const truely: <T = string>(arr: (T | null)[]) => T[];
  export default truely;
}

declare module "react-declarative/utils/getAvailableFields" {
  import IField from "react-declarative/model/IField";
  import IOnePublicProps from "react-declarative/model/IOnePublicProps";
  /**
   * Returns an array of available fields based on the provided features.
   *
   * @param fields - The list of fields.
   * @param data - The data object.
   * @param payload - The payload object.
   * @param [_features] - The optional features.
   * @returns - The available fields.
   */
  export const getAvailableFields: (
    fields: IField[],
    data: Record<string, any>,
    payload: Record<string, any>,
    _features?: IOnePublicProps["features"],
  ) => {
    visible: IField<any, any>[];
    hidden: IField<any, any>[];
  };
  export default getAvailableFields;
}

declare module "react-declarative/utils/getInitialData" {
  import IField from "react-declarative/model/IField";
  /**
   * Generates initial data based on provided field definitions and payload.
   *
   * @template Data - The type of data object to create.
   * @template Payload - The type of payload used for populating default values.
   *
   * @param fields - The array of field definitions.
   * @param [payload={}] - The payload object used for populating default values.
   *
   * @returns - The generated initial data object.
   */
  export const getInitialData: <
    Data extends {} = any,
    Payload extends unknown = any,
  >(
    fields: IField<Data, Payload>[],
    payload?: Payload,
  ) => Data;
  export default getInitialData;
}

declare module "react-declarative/utils/flatArray" {
  /**
   * A function that flattens a given array to a single level.
   *
   * @param arr - The array(s) to be flattened.
   * @returns - The flattened array.
   * @template T
   */
  export const flatArray: <T = any>(...arr: any[]) => T[];
  export default flatArray;
}

declare module "react-declarative/utils/removeExtraSpaces" {
  /**
   * Removes extra spaces from a given string.
   *
   * @param str - The input string to remove extra spaces from.
   * @returns The modified string with extra spaces removed.
   */
  export const removeExtraSpaces: (str: string) => string;
  export default removeExtraSpaces;
}

declare module "react-declarative/utils/replaceSubstring" {
  /**
   * Replaces substrings in a given string with specified replacements.
   *
   * @param str - The original string.
   * @param from - The substring(s) to be replaced. Can be an array or a single string.
   * @param to - The replacement(s) for the substrings. Can be an array or a single string.
   * @returns - The modified string with the replaced substrings.
   */
  export const replaceSubstring: (
    str: string,
    from: string[] | string,
    to: string[] | string,
  ) => string;
  export default replaceSubstring;
}

declare module "react-declarative/model/TSubject" {
  /**
   * Interface representing a subject that can be subscribed to and trigger callbacks when data is updated.
   *
   * @template Data - The type of data that the subject emits.
   */
  export interface TSubject<Data = unknown> {
    subscribe: (callback: (data: Data) => void) => () => void;
    once: (callback: (data: Data) => void) => () => void;
    next: (data: Data) => void;
  }
  export default TSubject;
}

declare module "react-declarative/model/TBehaviorSubject" {
  import TSubject from "react-declarative/model/TSubject";
  /**
   * Represents a behavior subject.
   * @template Data The type of data that the behavior subject holds.
   * @extends TSubject<Data>
   * @interface
   */
  export interface TBehaviorSubject<Data = unknown> extends TSubject<Data> {
    data: Data | null;
  }
  export default TBehaviorSubject;
}

declare module "react-declarative/model/TObserver" {
  /**
   * TObserver is an interface that represents an observable object.
   * It provides various methods to transform, filter, merge, and consume data emitted by the observable.
   *
   * @template Data - The type of data emitted by the observable.
   */
  export interface TObserver<Data = unknown> {
    unsubscribe: () => void;
    map: <T = unknown>(callbackfn: (value: Data) => T) => TObserver<T>;
    flatMap: <T = any>(callbackfn: (value: Data) => T[]) => TObserver<T>;
    reduce: <T = any>(
      callbackfn: (acm: T, cur: Data) => T,
      begin: T,
    ) => TObserver<T>;
    mapAsync: <T = unknown>(
      callbackfn: (value: Data) => Promise<T>,
      fallbackfn?: (e: Error) => void,
    ) => TObserver<T>;
    operator: <T = any>(
      callbackfn: (target: TObserver<Data>) => TObserver<T>,
    ) => TObserver<T>;
    filter: (callbackfn: (value: Data) => boolean) => TObserver<Data>;
    merge: <T = unknown>(observer: TObserver<T>) => TObserver<Data | T>;
    tap: (callbackfn: (value: Data) => void) => TObserver<Data>;
    split: () => TObserver<ReadonlyArray<FlatArray<Data[], 20>>>;
    debounce: (delay?: number) => TObserver<Data>;
    repeat: (interval?: number) => TObserver<Data>;
    connect: (callbackfn: (value: Data) => void) => () => void;
    once: (callbackfn: (value: Data) => void) => () => void;
    share: () => TObserver<Data>;
    toPromise: () => Promise<Data>;
    toIteratorContext: () => {
      iterate(): AsyncGenerator<Data, void, unknown>;
      done(): void;
    };
  }
  export type TObservable<Data = unknown> = Omit<
    TObserver<Data>,
    keyof {
      unsubscribe: never;
      connect: never;
      once: never;
      share: never;
    }
  >;
  export default TObserver;
}

declare module "react-declarative/model/TPaginator" {
  import {
    ListHandlerChips,
    ListHandlerPagination,
    ListHandlerSortModel,
  } from "react-declarative/model/IListProps";
  import IRowData from "react-declarative/model/IRowData";
  /**
   * Type definition for TPaginator.
   *
   * @template FilterData - The type of data used for filtering.
   * @template RowData - The type of data representing a row.
   * @template Payload - The type of additional payload data.
   *
   * @param data - The filter data.
   * @param pagination - The pagination settings.
   * @param sort - The sorting settings.
   * @param chips - The chip filters.
   * @param search - The search string.
   * @param payload - The additional payload data.
   *
   * @returns A promise that resolves to either an array of row data or an object containing rows and total count.
   */
  export type TPaginator<
    FilterData extends {} = any,
    RowData extends IRowData = any,
    Payload = any,
  > = (
    data: FilterData,
    pagination: ListHandlerPagination,
    sort: ListHandlerSortModel<RowData>,
    chips: ListHandlerChips<RowData>,
    search: string,
    payload: Payload,
  ) => Promise<
    | {
        rows: RowData[];
        total: number | null;
      }
    | RowData[]
  >;
  export default TPaginator;
}

declare module "react-declarative/utils/getErrorMessage" {
  /**
   * Returns the error message from the given error object.
   *
   * @param error - The error object.
   * @returns The error message.
   */
  export const getErrorMessage: (error: any) => string;
  export default getErrorMessage;
}

declare module "react-declarative/utils/mvvm/Entity" {
  import Model from "react-declarative/utils/mvvm/Model";
  export {
    CHANGE_DEBOUNCE,
    CHANGE_SYMBOL,
    REFRESH_SYMBOL,
  } from "react-declarative/utils/mvvm/Model";
  export interface IEntity {
    id: string | number;
  }
  export interface IEntityAdapter<T extends IEntity = any> {
    id: IEntity["id"];
    setData(data: Partial<T> | ((prevData: T) => Partial<T>)): void;
    data: T;
    refresh(): void;
    toObject(): T;
  }
  /**
   * @description MVVM Object wrapper. Emmits change after setData
   */
  export class Entity<T extends IEntity = any>
    extends Model<T>
    implements IEntityAdapter<T>
  {
    get id(): string | number;
    constructor(
      _data: T | Entity<T> | (() => T),
      _debounce?: number,
      _prevData?: () => T,
    );
    setData: (data: Partial<T> | ((prevData: T) => Partial<T>)) => void;
    handleChange: (change: (item: Entity<T>) => void) => () => void;
  }
  export default Entity;
}

declare module "react-declarative/utils/mvvm/Collection" {
  import EventEmitter from "react-declarative/utils/rx/EventEmitter";
  import Entity, {
    IEntity,
    IEntityAdapter,
  } from "react-declarative/utils/mvvm/Entity";
  export const REORDER_SYMBOL: unique symbol;
  export interface ICollectionAdapter<T extends IEntity = any> {
    items: IEntityAdapter<T>[];
    lastIdx: number;
    ids: IEntity["id"][];
    isEmpty: boolean;
    setData(items: T[]): void;
    map<V = any>(callbackfn: (value: IEntityAdapter<T>, idx: number) => V): V[];
    filter(
      predicate: (value: IEntityAdapter<T>, idx: number) => boolean,
    ): IEntityAdapter<T>[];
    find(
      predicate: (value: IEntityAdapter<T>, idx: number) => boolean,
    ): IEntityAdapter<T> | undefined;
    some(
      predicate: (value: IEntityAdapter<T>, idx: number) => boolean,
    ): boolean;
    forEach(callbackfn: (value: IEntityAdapter<T>, idx: number) => void): void;
    push(...items: T[] | T[][]): void;
    upsert(...items: T[] | T[][]): void;
    remove(item: IEntity): void;
    removeById(id: IEntity["id"]): void;
    removeAll(): void;
    findById(id: IEntity["id"]): IEntityAdapter<T>;
    clear(): void;
    refresh(): void;
    toArray(): T[];
  }
  export class EntityNotFoundError extends Error {}
  /**
   * @description MVVM Array wrapper. Emmits `change` after push/pop/change of element
   */
  export class Collection<T extends IEntity = any>
    extends EventEmitter
    implements ICollectionAdapter<T>
  {
    protected _debounce: number;
    protected _prevData: () => Entity<T>[];
    get items(): Entity<T>[];
    get lastIdx(): number;
    get ids(): (string | number)[];
    constructor(
      entities?: T[] | (() => T[]) | Entity<T>[] | Collection<T>,
      _debounce?: number,
      _prevData?: () => Entity<T>[],
    );
    get isEmpty(): boolean;
    setData: (items: T[]) => void;
    clear: () => void;
    map: <V = any>(callbackfn: (value: Entity<T>, idx: number) => V) => V[];
    filter: (
      predicate: (value: Entity<T>, idx: number) => boolean,
    ) => Entity<T>[];
    find: (
      predicate: (value: Entity<T>, idx: number) => boolean,
    ) => Entity<T> | undefined;
    some: (predicate: (value: Entity<T>, idx: number) => boolean) => boolean;
    forEach: (callbackfn: (value: Entity<T>, idx: number) => void) => void;
    push: (...items: T[] | T[][]) => void;
    upsert: (...items: T[] | T[][]) => void;
    remove: (item: IEntity) => void;
    removeById: (id: IEntity["id"]) => void;
    removeAll: () => void;
    findById: (id: IEntity["id"]) => Entity<T>;
    handleChange: (
      change: (collection: Collection<T>, target: Entity<T> | null) => void,
    ) => () => void;
    handleDropChanges: () => void;
    refresh: () => Promise<void>;
    toArray: () => T[];
  }
  export default Collection;
}

declare module "react-declarative/utils/mvvm/Model" {
  import EventEmitter from "react-declarative/utils/rx/EventEmitter";
  import Subject from "react-declarative/utils/rx/Subject";
  export const CHANGE_SYMBOL: unique symbol;
  export const REFRESH_SYMBOL: unique symbol;
  export const CHANGE_DEBOUNCE = 1000;
  export interface IModelAdapter<T extends {} = any> {
    data: T;
    setData(data: Partial<T> | ((prevData: T) => Partial<T>)): void;
    refresh(): void;
    toObject(): T;
  }
  export class Model<T extends {} = any>
    extends EventEmitter
    implements IModelAdapter<T>
  {
    protected _debounce: number;
    protected _prevData: () => T;
    protected _dropChanges: Subject<void>;
    protected _data: T;
    get data(): T;
    constructor(
      _data: T | Model<T> | (() => T),
      _debounce?: number,
      _prevData?: () => T,
    );
    setData(data: Partial<T> | ((prevData: T) => Partial<T>)): void;
    handleChange(change: (item: Model<T>) => void): () => void;
    handleDropChanges: () => void;
    refresh: () => Promise<void>;
    toObject: () => T;
  }
  export default Model;
}

declare module "react-declarative/utils/formatAmount" {
  /**
   * Formats the given value to a specific scale and separates the thousands with a separator.
   *
   * @param value - The value to be formatted.
   * @param [scale=2] - The number of decimal places to round to.
   * @param [separator=','] - The separator for thousands.
   * @returns The formatted value.
   */
  export const formatAmount: (
    value: number | string,
    scale?: number,
    separator?: string,
  ) => string;
  export default formatAmount;
}

declare module "react-declarative/utils/createWindowHistory" {
  import { BrowserHistory, MemoryHistory } from "history";
  /**
   * Determines whether the application should use a memory history or a browser history based on the current environment.
   * @returns - The appropriate history object based on the current environment.
   */
  export const createWindowHistory: () => MemoryHistory | BrowserHistory;
  export default createWindowHistory;
}

declare module "react-declarative/utils/createLsManager" {
  /**
   * A utility class for managing local storage values.
   * @template T - The type of the value to be stored in local storage.
   * @param STORAGE_KEY - The key to use when storing the value in local storage.
   * @returns - An instance of the createLsManager class.
   */
  export const createLsManager: <T = Record<string, any>>(
    STORAGE_KEY: string,
  ) => {
    getValue: () => T | null;
    setValue: (value: T) => void;
    clear: () => void;
  };
  export default createLsManager;
}

declare module "react-declarative/utils/createSsManager" {
  /**
   * A utility class for managing session storage values.
   *
   * @param STORAGE_KEY - The key used to store the value in session storage.
   * @returns - An instance of the class with methods for getting, setting, and clearing the value.
   *
   * @template T - The type of the value stored in session storage.
   */
  export const createSsManager: <T = Record<string, any>>(
    STORAGE_KEY: string,
  ) => {
    getValue: () => T | null;
    setValue: (value: T) => void;
    clear: () => void;
  };
  export default createSsManager;
}

declare module "react-declarative/utils/createCustomTag" {
  interface IConfig {
    onClick: (e: MouseEvent) => void;
    onInit: (element: HTMLDivElement) => void;
  }
  /**
   * Creates a custom HTML tag element with the given name, style, and optional event handlers.
   *
   * @param [name="bgcolor-red"] - The name of the custom HTML tag element.
   * @param [style=""] - The inline style to apply to the custom HTML tag element.
   * @param [{ onClick, onInit }={}] - Optional event handlers for the custom HTML tag element.
   */
  export const createCustomTag: (
    name?: string,
    style?: string,
    { onClick, onInit }?: Partial<IConfig>,
  ) => void;
  export default createCustomTag;
}

declare module "react-declarative/utils/mainColor" {
  /**
   * Sets the main color theme of the application.
   * @param color - The color to set as the main theme color.
   */
  export const mainColor: (color: string) => void;
  export default mainColor;
}

declare module "react-declarative/utils/cacheSrc" {
  /**
   * Sets the image source of a given HTMLImageElement by caching the image.
   * @param url - The URL of the image to cache.
   * @returns - A function that takes an HTMLImageElement as input and sets its source with the cached image.
   */
  export const cacheSrc: (url: string) => {
    ref: (element: HTMLImageElement | null) => void;
  };
  export default cacheSrc;
}

declare module "react-declarative/utils/base64Json" {
  /**
   * Parses a Base64-encoded JSON string to a JavaScript object.
   *
   * @param state - The Base64-encoded JSON string to parse.
   * @returns - The parsed JavaScript object, or null if parsing fails.
   * @template T - The type of the parsed JavaScript object. Defaults to Record<string, any>.
   */
  export const parseBase64Json: <T = Record<string, any>>(
    state: string,
  ) => T | null;
  /**
   * Converts a JavaScript object to a base64 encoded JSON string.
   *
   * @template T - The type of the state object being serialized.
   * @param state - The state object to be serialized.
   * @returns - The base64 encoded JSON string representation of the state object.
   */
  export const stringifyBase64Json: <T = Record<string, any>>(
    state: T,
  ) => string;
}

declare module "react-declarative/utils/asciiParams" {
  /**
   * Parses an array of ASCII codes representing key-value pairs and converts them into an object.
   *
   * @param state - An array of ASCII codes representing key-value pairs.
   * @returns - The parsed object if successful, or null if an error occurred.
   * @template T - The object type of the parsed result. Defaults to `Record<string, any>`.
   */
  export const parseAsciiParams: <T extends {} = Record<string, any>>(
    state: number[],
  ) => T | null;
  export const serializeAsciiParams: <T extends {} = Record<string, any>>(
    state: T,
  ) => number[];
  export const toBytes32: (str: string) => string;
  export const fromBytes32: (hex: string) => string;
}

declare module "react-declarative/utils/datetime" {
  export const DATE_PLACEHOLDER = "DD/MM/YYYY";
  export const TIME_PLACEHOLDER = "HH:MM";
  export const DATE_EXPR: RegExp;
  export const TIME_EXPR: RegExp;
  export class Time {
    readonly hour: number;
    readonly minute: number;
    constructor(hour: number, minute: number);
    toString: () => string | null;
    toStamp: () => number;
    static fromStamp: (stamp: number) => Time;
  }
  export class Date {
    readonly day: number;
    readonly month: number;
    readonly year: number;
    constructor(day: number, month: number, year: number);
    toString: () => string | null;
    toStamp: () => number;
    static fromStamp: (stamp: number) => Date;
  }
  /**
   * Parses a string representation of a date in "dd/mm/yyyy" format and returns a Date object.
   * If the input is not in the correct format or is null, returns null.
   *
   * @param date - The string representation of the date to parse.
   * @returns - The parsed Date object or null if the input is not valid.
   */
  export const parseDate: (date: string | null) => Date | null;
  /**
   * Serialize a given date to a string representation in the format "dd/MM/yyyy".
   *
   * @param date - The date to serialize.
   * @returns The serialized date or null if the input is not a valid Date object.
   */
  export const serializeDate: (date: Date) => string | null;
  /**
   * Parses a string representation of time into a Time object.
   *
   * @param time - The string representation of time to parse.
   * @returns - The parsed Time object or null if input is null or invalid.
   */
  export const parseTime: (time: string | null) => Time | null;
  /**
   * Serializes the given time object into a string representation.
   *
   * @param time - The time object to be serialized.
   * @returns - The serialized time string, or null if the input is invalid.
   */
  export const serializeTime: (time: Time) => string | null;
  /**
   * Retrieves the current date.
   *
   * @returns The current date in serialized format.
   */
  export const currentDate: () => string;
  /**
   * Generates the current time.
   *
   * @returns The current time as a serialized string.
   */
  export const currentTime: () => string;
  /**
   * Converts a string representation of a time to a timestamp.
   *
   * @param [str] - The time string to convert. Defaults to the current time.
   * @returns - The timestamp representation of the given time or -1 if conversion fails.
   */
  export const timeStamp: (str?: string) => number;
  /**
   * Converts a date string to a timestamp.
   *
   * @param [str=currentDate()] - The date string to convert.
   * @returns - The timestamp if the conversion is successful, -1 otherwise.
   */
  export const dateStamp: (str?: string) => number;
}

declare module "react-declarative/utils/waitForMove" {
  /**
   * Waits for a move to occur and executes the provided function.
   *
   * @param fn - The function to be executed when a move occurs.
   * @returns
   */
  export const waitForMove: (fn: () => void) => () => void;
  export default waitForMove;
}

declare module "react-declarative/utils/compose" {
  export type Function = (...args: any[]) => any;
  /**
   * Compose multiple functions together to create a new function that applies the given functions from right to left.
   * If no functions are given, the composed function will simply return the input argument.
   * If only one function is given, the composed function will simply return the output of that function.
   *
   * @param funcs - The functions to be composed.
   * @returns - The composed function.
   */
  export const compose: (...funcs: Function[]) => Function;
  export default compose;
}

declare module "react-declarative/utils/getMomentStamp" {
  import dayjs from "dayjs";
  export const DIMENSION = "day";
  export const GENESIS = "1970-01-01";
  export type stamp = number;
  /**
   * Calculates the moment stamp based on the given end date and dimension.
   * The moment stamp represents the difference between the end date and the start date in the specified dimension.
   *
   * @param [end=dayjs()] - The end date. Defaults to the current date and time.
   * @param [dimension=DIMENSION] - The dimension to calculate the difference in. Defaults to DIMENSION.
   * @returns - The moment stamp representing the difference between the end date and the start date.
   */
  export const getMomentStamp: (
    end?: dayjs.Dayjs,
    dimension?: dayjs.ManipulateType,
  ) => stamp;
  /**
   * Converts a timestamp to a moment in time.
   *
   * @param stamp - The timestamp to convert.
   * @param dimension - The dimension to add to the timestamp. Defaults to `DIMENSION`.
   * @returns - The moment in time corresponding to the timestamp.
   */
  export const fromMomentStamp: (
    stamp: number,
    dimension?: dayjs.ManipulateType,
  ) => dayjs.Dayjs;
  export default getMomentStamp;
}

declare module "react-declarative/utils/getTimeStamp" {
  import dayjs from "dayjs";
  /**
   * Retrieves the timestamp from the given source.
   * If no source is provided, the current timestamp is used.
   *
   * @param [source] - The source object to retrieve the timestamp from. Defaults to current time.
   * @returns - The timestamp in minutes.
   */
  export const getTimeStamp: (source?: dayjs.Dayjs) => number;
  /**
   * Converts a timestamp to a date and time using dayjs library.
   * @param stamp - The timestamp to convert.
   * @returns The date and time corresponding to the given timestamp.
   */
  export const fromTimeStamp: (stamp: number) => dayjs.Dayjs;
  export default getTimeStamp;
}

declare module "react-declarative/api/resolveDocuments" {
  /**
   * Resolves the documents from an async generator and returns them as a flattened array.
   *
   * @param iterator - The async generator to resolve documents from.
   * @returns - A promise that resolves to the flattened array of documents.
   */
  export const resolveDocuments: <T extends unknown>(
    iterator: AsyncGenerator<T | T[], void, unknown>,
  ) => Promise<T[]>;
  export default resolveDocuments;
}

declare module "react-declarative/api/iterateDocuments" {
  import IRowData, { RowId } from "react-declarative/model/IRowData";
  interface IConfig<Data extends IRowData = IRowData> {
    totalDocuments?: number;
    limit?: number;
    delay?: number;
    createRequest: (
      data: {
        limit: number;
        offset: number;
        page: number;
        lastId: RowId | null;
      } & Omit<IConfig<Data>, "createRequest">,
    ) => Data[] | Promise<Data[]>;
  }
  /**
   * Asynchronous generator function that iterates over documents.
   *
   * @template Data - The type of the row data in the documents.
   *
   * @param config - The configuration object.
   * @param [config.totalDocuments=TOTAL_DOCUMENTS] - The total number of documents to iterate over.
   * @param [config.limit=REQUEST_LIMIT] - The number of documents to fetch in each request.
   * @param [config.delay=REQUEST_DELAY] - The delay between each request.
   * @param [config.createRequest=() => []] - The function used to create the request.
   *
   * @returns An asynchronous generator that yields an array of documents.
   *
   * @throws {Error} If the response length is greater than the specified limit.
   */
  export const iterateDocuments: <Data extends IRowData = IRowData>({
    totalDocuments,
    limit,
    delay,
    createRequest,
  }: IConfig<Data>) => AsyncGenerator<Data[], void, unknown>;
  export default iterateDocuments;
}

declare module "react-declarative/api/pickDocuments" {
  /**
   * A function that picks a subset of documents from an array of documents, given a limit and offset.
   *
   * @template T - The type of the documents in the array.
   * @param limit - The maximum number of documents to pick.
   * @param offset - The number of documents to skip before picking.
   * @returns - A function that takes an array of documents and returns an object with `rows` and `done` properties.
   *                       The `rows` property contains the picked documents, and `done` property indicates if the picking is finished.
   */
  export const pickDocuments: <T extends unknown>(
    limit: number,
    offset: number,
  ) => (rows?: T[]) => {
    rows: T[];
    done: boolean;
  };
  export default pickDocuments;
}

declare module "react-declarative/utils/heavy" {
  import * as React from "react";
  interface IParams {
    loaderSize: number;
  }
  /**
   * Wraps a React component with lazy loading and suspense, displaying a loader while the component is being loaded.
   *
   * @template T - The type of the wrapped React component.
   * @template P - The props type of the wrapped React component.
   *
   * @param factory - A function that returns a promise that resolves to the component.
   * @param [options={}] - Optional parameters for customizing the loader.
   *
   * @returns A function that returns the wrapped component with suspense and loader.
   */
  export const heavy: <
    T extends React.ComponentType<P>,
    P extends object = any,
  >(
    factory: () => Promise<{
      default: T;
    }>,
    { loaderSize }?: Partial<IParams>,
  ) => (props: P) => JSX.Element;
  export default heavy;
}

declare module "react-declarative/components/One/layouts/FragmentLayout" {
  import * as React from "react";
  import IField from "react-declarative/model/IField";
  import IEntity from "react-declarative/model/IEntity";
  import IAnything from "react-declarative/model/IAnything";
  import { PickProp } from "react-declarative/model/IManaged";
  export interface IFragmentLayoutProps<Data = IAnything, Payload = IAnything> {
    isVisible?: PickProp<IField<Data, Payload>, "isVisible">;
    features?: PickProp<IField<Data, Payload>, "features">;
    hidden?: PickProp<IField<Data, Payload>, "hidden">;
  }
  interface IFragmentLayoutPrivate<Data = IAnything> extends IEntity<Data> {
    children?: React.ReactNode;
    ready: PickProp<IEntity<Data>, "ready">;
  }
  /**
   * Component that conditionally renders its children based on the visibility criteria.
   *
   * @param props - The component props.
   * @param props.children - The children to be rendered.
   * @param props.isVisible - The function used to determine if the component should be visible.
   * @param props.ready - The function to be called when the component is ready.
   * @param props.object - The object used by the `isVisible` function.
   *
   * @returns - The rendered React node.
   */
  export const FragmentLayout: {
    <Data extends unknown = any>({
      children,
      isVisible,
      ready,
    }: IFragmentLayoutProps<Data, any> &
      IFragmentLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      children,
      isVisible,
      ready,
    }: IFragmentLayoutProps<Data, any> &
      IFragmentLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/DivLayout" {
  import * as React from "react";
  import IField from "react-declarative/model/IField";
  import IEntity from "react-declarative/model/IEntity";
  import IAnything from "react-declarative/model/IAnything";
  import { IWrappedLayout, PickProp } from "react-declarative/model/IManaged";
  export interface IDivLayoutProps<Data = IAnything, Payload = IAnything>
    extends IWrappedLayout<Data> {
    className?: PickProp<IField<Data, Payload>, "className">;
    style?: PickProp<IField<Data, Payload>, "style">;
    hidden?: PickProp<IField<Data, Payload>, "hidden">;
  }
  interface IDivLayoutPrivate<Data = IAnything> extends IEntity<Data> {
    children?: React.ReactNode;
  }
  /**
   * A layout component that renders a container <div> element with optional child elements.
   *
   * @template Data - A generic type that specifies additional data passed to the component.
   *
   * @param props - The properties of the DivLayout component.
   * @param props.children - The child elements to render inside the div container.
   * @param props.className - The CSS class name to apply to the div container.
   * @param props.style - The inline styles to apply to the div container.
   *
   * @returns The rendered DivLayout component.
   */
  export const DivLayout: {
    <Data extends unknown = any>({
      children,
      className,
      style,
    }: IDivLayoutProps<Data, any> & IDivLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      children,
      className,
      style,
    }: IDivLayoutProps<Data, any> & IDivLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/BoxLayout" {
  import * as React from "react";
  import IField from "react-declarative/model/IField";
  import IEntity from "react-declarative/model/IEntity";
  import IAnything from "react-declarative/model/IAnything";
  import { IWrappedLayout, PickProp } from "react-declarative/model/IManaged";
  export interface IBoxLayoutProps<Data = IAnything, Payload = IAnything>
    extends IWrappedLayout<Data, Payload> {
    className?: PickProp<IField<Data, Payload>, "className">;
    style?: PickProp<IField<Data, Payload>, "style">;
    sx?: PickProp<IField<Data, Payload>, "sx">;
  }
  interface IBoxLayoutPrivate<Data = IAnything> extends IEntity<Data> {
    children?: React.ReactNode;
  }
  /**
   * A custom component for layouting its children in a box.
   *
   * @param props - The properties for the BoxLayout component.
   * @param props.children - The children elements to be rendered within the box layout.
   * @param props.className - The optional CSS class for styling the box layout.
   * @param props.style - The optional inline style object for further customization.
   * @param props.sx - The optional theme-ui style object for additional theming.
   * @typeparam {Data} - The type of the data object that can be passed to the layout.
   * @extends {IBoxLayoutProps<Data>} - The properties specific to the BoxLayout component.
   * @extends {IBoxLayoutPrivate<Data>} - The private properties specific to the BoxLayout component.
   * @returns - A JSX element representing the box layout component.
   */
  export const BoxLayout: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      sx,
    }: IBoxLayoutProps<Data, any> & IBoxLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      sx,
    }: IBoxLayoutProps<Data, any> & IBoxLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/TabsLayout" {
  import * as React from "react";
  import { IGroupProps } from "react-declarative/components/common/Group";
  import IField from "react-declarative/model/IField";
  import IEntity from "react-declarative/model/IEntity";
  import IAnything from "react-declarative/model/IAnything";
  import { PickProp } from "react-declarative/model/IManaged";
  export interface ITabsLayoutProps<Data = IAnything, Payload = IAnything>
    extends IGroupProps<Data, Payload> {
    className?: PickProp<IField<Data, Payload>, "className">;
    style?: PickProp<IField<Data, Payload>, "style">;
    tabLine?: PickProp<IField<Data, Payload>, "tabLine">;
    tabList?: PickProp<IField<Data, Payload>, "tabList">;
    tabIndex?: PickProp<IField<Data, Payload>, "tabIndex">;
    tabColor?: PickProp<IField<Data, Payload>, "tabColor">;
    tabChange?: PickProp<IField<Data, Payload>, "tabChange">;
    tabVariant?: PickProp<IField<Data, Payload>, "tabVariant">;
    tabKeepFlow?: PickProp<IField<Data, Payload>, "tabKeepFlow">;
    tabBackground?: PickProp<IField<Data, Payload>, "tabBackground">;
  }
  interface ITabsLayoutPrivate<Data = IAnything> extends IEntity<Data> {
    isBaselineAlign: boolean;
    children?: React.ReactNode;
  }
  /**
   * Represents a layout component for tabs.
   *
   * @template Data - The type of data to be used in the tabs.
   *
   * @param props - The props for the TabsLayout component.
   * @param props.children - The content of the TabsLayout component.
   * @param props.className - The CSS class name for the TabsLayout component.
   * @param props.style - The inline style for the TabsLayout component.
   * @param props.tabChange - The callback function for tab change event.
   * @param [props.tabVariant="fullWidth"] - The variant of the tabs (default: "fullWidth").
   * @param [props.tabLine=false] - Whether to show a line beneath the tabs (default: false).
   * @param [props.tabColor="primary"] - The color of the tabs (default: "primary").
   * @param [props.tabList=["Empty"]] - The list of tab labels (default: ["Empty"]).
   * @param [props.tabKeepFlow=false] - Whether to keep the flow of content when tabs are switched (default: false).
   * @param [props.tabBackground=false] - Whether to show a background color behind the content (default: false).
   * @param [props.tabIndex=0] - The default index of the active tab (default: 0).
   * @param props.columns - The number of columns for the Group container.
   * @param props.columnsOverride - The configuration object to override the number of columns for specific breakpoints.
   * @param props.isBaselineAlign - Whether to align the items based on the baseline.
   * @param props.sx - The custom CSS properties for the Group container.
   * @param props.phoneColumns - The number of columns for mobile devices.
   * @param props.tabletColumns - The number of columns for tablet devices.
   * @param props.desktopColumns - The number of columns for desktop devices.
   * @param [props.fieldRightMargin="0"] - The right margin for form fields (default: "0").
   * @param [props.fieldBottomMargin="0"] - The bottom margin for form fields (default: "0").
   *
   * @returns - The rendered TabsLayout component.
   */
  export const TabsLayout: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      tabChange,
      tabVariant,
      tabLine,
      tabColor,
      tabList,
      tabKeepFlow,
      tabBackground,
      tabIndex: tabIndexDefault,
      columns,
      columnsOverride,
      isBaselineAlign,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      fieldRightMargin,
      fieldBottomMargin,
    }: ITabsLayoutProps<Data, any> & ITabsLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      tabChange,
      tabVariant,
      tabLine,
      tabColor,
      tabList,
      tabKeepFlow,
      tabBackground,
      tabIndex: tabIndexDefault,
      columns,
      columnsOverride,
      isBaselineAlign,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      fieldRightMargin,
      fieldBottomMargin,
    }: ITabsLayoutProps<Data, any> & ITabsLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/CenterLayout" {
  import * as React from "react";
  import IField from "react-declarative/model/IField";
  import IEntity from "react-declarative/model/IEntity";
  import IAnything from "react-declarative/model/IAnything";
  import { PickProp } from "react-declarative/model/IManaged";
  import { IGroupProps } from "react-declarative/components/common/Group";
  export interface ICenterLayoutProps<Data = IAnything, Payload = IAnything>
    extends IGroupProps<Data> {
    innerPadding?: PickProp<IField<Data, Payload>, "innerPadding">;
    className?: PickProp<IField<Data, Payload>, "className">;
    style?: PickProp<IField<Data, Payload>, "style">;
  }
  interface ICenterLayoutPrivate<Data = IAnything> extends IEntity<Data> {
    isBaselineAlign: boolean;
    children?: React.ReactNode;
  }
  /**
   * Component for centering its children with specified layout and alignment.
   *
   * @template Data - The data type for any additional props.
   *
   * @param props - The component props.
   * @param props.children - The children to be centered.
   * @param props.className - The class name for the component.
   * @param props.style - The inline styles for the component.
   * @param [props.innerPadding='0px'] - The padding applied to the inner content of the component.
   * @param [props.columns] - The number of columns for the layout.
   * @param [props.phoneColumns] - The number of columns for phone layout.
   * @param [props.tabletColumns] - The number of columns for tablet layout.
   * @param [props.desktopColumns] - The number of columns for desktop layout.
   * @param [props.columnsOverride] - Overrides the default number of columns.
   * @param [props.isBaselineAlign] - Specifies whether the children should be aligned based on the baseline.
   * @param [props.sx] - Additional styles for the component using sx prop from @mui/system.
   * @param [props.fieldRightMargin='0'] - The margin applied to the right of each field within the component.
   * @param [props.fieldBottomMargin='0'] - The margin applied to the bottom of each field within the component.
   *
   * @returns - The centered content.
   */
  export const CenterLayout: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      innerPadding: padding,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      columnsOverride,
      isBaselineAlign,
      sx,
      fieldRightMargin,
      fieldBottomMargin,
    }: ICenterLayoutProps<Data, any> & ICenterLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      innerPadding: padding,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      columnsOverride,
      isBaselineAlign,
      sx,
      fieldRightMargin,
      fieldBottomMargin,
    }: ICenterLayoutProps<Data, any> & ICenterLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/StretchLayout" {
  import * as React from "react";
  import IField from "react-declarative/model/IField";
  import IEntity from "react-declarative/model/IEntity";
  import IAnything from "react-declarative/model/IAnything";
  import { IWrappedLayout, PickProp } from "react-declarative/model/IManaged";
  export interface IStretchLayoutProps<Data = IAnything, Payload = IAnything>
    extends IWrappedLayout<Data> {
    innerPadding?: PickProp<IField<Data, Payload>, "innerPadding">;
    className?: PickProp<IField<Data, Payload>, "className">;
    style?: PickProp<IField<Data, Payload>, "style">;
  }
  interface IStretchLayoutPrivate<Data = IAnything> extends IEntity<Data> {
    children?: React.ReactNode;
  }
  /**
   * A layout wrapper component that stretches its children horizontally and vertically.
   *
   * @template Data - The type of the data passed to the layout.
   *
   * @param props - The properties passed to the component.
   * @param props.children - The children components to be rendered inside the layout.
   * @param [props.className] - The additional CSS class name(s) to apply to the root element.
   * @param [props.style] - The inline styles to apply to the root element.
   * @param [props.innerPadding='0px'] - The padding to apply to the container element.
   *
   * @returns - The rendered StretchLayout component.
   */
  export const StretchLayout: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      innerPadding: padding,
    }: IStretchLayoutProps<Data, any> &
      IStretchLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      innerPadding: padding,
    }: IStretchLayoutProps<Data, any> &
      IStretchLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/GroupLayout" {
  import * as React from "react";
  import { IGroupProps } from "react-declarative/components/common/Group";
  import IAnything from "react-declarative/model/IAnything";
  export interface IGroupLayoutProps<Data = IAnything, Payload = IAnything>
    extends IGroupProps<Data, Payload> {}
  interface IGroupLayoutPrivate {
    isBaselineAlign: boolean;
    children?: React.ReactNode;
  }
  /**
   * Represents a layout component used for grouping and organizing child components.
   *
   * @template Data - The type of data passed to the component.
   * @param props - The props to configure the GroupLayout component.
   * @param props.columns - The number of columns for the component.
   * @param props.columnsOverride - The number of columns to override for specific items.
   * @param props.sx - The sx value to pass to the component.
   * @param props.phoneColumns - The number of phone columns for the component.
   * @param props.tabletColumns - The number of tablet columns for the component.
   * @param props.desktopColumns - The number of desktop columns for the component.
   * @param props.isBaselineAlign - Indicates whether the items should be baseline aligned.
   * @param [props.fieldRightMargin='0'] - The right margin value for fields.
   * @param [props.fieldBottomMargin='0'] - The bottom margin value for fields.
   * @param [props.style] - The inline style object for the component.
   * @param [props.className] - The CSS class for the component.
   * @param props.children - The child components to be rendered.
   * @returns The rendered GroupLayout component.
   */
  export const GroupLayout: {
    <Data extends unknown = any>({
      columns,
      columnsOverride,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isBaselineAlign,
      fieldRightMargin,
      fieldBottomMargin,
      style,
      className,
      children,
    }: IGroupLayoutProps<Data, any> & IGroupLayoutPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      columns,
      columnsOverride,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isBaselineAlign,
      fieldRightMargin,
      fieldBottomMargin,
      style,
      className,
      children,
    }: IGroupLayoutProps<Data, any> & IGroupLayoutPrivate): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/OutlineLayout" {
  import * as React from "react";
  import { IGroupProps } from "react-declarative/components/common/Group";
  import { IOutlineProps } from "react-declarative/components/common/Outline";
  import { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IOutlineLayoutProps<Data = IAnything, Payload = IAnything>
    extends IOutlineProps<Data, Payload>,
      IGroupProps<Data, Payload> {
    innerPadding?: PickProp<IField<Data, Payload>, "innerPadding">;
  }
  interface IOutlineLayoutPrivate {
    isBaselineAlign: boolean;
    children?: React.ReactNode;
  }
  /**
   * Represents the OutlineLayout component.
   *
   * @param props - The props for the OutlineLayout component.
   * @param props.columns - The number of columns.
   * @param props.columnsOverride - The number of columns to override.
   * @param props.sx - The custom inline styles.
   * @param props.phoneColumns - The number of columns for phone devices.
   * @param props.tabletColumns - The number of columns for tablet devices.
   * @param props.desktopColumns - The number of columns for desktop devices.
   * @param props.style - The custom styles.
   * @param props.className - The class name.
   * @param props.children - The child components.
   * @param props.isBaselineAlign - Indicates whether the items should be baseline aligned.
   * @param props.fieldRightMargin - The right margin for fields.
   * @param props.fieldBottomMargin - The bottom margin for fields.
   * @param props.innerPadding - The inner padding.
   * @returns The OutlineLayout component.
   */
  export const OutlineLayout: {
    <Data extends unknown = any>({
      columns,
      columnsOverride,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      style,
      className,
      children,
      isBaselineAlign,
      fieldRightMargin,
      fieldBottomMargin,
      innerPadding: padding,
    }: IOutlineLayoutProps<Data, any> & IOutlineLayoutPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      columns,
      columnsOverride,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      style,
      className,
      children,
      isBaselineAlign,
      fieldRightMargin,
      fieldBottomMargin,
      innerPadding: padding,
    }: IOutlineLayoutProps<Data, any> & IOutlineLayoutPrivate): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/PaperLayout" {
  import * as React from "react";
  import { IGroupProps } from "react-declarative/components/common/Group";
  import { IPaperProps } from "react-declarative/components/common/Paper";
  import { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IPaperLayoutProps<Data = IAnything, Payload = IAnything>
    extends IPaperProps<Data, Payload>,
      IGroupProps<Data, Payload> {
    innerPadding?: PickProp<IField<Data, Payload>, "innerPadding">;
    outlinePaper?: PickProp<IField<Data, Payload>, "outlinePaper">;
    transparentPaper?: PickProp<IField<Data, Payload>, "transparentPaper">;
  }
  interface IPaperLayoutPrivate {
    isBaselineAlign: boolean;
    children?: React.ReactNode;
  }
  /**
   * Renders a paper layout component.
   *
   * @template Data - The type of data to be used.
   * @param props - The props object.
   * @param [props.columns] - The number of columns to display.
   * @param [props.columnsOverride] - The number of columns to override the default value.
   * @param [props.phoneColumns] - The number of columns to display on phones.
   * @param [props.tabletColumns] - The number of columns to display on tablets.
   * @param [props.desktopColumns] - The number of columns to display on desktops.
   * @param [props.style] - The CSS styles to be applied.
   * @param [props.className] - The class name to be applied.
   * @param [props.children] - The children components to be rendered.
   * @param [props.isBaselineAlign] - Determines if items should be aligned to the baseline.
   * @param [props.fieldRightMargin="0"] - The right margin of each field.
   * @param [props.fieldBottomMargin="0"] - The bottom margin of each field.
   * @param [props.innerPadding="18px"] - The inner padding of the paper layout.
   * @param [props.outlinePaper=false] - Determines if the paper should have an outline.
   * @param [props.transparentPaper=false] - Determines if the paper should be transparent.
   * @returns - The rendered paper layout component.
   */
  export const PaperLayout: {
    <Data extends unknown = any>({
      columns,
      columnsOverride,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      style,
      className,
      children,
      isBaselineAlign,
      fieldRightMargin,
      fieldBottomMargin,
      innerPadding: padding,
      outlinePaper,
      transparentPaper,
    }: IPaperLayoutProps<Data, any> & IPaperLayoutPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      columns,
      columnsOverride,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      style,
      className,
      children,
      isBaselineAlign,
      fieldRightMargin,
      fieldBottomMargin,
      innerPadding: padding,
      outlinePaper,
      transparentPaper,
    }: IPaperLayoutProps<Data, any> & IPaperLayoutPrivate): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/ExpansionLayout" {
  import * as React from "react";
  import { IExpansionProps } from "react-declarative/components/common/Expansion";
  import { IGroupProps } from "react-declarative/components/common/Group";
  import IAnything from "react-declarative/model/IAnything";
  export interface IExpansionLayoutProps<Data = IAnything, Payload = IAnything>
    extends IExpansionProps<Data, Payload>,
      IGroupProps<Data, Payload> {}
  interface IExpansionLayoutPrivate {
    isBaselineAlign: boolean;
    outlinePaper: boolean;
    transparentPaper: boolean;
    children?: React.ReactNode;
  }
  /**
   * Renders an ExpansionLayout component.
   *
   * @template Data - The type of data to be used.
   *
   * @param props - The props for the ExpansionLayout component.
   * @param props.columns - The number of columns for the Group component.
   * @param props.columnsOverride - The number of columns to override the Group's columns prop.
   * @param props.sx - The style for the ExpansionLayout component.
   * @param props.phoneColumns - The number of columns to use on phone devices.
   * @param props.tabletColumns - The number of columns to use on tablet devices.
   * @param props.desktopColumns - The number of columns to use on desktop devices.
   * @param props.isBaselineAlign - A boolean value indicating whether to align items to the baseline.
   * @param [props.fieldRightMargin='0'] - The right margin for the fields within the Group component.
   * @param [props.fieldBottomMargin='0'] - The bottom margin for the fields within the Group component.
   * @param props.style - The style object for the ExpansionLayout component.
   * @param props.className - The class name for the ExpansionLayout component.
   * @param props.children - The children for the ExpansionLayout component.
   * @param props.title - The title for the Expansion component.
   * @param props.description - The description for the Expansion component.
   * @param props.expansionOpened - A boolean value indicating whether the Expansion should be opened.
   * @param props.outlinePaper - A boolean value indicating whether to show an outline paper style for the Expansion.
   * @param props.transparentPaper - A boolean value indicating whether to show a transparent paper style for the Expansion.
   *
   * @returns - The rendered ExpansionLayout component.
   */
  export const ExpansionLayout: {
    <Data extends unknown = any>({
      columns,
      columnsOverride,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isBaselineAlign,
      fieldRightMargin,
      fieldBottomMargin,
      style,
      className,
      children,
      title,
      description,
      expansionOpened,
      outlinePaper,
      transparentPaper,
    }: IExpansionLayoutProps<Data, any> & IExpansionLayoutPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      columns,
      columnsOverride,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isBaselineAlign,
      fieldRightMargin,
      fieldBottomMargin,
      style,
      className,
      children,
      title,
      description,
      expansionOpened,
      outlinePaper,
      transparentPaper,
    }: IExpansionLayoutProps<Data, any> & IExpansionLayoutPrivate): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/HeroLayout" {
  import * as React from "react";
  import IField from "react-declarative/model/IField";
  import IAnything from "react-declarative/model/IAnything";
  import { IWrappedLayout, PickProp } from "react-declarative/model/IManaged";
  import Group, {
    IGroupProps,
  } from "react-declarative/components/common/Group";
  import IEntity from "react-declarative/model/IEntity";
  interface IHeroTop<Data = IAnything, Payload = IAnything> {
    top?: PickProp<IField<Data, Payload>, "top">;
    phoneTop?: PickProp<IField<Data, Payload>, "phoneTop">;
    tabletTop?: PickProp<IField<Data, Payload>, "tabletTop">;
    desktopTop?: PickProp<IField<Data, Payload>, "desktopTop">;
  }
  interface IHeroLeft<Data = IAnything, Payload = IAnything> {
    left?: PickProp<IField<Data, Payload>, "left">;
    phoneLeft?: PickProp<IField<Data, Payload>, "phoneLeft">;
    tabletLeft?: PickProp<IField<Data, Payload>, "tabletLeft">;
    desktopLeft?: PickProp<IField<Data, Payload>, "desktopLeft">;
  }
  interface IHeroRight<Data = IAnything, Payload = IAnything> {
    right?: PickProp<IField<Data, Payload>, "right">;
    phoneRight?: PickProp<IField<Data, Payload>, "phoneRight">;
    tabletRight?: PickProp<IField<Data, Payload>, "tabletRight">;
    desktopRight?: PickProp<IField<Data, Payload>, "desktopRight">;
  }
  interface IHeroBottom<Data = IAnything, Payload = IAnything> {
    bottom?: PickProp<IField<Data, Payload>, "bottom">;
    phoneBottom?: PickProp<IField<Data, Payload>, "phoneBottom">;
    tabletBottom?: PickProp<IField<Data, Payload>, "tabletBottom">;
    desktopBottom?: PickProp<IField<Data, Payload>, "desktopBottom">;
  }
  interface IHeroHeight<Data = IAnything, Payload = IAnything> {
    height?: PickProp<IField<Data, Payload>, "height">;
    phoneHeight?: PickProp<IField<Data, Payload>, "phoneHeight">;
    tabletHeight?: PickProp<IField<Data, Payload>, "tabletHeight">;
    desktopHeight?: PickProp<IField<Data, Payload>, "desktopHeight">;
  }
  interface IHeroMinHeight<Data = IAnything, Payload = IAnything> {
    minHeight?: PickProp<IField<Data, Payload>, "minHeight">;
    phoneMinHeight?: PickProp<IField<Data, Payload>, "phoneMinHeight">;
    tabletMinHeight?: PickProp<IField<Data, Payload>, "tabletMinHeight">;
    desktopMinHeight?: PickProp<IField<Data, Payload>, "desktopMinHeight">;
  }
  interface IHeroMaxHeight<Data = IAnything, Payload = IAnything> {
    maxHeight?: PickProp<IField<Data, Payload>, "maxHeight">;
    phoneMaxHeight?: PickProp<IField<Data, Payload>, "phoneMaxHeight">;
    tabletMaxHeight?: PickProp<IField<Data, Payload>, "tabletMaxHeight">;
    desktopMaxHeight?: PickProp<IField<Data, Payload>, "desktopMaxHeight">;
  }
  interface IHeroWidth<Data = IAnything, Payload = IAnything> {
    width?: PickProp<IField<Data, Payload>, "width">;
    phoneWidth?: PickProp<IField<Data, Payload>, "phoneWidth">;
    tabletWidth?: PickProp<IField<Data, Payload>, "tabletWidth">;
    desktopWidth?: PickProp<IField<Data, Payload>, "desktopWidth">;
  }
  interface IHeroMinWidth<Data = IAnything, Payload = IAnything> {
    minWidth?: PickProp<IField<Data, Payload>, "minWidth">;
    phoneMinWidth?: PickProp<IField<Data, Payload>, "phoneMinWidth">;
    tabletMinWidth?: PickProp<IField<Data, Payload>, "tabletMinWidth">;
    desktopMinWidth?: PickProp<IField<Data, Payload>, "desktopMinWidth">;
  }
  interface IHeroMaxWidth<Data = IAnything, Payload = IAnything> {
    maxWidth?: PickProp<IField<Data, Payload>, "maxWidth">;
    phoneMaxWidth?: PickProp<IField<Data, Payload>, "phoneMaxWidth">;
    tabletMaxWidth?: PickProp<IField<Data, Payload>, "tabletMaxWidth">;
    desktopMaxWidth?: PickProp<IField<Data, Payload>, "desktopMaxWidth">;
  }
  interface IHeroStyle<Data = IAnything, Payload = IAnything> {
    heroOuterStyle?: PickProp<IField<Data, Payload>, "heroOuterStyle">;
    heroOuterPhoneStyle?: PickProp<
      IField<Data, Payload>,
      "heroOuterPhoneStyle"
    >;
    heroOuterTabletStyle?: PickProp<
      IField<Data, Payload>,
      "heroOuterTabletStyle"
    >;
    heroOuterDesktopStyle?: PickProp<
      IField<Data, Payload>,
      "heroOuterDesktopStyle"
    >;
    heroInnerStyle?: PickProp<IField<Data, Payload>, "heroInnerStyle">;
    heroInnerPhoneStyle?: PickProp<
      IField<Data, Payload>,
      "heroInnerPhoneStyle"
    >;
    heroInnerTabletStyle?: PickProp<
      IField<Data, Payload>,
      "heroInnerTabletStyle"
    >;
    heroInnerDesktopStyle?: PickProp<
      IField<Data, Payload>,
      "heroInnerDesktopStyle"
    >;
  }
  type IHeroRegistry<D = IAnything> = IHeroTop<D> &
    IHeroLeft<D> &
    IHeroRight<D> &
    IHeroBottom<D> &
    IHeroWidth<D> &
    IHeroMinWidth<D> &
    IHeroMaxWidth<D> &
    IHeroHeight<D> &
    IHeroMinHeight<D> &
    IHeroMaxHeight<D> &
    IHeroStyle<D>;
  type Group<Data = IAnything> = Omit<
    IGroupProps<Data>,
    keyof {
      fieldRightMargin: never;
      fieldBottomMargin: never;
    }
  >;
  export interface IHeroLayoutProps<Data = IAnything, Payload = IAnything>
    extends IHeroRegistry<Data>,
      Group<Data>,
      IWrappedLayout<Data> {
    className?: PickProp<IField<Data, Payload>, "className">;
    style?: PickProp<IField<Data, Payload>, "style">;
    object: PickProp<IEntity<Data>, "object">;
  }
  interface IHeroLayoutPrivate {
    isBaselineAlign: boolean;
    children?: React.ReactNode;
  }
  /**
   * HeroLayout is a component that renders a hero section with flexible layout options.
   *
   * @template Data - The type of data for the hero layout.
   *
   * @param props - The props for the HeroLayout component.
   * @param props.children - The children of the hero layout.
   * @param props.className - The custom CSS class name for the hero layout.
   * @param props.style - The custom inline style for the hero layout.
   * @param props.object - The data object for the hero layout.
   * @param props.columns - The number of columns to display in the hero layout.
   * @param props.columnsOverride - An array of numbers to override the number of columns at different breakpoints.
   * @param props.isBaselineAlign - Determines whether the items in the hero layout should be baseline aligned.
   * @param props.sx - The custom style object for the hero layout.
   * @param props.phoneColumns - The number of columns to display on phones.
   * @param props.tabletColumns - The number of columns to display on tablets.
   * @param props.desktopColumns - The number of columns to display on desktops.
   * @param props.otherProps - Other props to pass to the hero layout component.
   *
   * @returns - The rendered hero layout component.
   */
  export const HeroLayout: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      object,
      columns,
      columnsOverride,
      isBaselineAlign,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      ...otherProps
    }: IHeroLayoutProps<Data, any> & IHeroLayoutPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      object,
      columns,
      columnsOverride,
      isBaselineAlign,
      sx,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      ...otherProps
    }: IHeroLayoutProps<Data, any> & IHeroLayoutPrivate): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/ConditionLayout" {
  import * as React from "react";
  import IField from "react-declarative/model/IField";
  import IEntity from "react-declarative/model/IEntity";
  import IAnything from "react-declarative/model/IAnything";
  import { IWrappedLayout, PickProp } from "react-declarative/model/IManaged";
  export interface IConditionLayoutProps<Data = IAnything, Payload = IAnything>
    extends IWrappedLayout<Data, Payload> {
    condition?: PickProp<IField<Data, Payload>, "condition">;
    shouldCondition?: PickProp<IField<Data, Payload>, "shouldCondition">;
    conditionLoading?: PickProp<IField<Data, Payload>, "conditionLoading">;
    conditionElse?: PickProp<IField<Data, Payload>, "conditionElse">;
  }
  interface IConditionLayoutPrivate<Data = IAnything> extends IEntity<Data> {
    children?: React.ReactNode;
    fallback: PickProp<IEntity<Data>, "fallback">;
    ready: PickProp<IEntity<Data>, "ready">;
    object: PickProp<IEntity<Data>, "object">;
  }
  /**
   * Represents a layout component that conditionally renders its children based on given conditions.
   *
   * @template Data The type of data passed to the layout.
   * @param props - The props object containing the following properties:
   * @param props.children - The children elements to be rendered inside the layout.
   * @param [props.condition=() => true] - The condition function that determines when the children should be rendered.
   * @param [props.shouldCondition=() => false] - The function to determine if the condition should be re-evaluated.
   * @param [props.conditionLoading] - The component to be rendered while condition is evaluating/loading.
   * @param [props.conditionElse] - The component to be rendered if condition evaluates to false.
   * @param [props.fallback=(e: Error) => { throw e; }] - The function to handle errors during condition evaluation.
   * @param [props.object] - The data object to be passed to the condition and children components.
   * @returns The rendered layout component.
   */
  export const ConditionLayout: {
    <Data extends unknown = any>({
      children,
      condition,
      shouldCondition,
      conditionLoading: ConditionLoading,
      conditionElse: ConditionElse,
      fallback,
      object,
    }: IConditionLayoutProps<Data, any> &
      IConditionLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      children,
      condition,
      shouldCondition,
      conditionLoading: ConditionLoading,
      conditionElse: ConditionElse,
      fallback,
      object,
    }: IConditionLayoutProps<Data, any> &
      IConditionLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/layouts/CustomLayout" {
  import * as React from "react";
  import IField from "react-declarative/model/IField";
  import IEntity from "react-declarative/model/IEntity";
  import IAnything from "react-declarative/model/IAnything";
  import { IWrappedLayout, PickProp } from "react-declarative/model/IManaged";
  export interface ICustomLayoutProps<Data = IAnything, Payload = IAnything>
    extends IWrappedLayout<Data, Payload> {
    className?: PickProp<IField<Data, Payload>, "className">;
    style?: PickProp<IField<Data, Payload>, "style">;
    sx?: PickProp<IField<Data, Payload>, "sx">;
    customLayout?: PickProp<IField<Data, Payload>, "customLayout">;
    hidden?: PickProp<IField<Data, Payload>, "hidden">;
  }
  interface ICustomLayoutPrivate<Data = IAnything> extends IEntity<Data> {
    children?: React.ReactNode;
  }
  /**
   * Represents a custom layout component.
   *
   * @template Data - The type of data to be rendered in the layout.
   *
   * @param props - The component props.
   * @param props.children - The children to be rendered inside the layout.
   * @param props.className - The CSS class name for the layout.
   * @param props.style - The inline styles for the layout.
   * @param props.sx - The theme styling object for the layout (sx prop from Theme-UI).
   * @param props.customLayout - The custom layout component to be used (defaults to Fragment).
   * @param props.otherProps - Other props specific to the custom layout.
   *
   * @returns The rendered custom layout component.
   */
  export const CustomLayout: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      sx,
      customLayout: CustomLayout,
      ...otherProps
    }: ICustomLayoutProps<Data, any> & ICustomLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      children,
      className,
      style,
      sx,
      customLayout: CustomLayout,
      ...otherProps
    }: ICustomLayoutProps<Data, any> & ICustomLayoutPrivate<Data>): JSX.Element;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/CheckboxField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface ICheckboxFieldProps<Data = IAnything, Payload = IAnything> {
    title?: PickProp<IField<Data, Payload>, "title">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
  }
  export interface ICheckboxFieldPrivate<Data = IAnything> {
    value: PickProp<IManaged<Data>, "value">;
    onChange: PickProp<IManaged<Data>, "onChange">;
  }
  /**
   * Represents a checkbox field component.
   *
   * @param param - The properties for the checkbox field.
   * @returns - The checkbox field component.
   */
  export const CheckboxField: {
    ({
      disabled,
      value,
      readonly,
      onChange,
      title,
    }: ICheckboxFieldProps & ICheckboxFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/FileField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IFileFieldProps<Data = IAnything, Payload = IAnything> {
    description?: PickProp<IField<Data, Payload>, "description">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    title?: PickProp<IField<Data, Payload>, "title">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    fileAccept?: PickProp<IField<Data, Payload>, "fileAccept">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    inputRef?: PickProp<IField<Data, Payload>, "inputRef">;
    labelShrink?: PickProp<IField<Data>, "labelShrink">;
    upload?: PickProp<IField<Data, Payload>, "upload">;
    view?: PickProp<IField<Data, Payload>, "view">;
  }
  export interface IFileFieldPrivate<Data = IAnything> {
    onChange: PickProp<IManaged<Data>, "onChange">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
    value: PickProp<IManaged<Data>, "value">;
    loading: PickProp<IManaged<Data>, "loading">;
    disabled: PickProp<IManaged<Data>, "disabled">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    name: PickProp<IManaged<Data>, "name">;
  }
  /**
   * FileField component.
   * @param props - The props object.
   * @param props.invalid - Specifies if the field is invalid.
   * @param props.value - The value of the field.
   * @param props.disabled - Specifies if the field is disabled.
   * @param props.readonly - Specifies if the field is read-only.
   * @param props.description - The description of the field.
   * @param props.outlined - Specifies if the field is outlined.
   * @param props.title - The title of the field.
   * @param props.placeholder - The placeholder text of the field.
   * @param props.incorrect - Specifies if the field has an incorrect value.
   * @param props.upload - Specifies if the field is for uploading files.
   * @param props.view - Specifies if the field is for viewing files.
   * @param props.dirty - Specifies if the field has been changed.
   * @param props.labelShrink - Specifies if the field's label should shrink.
   * @param props.loading - Specifies if the field is in a loading state.
   * @param props.onChange - The change event handler function.
   * @param props.inputRef - The ref object for the input element.
   * @param props.name - The name of the field.
   * @return - The rendered File component with the given props.
   */
  export const FileField: {
    ({
      invalid,
      value,
      disabled,
      readonly,
      description,
      outlined,
      title,
      placeholder,
      incorrect,
      upload,
      view,
      dirty,
      labelShrink,
      loading,
      onChange,
      inputRef,
      name,
    }: IFileFieldProps & IFileFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/ComboField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IComboFieldProps<Data = IAnything, Payload = IAnything> {
    description?: PickProp<IField<Data, Payload>, "description">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    itemList?: PickProp<IField<Data, Payload>, "itemList">;
    freeSolo?: PickProp<IField<Data, Payload>, "freeSolo">;
    noDeselect?: PickProp<IField<Data, Payload>, "noDeselect">;
    virtualListBox?: PickProp<IField<Data, Payload>, "virtualListBox">;
    watchItemList?: PickProp<IField<Data, Payload>, "watchItemList">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    labelShrink?: PickProp<IField<Data>, "labelShrink">;
    title?: PickProp<IField<Data, Payload>, "title">;
    tr?: PickProp<IField<Data, Payload>, "tr">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
  }
  export interface IComboFieldPrivate<Data = IAnything> {
    value: PickProp<IManaged<Data>, "value">;
    readonly: PickProp<IManaged<Data>, "readonly">;
    onChange: PickProp<IManaged<Data>, "onChange">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
    withContextMenu: PickProp<IManaged<Data>, "withContextMenu">;
  }
  /**
   * ComboField component.
   *
   * @param props - The props object.
   * @param props.value - The value of the ComboField.
   * @param [props.disabled=false] - Specifies whether the ComboField is disabled.
   * @param [props.readonly=false] - Specifies whether the ComboField is readonly.
   * @param [props.description=""] - The description of the ComboField.
   * @param [props.placeholder=""] - The placeholder text of the ComboField.
   * @param [props.outlined=false] - Specifies whether the ComboField should be outlined.
   * @param [props.itemList=[]] - The list of items for the ComboField.
   * @param [props.freeSolo=false] - Specifies whether the ComboField allows free text input.
   * @param [props.virtualListBox=true] - Specifies whether the ComboField should use a virtual list box for rendering.
   * @param [props.watchItemList] - Specifies whether to watch changes in the itemList prop.
   * @param [props.noDeselect] - Specifies whether the ComboField should prevent deselecting options.
   * @param [props.labelShrink] - Specifies whether the label of the ComboField should shrink when there is a value.
   * @param [props.title=""] - The title of the ComboField.
   * @param [props.dirty] - Specifies whether the ComboField has been modified.
   * @param [props.invalid] - Specifies whether the ComboField is invalid.
   * @param [props.incorrect] - Specifies whether the ComboField has incorrect data.
   * @param [props.withContextMenu] - Specifies whether the ComboField should display a context menu.
   * @param [props.tr=(s) => s.toString()] - The translation function for the ComboField.
   * @param [props.onChange] - The event handler function for onChange event.
   *
   * @returns The ComboField component.
   */
  export const ComboField: {
    ({
      value,
      disabled,
      readonly,
      description,
      placeholder,
      outlined,
      itemList,
      freeSolo,
      virtualListBox,
      watchItemList,
      noDeselect,
      labelShrink,
      title,
      dirty,
      invalid,
      incorrect,
      withContextMenu,
      tr,
      onChange,
    }: IComboFieldProps & IComboFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/ComponentField" {
  import IField from "react-declarative/model/IField";
  import IAnything from "react-declarative/model/IAnything";
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  export interface IComponentFieldProps<Data = IAnything, Payload = IAnything> {
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    element?: PickProp<IField<Data, Payload>, "element">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    className?: PickProp<IField<Data, Payload>, "className">;
    watchOneContext?: PickProp<IField<Data, Payload>, "watchOneContext">;
    style?: PickProp<IField<Data, Payload>, "style">;
    sx?: PickProp<IField<Data, Payload>, "sx">;
  }
  interface IComponentFieldPrivate<Data = IAnything> {
    object: PickProp<IManaged<Data>, "object">;
    disabled: PickProp<IManaged<Data>, "disabled">;
    readonly: PickProp<IManaged<Data>, "readonly">;
    outlinePaper?: PickProp<IField<Data>, "outlinePaper">;
    transparentPaper?: PickProp<IField<Data>, "transparentPaper">;
  }
  /**
   * Represents a component field.
   * @param props - The component props.
   * @param props.disabled - Indicates if the field is disabled.
   * @param props.readonly - Indicates if the field is readonly.
   * @param props.watchOneContext - Indicates if the field should watch the One context.
   * @param props.element - The element to render, default is Fragment.
   * @param props.outlinePaper - Indicates if the field should have an outline paper.
   * @param props.transparentPaper - Indicates if the field should have a transparent paper.
   * @param props.object - A generic object to pass to the field.
   * @param props.otherProps - Other props to pass to the field.
   * @param - The rendered field component.
   */
  export const ComponentField: {
    ({
      disabled,
      readonly,
      watchOneContext,
      element: Element,
      outlinePaper,
      transparentPaper,
      object,
      ...otherProps
    }: IComponentFieldProps & IComponentFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/ItemsField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IItemsFieldProps<Data = IAnything, Payload = IAnything> {
    description?: PickProp<IField<Data, Payload>, "description">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    itemList?: PickProp<IField<Data, Payload>, "itemList">;
    freeSolo?: PickProp<IField<Data, Payload>, "freeSolo">;
    virtualListBox?: PickProp<IField<Data, Payload>, "virtualListBox">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    noDeselect?: PickProp<IField<Data, Payload>, "noDeselect">;
    title?: PickProp<IField<Data, Payload>, "title">;
    tr?: PickProp<IField<Data, Payload>, "tr">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    labelShrink?: PickProp<IField<Data>, "labelShrink">;
    watchItemList?: PickProp<IField<Data>, "watchItemList">;
  }
  export interface IItemsFieldPrivate<Data = IAnything> {
    onChange: PickProp<IManaged<Data>, "onChange">;
    value: PickProp<IManaged<Data>, "value">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
    withContextMenu: PickProp<IManaged<Data>, "withContextMenu">;
  }
  /**
   * Renders a component for displaying a list of items.
   *
   * @param props - The properties for the ItemsField component.
   * @param props.value - The current value of the component.
   * @param [props.disabled=false] - Whether the component is disabled or not.
   * @param [props.readonly=false] - Whether the component is readonly or not.
   * @param [props.description] - The description for the component.
   * @param [props.placeholder] - The placeholder text for the component.
   * @param [props.outlined=false] - Whether the component is outlined or not.
   * @param [props.itemList=[]] - The list of items to display.
   * @param [props.freeSolo=false] - Whether the component allows free text input or not.
   * @param [props.virtualListBox=true] - Whether to use a virtual list box for efficiency or not.
   * @param [props.labelShrink] - Whether the label should shrink when there is a value or not.
   * @param [props.watchItemList] - A function to watch the itemList property for changes.
   * @param [props.noDeselect] - Whether to prevent deselecting an item or not.
   * @param [props.dirty] - Whether the component's value is dirty or not.
   * @param [props.invalid] - Whether the component's value is invalid or not.
   * @param [props.incorrect] - Whether the component's value is incorrect or not.
   * @param [props.title] - The title for the component.
   * @param [props.withContextMenu] - Whether to show a context menu for the component or not.
   * @param [props.tr=(s) => s.toString()] - A translation function for translating strings.
   * @param [props.onChange] - A callback function called when the component's value changes.
   *
   * @returns - The rendered Items component.
   */
  export const ItemsField: {
    ({
      value,
      disabled,
      readonly,
      description,
      placeholder,
      outlined,
      itemList,
      freeSolo,
      virtualListBox,
      labelShrink,
      watchItemList,
      noDeselect,
      dirty,
      invalid,
      incorrect,
      title,
      withContextMenu,
      tr,
      onChange,
    }: IItemsFieldProps & IItemsFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/LineField" {
  import { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface ILineFieldProps<Data = IAnything, Payload = IAnything> {
    title?: PickProp<IField<Data, Payload>, "title">;
    lineTransparent?: PickProp<IField<Data, Payload>, "lineTransparent">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
  }
  /**
   * Renders a Line component with optional transparency and a title.
   *
   * @param props - The props for the LineField component.
   * @param props.title - The title for the Line component.
   * @param props.lineTransparent - Whether the Line component should be transparent.
   * @returns The rendered Line component.
   */
  export const LineField: {
    ({ title, lineTransparent }: ILineFieldProps): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/ProgressField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IField from "react-declarative/model/IField";
  import IAnything from "react-declarative/model/IAnything";
  export interface IProgressFieldProps<Data = IAnything, Payload = IAnything> {
    maxPercent?: PickProp<IField<Data, Payload>, "maxPercent">;
    showPercentLabel?: PickProp<IField<Data, Payload>, "showPercentLabel">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
  }
  export interface IProgressFieldPrivate<Data = IAnything> {
    value: PickProp<IManaged<Data>, "value">;
  }
  /**
   * Represents a progress field component.
   *
   * @typedef {Object} ProgressField
   * @property {number} maxPercent - The maximum percentage value for the progress field.
   * @property {boolean} showPercentLabel - Determines if the percentage label should be displayed.
   * @property {number} value - The current value of the progress field.
   *
   * @param props - The props object containing the properties required for the progress field.
   * @param props.maxPercent - The maximum percentage value for the progress field.
   * @param props.showPercentLabel - Determines if the percentage label should be displayed.
   * @param props.value - The current value of the progress field.
   *
   * @returns The rendered progress field component.
   */
  export const ProgressField: {
    ({
      maxPercent,
      showPercentLabel,
      value,
    }: IProgressFieldProps & IProgressFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/RadioField" {
  import IField from "react-declarative/model/IField";
  import IAnything from "react-declarative/model/IAnything";
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  export interface IRadioFieldProps<Data = IAnything, Payload = IAnything> {
    title?: PickProp<IField<Data, Payload>, "title">;
    radioValue?: PickProp<IField<Data, Payload>, "radioValue">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
  }
  export interface IRadioFieldPrivate<Data = IAnything> {
    value: PickProp<IManaged<Data>, "value">;
    onChange: PickProp<IManaged<Data>, "onChange">;
    name?: PickProp<IManaged<Data>, "name">;
  }
  /**
   * RadioField component renders a radio input field with a label.
   *
   * @param props - The props object containing the following properties:
   * @param props.disabled - Determines whether the radio input field is disabled or not.
   * @param props.value - The value for the radio input field.
   * @param props.onChange - The callback function to be called when the value of the radio input field changes.
   * @param props.title - The title/label for the radio input field.
   * @param props.radioValue - The value associated with the radio input field.
   * @param [props.name=''] - The name attribute for the radio input field.
   *
   * @returns - The rendered RadioField component.
   */
  export const RadioField: {
    ({
      disabled,
      value,
      onChange,
      title,
      radioValue,
      name,
    }: IRadioFieldProps & IRadioFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/RatingField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IRatingFieldProps<Data = IAnything, Payload = IAnything> {
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
  }
  export interface IRatingFieldPrivate<Data = IAnything> {
    name?: string;
    value: PickProp<IManaged<Data>, "value">;
    readonly: PickProp<IManaged<Data>, "readonly">;
    onChange: PickProp<IManaged<Data>, "onChange">;
  }
  /**
   * Renders a Rating field component.
   *
   * @param props - The properties for the Rating field.
   * @param props.value - The current value of the Rating field.
   * @param props.disabled - Indicates if the Rating field is disabled.
   * @param props.readonly - Indicates if the Rating field is read-only.
   * @param props.name - The name of the Rating field.
   * @param props.onChange - The function to be called when the value of the Rating field changes.
   *
   * @returns The rendered Rating field component.
   */
  export const RatingField: {
    ({
      value,
      disabled,
      readonly,
      name,
      onChange,
    }: IRatingFieldProps & IRatingFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/SliderField" {
  import IField from "react-declarative/model/IField";
  import IAnything from "react-declarative/model/IAnything";
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  export interface ISliderFieldProps<Data = IAnything, Payload = IAnything> {
    stepSlider?: PickProp<IField<Data, Payload>, "stepSlider">;
    maxSlider?: PickProp<IField<Data, Payload>, "maxSlider">;
    minSlider?: PickProp<IField<Data, Payload>, "minSlider">;
    labelFormatSlider?: PickProp<IField<Data, Payload>, "labelFormatSlider">;
    leadingIconRipple?: PickProp<IField<Data, Payload>, "leadingIconRipple">;
    trailingIconRipple?: PickProp<IField<Data, Payload>, "trailingIconRipple">;
    leadingIcon?: PickProp<IField<Data, Payload>, "leadingIcon">;
    trailingIcon?: PickProp<IField<Data, Payload>, "trailingIcon">;
    leadingIconClick?: PickProp<IField<Data, Payload>, "leadingIconClick">;
    trailingIconClick?: PickProp<IField<Data, Payload>, "trailingIconClick">;
    sliderThumbColor?: PickProp<IField<Data, Payload>, "sliderThumbColor">;
    sliderTrackColor?: PickProp<IField<Data, Payload>, "sliderTrackColor">;
    sliderRailColor?: PickProp<IField<Data, Payload>, "sliderRailColor">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
  }
  export interface ISliderFieldPrivate<Data = IAnything> {
    value: PickProp<IManaged<Data>, "value">;
    onChange: PickProp<IManaged<Data>, "onChange">;
  }
  /**
   * Represents a slider field component.
   * @typedef SliderField
   * @param value - The current value of the slider.
   * @param onChange - A callback function to handle slider value changes.
   * @param leadingIconRipple - Determines if the leading icon should have a ripple effect when clicked.
   * @param trailingIconRipple - Determines if the trailing icon should have a ripple effect when clicked.
   * @param leadingIcon - The icon component to be displayed at the start of the slider.
   * @param trailingIcon - The icon component to be displayed at the end of the slider.
   * @param leadingIconClick - A callback function to handle click events on the leading icon.
   * @param trailingIconClick - A callback function to handle click events on the trailing icon.
   * @param stepSlider - The step value for the slider.
   * @param maxSlider - The maximum value for the slider.
   * @param minSlider - The minimum value for the slider.
   * @param labelFormatSlider - The format string for the label text of the slider.
   * @returns A Slider component with the specified properties.
   */
  export const SliderField: {
    ({
      value,
      onChange,
      leadingIconRipple,
      trailingIconRipple,
      leadingIcon,
      trailingIcon,
      leadingIconClick,
      trailingIconClick,
      stepSlider,
      maxSlider,
      minSlider,
      labelFormatSlider,
    }: ISliderFieldProps & ISliderFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/SwitchField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface ISwitchFieldProps<Data = IAnything, Payload = IAnything> {
    title?: PickProp<IField<Data, Payload>, "title">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    switchNoColor?: PickProp<IField<Data, Payload>, "switchNoColor">;
    switchActiveLabel?: PickProp<IField<Data, Payload>, "switchActiveLabel">;
  }
  export interface ISwitchFieldPrivate<Data = IAnything> {
    onChange: PickProp<IManaged<Data>, "onChange">;
    value: PickProp<IManaged<Data>, "value">;
  }
  /**
   * Renders a Switch field component.
   *
   * @param props - The properties for the Switch field.
   * @param props.disabled - Indicates whether the Switch field is disabled.
   * @param props.value - The current value of the Switch field.
   * @param props.readonly - Indicates whether the Switch field is read-only.
   * @param props.onChange - The event handler for when the Switch field is changed.
   * @param props.switchNoColor - Indicates whether the Switch field has no color.
   * @param props.switchActiveLabel - The label for the active state of the Switch field.
   * @param props.title - The title of the Switch field.
   *
   * @returns A Switch component wrapped in a SwitchField component.
   */
  export const SwitchField: {
    ({
      disabled,
      value,
      readonly,
      onChange,
      switchNoColor,
      switchActiveLabel,
      title,
    }: ISwitchFieldProps & ISwitchFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/TextField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface ITextFieldProps<Data = IAnything, Payload = IAnything> {
    inputType?: PickProp<IField<Data, Payload>, "inputType">;
    inputMode?: PickProp<IField<Data, Payload>, "inputMode">;
    inputPattern?: PickProp<IField<Data, Payload>, "inputPattern">;
    inputAutocomplete?: PickProp<IField<Data, Payload>, "inputAutocomplete">;
    inputFormatter?: PickProp<IField<Data, Payload>, "inputFormatter">;
    inputFormatterSymbol?: PickProp<
      IField<Data, Payload>,
      "inputFormatterSymbol"
    >;
    inputFormatterAllowed?: PickProp<
      IField<Data, Payload>,
      "inputFormatterAllowed"
    >;
    inputFormatterTemplate?: PickProp<
      IField<Data, Payload>,
      "inputFormatterTemplate"
    >;
    inputFormatterReplace?: PickProp<
      IField<Data, Payload>,
      "inputFormatterReplace"
    >;
    description?: PickProp<IField<Data, Payload>, "description">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    title?: PickProp<IField<Data, Payload>, "title">;
    leadingIconRipple?: PickProp<IField<Data, Payload>, "leadingIconRipple">;
    trailingIconRipple?: PickProp<IField<Data, Payload>, "trailingIconRipple">;
    leadingIcon?: PickProp<IField<Data, Payload>, "leadingIcon">;
    trailingIcon?: PickProp<IField<Data, Payload>, "trailingIcon">;
    leadingIconClick?: PickProp<IField<Data, Payload>, "leadingIconClick">;
    trailingIconClick?: PickProp<IField<Data, Payload>, "trailingIconClick">;
    inputRows?: PickProp<IField<Data, Payload>, "inputRows">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    autoFocus?: PickProp<IField<Data, Payload>, "autoFocus">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    inputRef?: PickProp<IField<Data, Payload>, "inputRef">;
    labelShrink?: PickProp<IField<Data, Payload>, "labelShrink">;
  }
  export interface ITextFieldPrivate<Data = IAnything> {
    onChange: PickProp<IManaged<Data>, "onChange">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
    value: PickProp<IManaged<Data>, "value">;
    loading: PickProp<IManaged<Data>, "loading">;
    disabled: PickProp<IManaged<Data>, "disabled">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    name: PickProp<IManaged<Data>, "name">;
  }
  /**
   * TextField component
   *
   * @typedef {Object} TextField
   * @param invalid - Indicates if the input value is invalid
   * @param incorrect - Indicates if the input value is incorrect
   * @param value - The current value of the input field
   * @param disabled - Indicates if the input field is disabled
   * @param readonly - Indicates if the input field is read-only
   * @param inputType - The type of input field (default: "text")
   * @param description - The description or helper text for the input field
   * @param outlined - Indicates if the input field is outlined
   * @param labelShrink - Indicates if the label should shrink when focused
   * @param title - The title or tooltip for the input field
   * @param leadingIconRipple - Indicates if clicking the leading icon should trigger a ripple effect
   * @param trailingIconRipple - Indicates if clicking the trailing icon should trigger a ripple effect
   * @param leadingIcon - The icon component to display at the start of the input field
   * @param trailingIcon - The icon component to display at the end of the input field
   * @param leadingIconClick - The function to call when the leading icon is clicked
   * @param trailingIconClick - The function to call when the trailing icon is clicked
   * @param inputRows - The number of rows for a textarea input field (default: 1)
   * @param placeholder - The placeholder text for the input field
   * @param inputAutocomplete - The autocomplete behavior for the input field (default: "off")
   * @param inputFormatter - A function used to format the input value
   * @param inputFormatterSymbol - The symbol or character used in the input formatter
   * @param inputFormatterAllowed - The list of allowed characters in the input formatter
   * @param inputFormatterTemplate - A template string used in the input formatter
   * @param dirty - Indicates if the input value has been modified
   * @param loading - Indicates if the input field is in a loading state
   * @param onChange - The function to call when the input value changes
   * @param autoFocus - Indicates if the input field should be automatically focused
   * @param inputRef - The reference to the input element
   * @param name - The name of the input field
   * @returns - The TextField component
   */
  export const TextField: {
    ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      inputType,
      description,
      outlined,
      labelShrink,
      title,
      leadingIconRipple,
      trailingIconRipple,
      leadingIcon,
      trailingIcon,
      leadingIconClick,
      trailingIconClick,
      inputRows,
      placeholder,
      inputAutocomplete,
      inputFormatter,
      inputFormatterSymbol,
      inputFormatterAllowed,
      inputFormatterTemplate,
      dirty,
      loading,
      onChange,
      autoFocus,
      inputRef,
      name,
    }: ITextFieldProps & ITextFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/DateField" {
  import IField from "react-declarative/model/IField";
  import IAnything from "react-declarative/model/IAnything";
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  export interface IDateFieldProps<Data = IAnything, Payload = IAnything> {
    title?: PickProp<IField<Data, Payload>, "title">;
    description?: PickProp<IField<Data, Payload>, "description">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    labelShrink?: PickProp<IField<Data>, "labelShrink">;
    autoFocus?: PickProp<IField<Data, Payload>, "autoFocus">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    inputRef?: PickProp<IField<Data, Payload>, "inputRef">;
  }
  export interface IDateFieldPrivate<Data = IAnything> {
    onChange: PickProp<IManaged<Data>, "onChange">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
    value: PickProp<IManaged<Data>, "value">;
    disabled: PickProp<IManaged<Data>, "disabled">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    name: PickProp<IManaged<Data>, "name">;
    withContextMenu: PickProp<IManaged<Data>, "withContextMenu">;
  }
  /**
   * Represents a DateField component.
   *
   * @typedef {Object} DateField
   * @param invalid - Specifies whether the date field is invalid.
   * @param incorrect - Specifies whether the date field has an incorrect value.
   * @param value - The value of the date field.
   * @param disabled - Specifies whether the date field is disabled.
   * @param readonly - Specifies whether the date field is readonly.
   * @param description - The description of the date field.
   * @param outlined - Specifies whether the date field is outlined.
   * @param title - The title of the date field.
   * @param placeholder - The placeholder of the date field.
   * @param labelShrink - Specifies whether the label should shrink when the date field value is not empty.
   * @param dirty - Specifies whether the date field has been modified.
   * @param autoFocus - Specifies whether the date field should automatically receive focus.
   * @param inputRef - A ref for the date field input element.
   * @param onChange - The event handler for when the value of the date field changes.
   * @param withContextMenu - Specifies whether the date field should have a context menu.
   * @param name - The name of the date field.
   * @return - The Date component with the specified props.
   */
  export const DateField: {
    ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      description,
      outlined,
      title,
      placeholder,
      labelShrink,
      dirty,
      autoFocus,
      inputRef,
      onChange,
      withContextMenu,
      name,
    }: IDateFieldPrivate & IDateFieldProps): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/TimeField" {
  import IField from "react-declarative/model/IField";
  import IAnything from "react-declarative/model/IAnything";
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  export interface ITimeFieldProps<Data = IAnything, Payload = IAnything> {
    title?: PickProp<IField<Data, Payload>, "title">;
    description?: PickProp<IField<Data, Payload>, "description">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    autoFocus?: PickProp<IField<Data, Payload>, "autoFocus">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    inputRef?: PickProp<IField<Data, Payload>, "inputRef">;
    labelShrink?: PickProp<IField<Data>, "labelShrink">;
  }
  export interface ITimeFieldPrivate<Data = IAnything> {
    onChange: PickProp<IManaged<Data>, "onChange">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
    value: PickProp<IManaged<Data>, "value">;
    disabled: PickProp<IManaged<Data>, "disabled">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    name: PickProp<IManaged<Data>, "name">;
    withContextMenu: PickProp<IManaged<Data>, "withContextMenu">;
  }
  /**
   * Represents a TimeField component.
   * @param TimeField - The TimeField component.
   * @param invalid - Determines if the field is invalid.
   * @param incorrect - Determines if the field has an incorrect value.
   * @param value - The current value of the field.
   * @param disabled - Determines if the field is disabled.
   * @param readonly - Determines if the field is readonly.
   * @param labelShrink - Determines if the label should shrink when the field has a value.
   * @param description - The description of the field.
   * @param outlined - Determines if the field should be outlined.
   * @param title - The title attribute of the field.
   * @param placeholder - The placeholder attribute of the field.
   * @param dirty - Determines if the field's value has changed.
   * @param autoFocus - Determines if the field should be focused automatically.
   * @param inputRef - The ref of the input element.
   * @param onChange - The event handler for the change event.
   * @param name - The name attribute of the field.
   * @param withContextMenu - Determines if the field should have a context menu.
   * @returns - The rendered TimeField component.
   */
  export const TimeField: {
    ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      labelShrink,
      description,
      outlined,
      title,
      placeholder,
      dirty,
      autoFocus,
      inputRef,
      onChange,
      name,
      withContextMenu,
    }: ITimeFieldPrivate & ITimeFieldProps): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/CompleteField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface ICompleteFieldProps<Data = IAnything, Payload = IAnything> {
    inputType?: PickProp<IField<Data, Payload>, "inputType">;
    inputMode?: PickProp<IField<Data, Payload>, "inputMode">;
    inputPattern?: PickProp<IField<Data, Payload>, "inputPattern">;
    inputAutocomplete?: PickProp<IField<Data, Payload>, "inputAutocomplete">;
    description?: PickProp<IField<Data, Payload>, "description">;
    labelShrink?: PickProp<IField<Data>, "labelShrink">;
    keepRaw?: PickProp<IField<Data, Payload>, "keepRaw">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    title?: PickProp<IField<Data, Payload>, "title">;
    tip?: PickProp<IField<Data, Payload>, "tip">;
    tipSelect?: PickProp<IField<Data, Payload>, "tipSelect">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    autoFocus?: PickProp<IField<Data, Payload>, "autoFocus">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    inputRef?: PickProp<IField<Data, Payload>, "inputRef">;
    inputFormatter?: PickProp<IField<Data, Payload>, "inputFormatter">;
    inputFormatterSymbol?: PickProp<
      IField<Data, Payload>,
      "inputFormatterSymbol"
    >;
    inputFormatterAllowed?: PickProp<
      IField<Data, Payload>,
      "inputFormatterAllowed"
    >;
    inputFormatterTemplate?: PickProp<
      IField<Data, Payload>,
      "inputFormatterTemplate"
    >;
    inputFormatterReplace?: PickProp<
      IField<Data, Payload>,
      "inputFormatterReplace"
    >;
  }
  export interface ICompleteFieldPrivate<Data = IAnything> {
    onChange: PickProp<IManaged<Data>, "onChange">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
    value: PickProp<IManaged<Data>, "value">;
    loading: PickProp<IManaged<Data>, "loading">;
    disabled: PickProp<IManaged<Data>, "disabled">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    name: PickProp<IManaged<Data>, "name">;
    withContextMenu: PickProp<IManaged<Data>, "withContextMenu">;
  }
  /**
   * A wrapper component for the Complete component.
   *
   * @param props - The props for the CompleteField component.
   * @param props.invalid - Determines whether the field is in an invalid state.
   * @param props.incorrect - Determines whether the field has incorrect data.
   * @param props.value - The current value of the field.
   * @param props.disabled - Determines whether the field is disabled.
   * @param props.readonly - Determines whether the field is read-only.
   * @param props.inputType - The type of the input field.
   * @param props.description - The description of the field.
   * @param props.outlined - Determines whether the field is outlined.
   * @param props.keepRaw - Determines whether the raw value should be kept.
   * @param props.title - The title of the field.
   * @param props.labelShrink - The label shrink value.
   * @param props.tip - The tip for the field.
   * @param props.tipSelect - The tip for the select field.
   * @param props.placeholder - The placeholder text for the input field.
   * @param props.inputAutocomplete - The autocomplete attribute for the input field.
   * @param props.dirty - The dirty value of the field.
   * @param props.loading - Determines whether the field is in a loading state.
   * @param props.onChange - The callback function for the field value change event.
   * @param props.autoFocus - Determines whether the field should be auto-focused.
   * @param props.inputRef - The reference to the input field.
   * @param props.name - The name of the field.
   * @param props.inputFormatter - The input formatter for the field.
   * @param props.inputFormatterAllowed - The allowed values for the input formatter.
   * @param props.inputFormatterReplace - The values to replace in the input formatter.
   * @param props.inputFormatterSymbol - The symbol for the input formatter.
   * @param props.inputFormatterTemplate - The template for the input formatter.
   * @param props.withContextMenu - Determines whether the field should have a context menu.
   * @returns The rendered CompleteField component.
   */
  export const CompleteField: {
    ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      inputType,
      description,
      outlined,
      keepRaw,
      title,
      labelShrink,
      tip,
      tipSelect,
      placeholder,
      inputAutocomplete,
      dirty,
      loading,
      onChange,
      autoFocus,
      inputRef,
      name,
      inputFormatter,
      inputFormatterAllowed,
      inputFormatterReplace,
      inputFormatterSymbol,
      inputFormatterTemplate,
      withContextMenu,
    }: ICompleteFieldProps & ICompleteFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/TypographyField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface ITypographyFieldProps<
    Data = IAnything,
    Payload = IAnything,
  > {
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    typoVariant?: PickProp<IField<Data, Payload>, "typoVariant">;
    className?: PickProp<IField<Data, Payload>, "className">;
    style?: PickProp<IField<Data, Payload>, "style">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
  }
  export interface ITypographyFieldPrivate<Data = IAnything> {
    value: PickProp<IManaged<Data>, "value">;
  }
  /**
   * Renders a typography field component.
   *
   * @param props - The props for the typography field.
   * @param [props.value=''] - The value of the typography field.
   * @param [props.placeholder=''] - The placeholder text for the typography field.
   * @param [props.typoVariant='body1'] - The typography variant for the field.
   * @param [props.style] - Additional styles to be applied to the field.
   * @returns - The rendered typography field component.
   */
  export const TypographyField: {
    ({
      value,
      placeholder,
      typoVariant,
      style,
    }: ITypographyFieldProps & ITypographyFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/ChooseField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IChooseFieldProps<Data = IAnything, Payload = IAnything> {
    description?: PickProp<IField<Data, Payload>, "description">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    title?: PickProp<IField<Data, Payload>, "title">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    labelShrink?: PickProp<IField<Data>, "labelShrink">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    inputRef?: PickProp<IField<Data, Payload>, "inputRef">;
    choose?: PickProp<IField<Data, Payload>, "choose">;
    tr?: PickProp<IField<Data, Payload>, "tr">;
  }
  export interface IChooseFieldPrivate<Data = IAnything> {
    onChange: PickProp<IManaged<Data>, "onChange">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
    value: PickProp<IManaged<Data>, "value">;
    loading: PickProp<IManaged<Data>, "loading">;
    disabled: PickProp<IManaged<Data>, "disabled">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    name: PickProp<IManaged<Data>, "name">;
    withContextMenu: PickProp<IManaged<Data>, "withContextMenu">;
  }
  /**
   * Represents the ChooseField component.
   * @param options - The options for the ChooseField component.
   * @returns The rendered ChooseField component.
   */
  export const ChooseField: {
    ({
      invalid,
      value,
      disabled,
      readonly,
      incorrect,
      description,
      outlined,
      title,
      placeholder,
      labelShrink,
      choose,
      tr,
      dirty,
      loading,
      onChange,
      inputRef,
      name,
      withContextMenu,
    }: IChooseFieldProps & IChooseFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/YesNoField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IYesNoFieldProps<Data = IAnything, Payload = IAnything> {
    description?: PickProp<IField<Data, Payload>, "description">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    noDeselect?: PickProp<IField<Data, Payload>, "noDeselect">;
    virtualListBox?: PickProp<IField<Data, Payload>, "virtualListBox">;
    tr?: PickProp<IField<Data, Payload>, "tr">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    labelShrink?: PickProp<IField<Data>, "labelShrink">;
    title?: PickProp<IField<Data, Payload>, "title">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
  }
  export interface IYesNoFieldPrivate<Data = IAnything> {
    value: PickProp<IManaged<Data>, "value">;
    readonly: PickProp<IManaged<Data>, "readonly">;
    onChange: PickProp<IManaged<Data>, "onChange">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
  }
  /**
   * Represents a Yes/No field component.
   *
   * @param props - The properties of the Yes/No field component.
   * @param props.value - The current value of the field.
   * @param props.disabled - Determines if the field is disabled.
   * @param props.readonly - Determines if the field is read-only.
   * @param props.description - The description or tooltip text for the field.
   * @param props.placeholder - The text to display when the field is empty.
   * @param props.outlined - Determines if the field is outlined.
   * @param props.virtualListBox - Determines if the field uses a virtual list box.
   * @param props.noDeselect - Determines if the field allows deselecting the value.
   * @param props.labelShrink - Determines if the label should shrink when the field has a value.
   * @param props.title - The title attribute of the field.
   * @param props.tr - The translate map function
   * @param props.dirty - Determines if the field has been modified.
   * @param props.invalid - Determines if the field is in an invalid state.
   * @param props.incorrect - Determines if the field has an incorrect value.
   * @param props.onChange - The function to call when the field's value changes.
   *
   * @returns - The Yes/No field component.
   */
  export const YesNoField: {
    ({
      value,
      disabled,
      readonly,
      description,
      placeholder,
      outlined,
      virtualListBox,
      noDeselect,
      labelShrink,
      title,
      tr,
      dirty,
      invalid,
      incorrect,
      onChange,
    }: IYesNoFieldProps & IYesNoFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/InitField" {
  import * as React from "react";
  export interface IInitFieldProps {}
  /**
   * Represents a React functional component which initializes a property on a target object.
   * Does not render itself in real
   * @component
   */
  export const InitField: React.FC<IInitFieldProps>;
  export default InitField;
}

declare module "react-declarative/components/One/fields/DictField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IDictFieldProps<Data = IAnything, Payload = IAnything> {
    dictLimit?: PickProp<IField<Data, Payload>, "dictLimit">;
    dictDelay?: PickProp<IField<Data, Payload>, "dictDelay">;
    dictSearch?: PickProp<IField<Data, Payload>, "dictSearch">;
    dictOnAppend?: PickProp<IField<Data, Payload>, "dictOnAppend">;
    dictOnText?: PickProp<IField<Data, Payload>, "dictOnText">;
    dictOnItem?: PickProp<IField<Data, Payload>, "dictOnItem">;
    dictValue?: PickProp<IField<Data, Payload>, "dictValue">;
    dictSearchText?: PickProp<IField<Data, Payload>, "dictSearchText">;
    dictSearchItem?: PickProp<IField<Data, Payload>, "dictSearchItem">;
    dictCreateButton?: PickProp<IField<Data, Payload>, "dictCreateButton">;
    inputType?: PickProp<IField<Data, Payload>, "inputType">;
    inputMode?: PickProp<IField<Data, Payload>, "inputMode">;
    inputPattern?: PickProp<IField<Data, Payload>, "inputPattern">;
    inputAutocomplete?: PickProp<IField<Data, Payload>, "inputAutocomplete">;
    inputFormatter?: PickProp<IField<Data, Payload>, "inputFormatter">;
    inputFormatterSymbol?: PickProp<
      IField<Data, Payload>,
      "inputFormatterSymbol"
    >;
    inputFormatterAllowed?: PickProp<
      IField<Data, Payload>,
      "inputFormatterAllowed"
    >;
    inputFormatterTemplate?: PickProp<
      IField<Data, Payload>,
      "inputFormatterTemplate"
    >;
    inputFormatterReplace?: PickProp<
      IField<Data, Payload>,
      "inputFormatterReplace"
    >;
    description?: PickProp<IField<Data, Payload>, "description">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    title?: PickProp<IField<Data, Payload>, "title">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    groupRef?: PickProp<IField<Data, Payload>, "groupRef">;
    inputRef?: PickProp<IField<Data, Payload>, "inputRef">;
    leadingIconRipple?: PickProp<IField<Data, Payload>, "leadingIconRipple">;
    trailingIconRipple?: PickProp<IField<Data, Payload>, "trailingIconRipple">;
    leadingIcon?: PickProp<IField<Data, Payload>, "leadingIcon">;
    trailingIcon?: PickProp<IField<Data, Payload>, "trailingIcon">;
    leadingIconClick?: PickProp<IField<Data, Payload>, "leadingIconClick">;
    trailingIconClick?: PickProp<IField<Data, Payload>, "trailingIconClick">;
  }
  export interface IDictFieldPrivate<Data = IAnything> {
    onChange: PickProp<IManaged<Data>, "onChange">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
    value: PickProp<IManaged<Data>, "value">;
    loading: PickProp<IManaged<Data>, "loading">;
    disabled: PickProp<IManaged<Data>, "disabled">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    name: PickProp<IManaged<Data>, "name">;
  }
  /**
   * A component for rendering a DictField.
   *
   * @param DictFieldProps - The props for the DictField component.
   * @param DictFieldProps.invalid - Indicates whether the field is invalid.
   * @param DictFieldProps.incorrect - Indicates whether the field is incorrect.
   * @param DictFieldProps.value - The value of the field.
   * @param DictFieldProps.disabled - Indicates whether the field is disabled.
   * @param DictFieldProps.readonly - Indicates whether the field is readonly.
   * @param DictFieldProps.inputType - The type of the input.
   * @param DictFieldProps.inputAutocomplete - The autocomplete mode for the input.
   * @param DictFieldProps.description - The description for the field.
   * @param DictFieldProps.outlined - Indicates whether the field is outlined.
   * @param DictFieldProps.title - The title for the field.
   * @param DictFieldProps.placeholder - The placeholder text for the field.
   * @param DictFieldProps.dirty - Indicates whether the field has been modified.
   * @param DictFieldProps.loading - Indicates whether the field is loading.
   * @param DictFieldProps.onChange - The event handler for field value change.
   * @param DictFieldProps.dictLimit - The limit of the dictionary items.
   * @param DictFieldProps.dictDelay - The delay for dictionary search.
   * @param DictFieldProps.dictSearch - The search query for the dictionary.
   * @param DictFieldProps.dictOnAppend - The event handler for dictionary item append.
   * @param DictFieldProps.dictOnText - The event handler for dictionary text change.
   * @param DictFieldProps.dictOnItem - The event handler for dictionary item selection.
   * @param DictFieldProps.dictValue - The dictionary item value.
   * @param DictFieldProps.dictSearchText - The search query for dictionary text.
   * @param DictFieldProps.dictSearchItem - The dictionary item for search.
   * @param DictFieldProps.dictCreateButton - Indicates whether to provide a create button for dictionary items.
   * @param DictFieldProps.inputMode - The input mode for the field.
   * @param DictFieldProps.inputPattern - The input pattern for the field.
   * @param DictFieldProps.groupRef - The reference to the group containing the field.
   * @param DictFieldProps.inputRef - The reference to the input field.
   * @param DictFieldProps.inputFormatter - The input formatter function.
   * @param DictFieldProps.inputFormatterAllowed - The allowed characters for input formatting.
   * @param DictFieldProps.inputFormatterReplace - The replacement text for input formatting.
   * @param DictFieldProps.inputFormatterSymbol - The symbol used for input formatting.
   * @param DictFieldProps.inputFormatterTemplate - The template for input formatting.
   * @param DictFieldProps.name - The name of the field.
   * @param DictFieldProps.leadingIcon - The leading icon for the field.
   * @param DictFieldProps.trailingIcon - The trailing icon for the field.
   * @param DictFieldProps.leadingIconClick - The event handler for click on the leading icon.
   * @param DictFieldProps.trailingIconClick - The event handler for click on the trailing icon.
   * @param DictFieldProps.leadingIconRipple - Indicates whether the leading icon should have ripple effect.
   * @param DictFieldProps.trailingIconRipple - Indicates whether the trailing icon should have ripple effect.
   *
   * @return - The rendered DictField component.
   */
  export const DictField: {
    ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      inputType,
      inputAutocomplete,
      description,
      outlined,
      title,
      placeholder,
      dirty,
      loading,
      onChange,
      dictLimit,
      dictDelay,
      dictSearch,
      dictOnAppend,
      dictOnText,
      dictOnItem,
      dictValue,
      dictSearchText,
      dictSearchItem,
      dictCreateButton,
      inputMode,
      inputPattern,
      groupRef,
      inputRef,
      inputFormatter,
      inputFormatterAllowed,
      inputFormatterReplace,
      inputFormatterSymbol,
      inputFormatterTemplate,
      name,
      leadingIcon,
      trailingIcon,
      leadingIconClick,
      trailingIconClick,
      leadingIconRipple,
      trailingIconRipple,
    }: IDictFieldProps & IDictFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/components/One/fields/TreeField" {
  import IManaged, { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface ITreeFieldProps<Data = IAnything, Payload = IAnything> {
    description?: PickProp<IField<Data, Payload>, "description">;
    outlined?: PickProp<IField<Data, Payload>, "outlined">;
    title?: PickProp<IField<Data, Payload>, "title">;
    placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
    readonly?: PickProp<IField<Data, Payload>, "readonly">;
    disabled?: PickProp<IField<Data, Payload>, "disabled">;
    itemTree?: PickProp<IField<Data, Payload>, "itemTree">;
  }
  export interface ITreeFieldPrivate<Data = IAnything> {
    onChange: PickProp<IManaged<Data>, "onChange">;
    invalid: PickProp<IManaged<Data>, "invalid">;
    incorrect: PickProp<IManaged<Data>, "incorrect">;
    value: PickProp<IManaged<Data>, "value">;
    loading: PickProp<IManaged<Data>, "loading">;
    disabled: PickProp<IManaged<Data>, "disabled">;
    dirty: PickProp<IManaged<Data>, "dirty">;
    name: PickProp<IManaged<Data>, "name">;
    withContextMenu: PickProp<IManaged<Data>, "withContextMenu">;
  }
  /**
   * Renders a TreeField component.
   *
   * @param props - The props object containing the necessary data for rendering the TreeField.
   * @param props.invalid - Determines if the TreeField is invalid.
   * @param props.value - The value of the TreeField.
   * @param props.disabled - Determines if the TreeField is disabled.
   * @param props.readonly - Determines if the TreeField is readonly.
   * @param props.incorrect - Determines if the TreeField is incorrect.
   * @param props.description - The description text for the TreeField.
   * @param props.outlined - Determines if the TreeField should have an outlined style.
   * @param props.title - The title text for the TreeField.
   * @param props.placeholder - The placeholder text for the TreeField.
   * @param props.itemTree - The itemTree object for rendering the Tree.
   * @param props.dirty - Determines if the TreeField has been modified.
   * @param props.loading - Determines if the TreeField is currently loading.
   * @param props.onChange - The callback function to be called when the value of the TreeField changes.
   * @param props.name - The name attribute of the TreeField.
   * @param props.withContextMenu - Determines if the TreeField should have a context menu.
   *
   * @returns The rendered TreeField component.
   */
  export const TreeField: {
    ({
      invalid,
      value,
      disabled,
      readonly,
      incorrect,
      description,
      outlined,
      title,
      placeholder,
      itemTree,
      dirty,
      loading,
      onChange,
      name,
      withContextMenu,
    }: ITreeFieldProps & ITreeFieldPrivate): JSX.Element;
    displayName: string;
  };
  const _default: {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default _default;
}

declare module "react-declarative/model/ComponentFieldInstance" {
  import type IField from "react-declarative/model/IField";
  import type IManaged from "react-declarative/model/IManaged";
  /**
   * Represents parameters for a component field element callback.
   * @template Data - The data type of the field.
   * @template Payload - The payload type of the field.
   */
  export type ComponentFieldInstance<Data = any, Payload = any> = Data & {
    onChange: (data: Partial<Data>) => void;
    _fieldData: Data;
    _fieldParams: IField;
    context: Record<string, any>;
    outlinePaper: boolean;
    transparentPaper: boolean;
    payload: Payload;
    disabled: boolean;
    readonly: boolean;
    features: string[];
  };
  export interface IDebug<Data = any, Payload = any> {
    originalComponent: React.ComponentType<IManaged<Data>>;
    managedProps: IManaged<Data>;
    payload: Payload;
  }
  export type ComponentFieldInstanceProps = Omit<
    ComponentFieldInstance,
    keyof {
      context: never;
    }
  > & {
    Element: React.ComponentType<ComponentFieldInstance>;
  };
  export default ComponentFieldInstance;
}

declare module "react-declarative/model/ISize" {
  import IAnything from "react-declarative/model/IAnything";
  /**
   * Represents a size with height and width dimensions.
   *
   * @interface
   */
  export interface ISize {
    height: number;
    width: number;
  }
  export type ISizeCallback<Data = IAnything> = (
    data: Data,
    size: ISize,
    ref: HTMLDivElement,
  ) => string;
  export default ISize;
}

declare module "react-declarative/components/SearchView/model/ISearchItem" {
  import IAnything from "react-declarative/model/IAnything";
  export interface ISearchItem<T extends IAnything = IAnything> {
    label: string;
    value: string;
    data?: T;
  }
  export default ISearchItem;
}

declare module "react-declarative/components/SearchView/model/ISearchViewProps" {
  import { SxProps } from "@mui/material";
  import { TextFieldProps } from "@mui/material/TextField";
  import ISearchItem from "react-declarative/components/SearchView/model/ISearchItem";
  import IAnything from "react-declarative/model/IAnything";
  import ISearchItemProps from "react-declarative/components/SearchView/model/ISearchItemProps";
  import ISearchInputProps from "react-declarative/components/SearchView/model/ISearchInputProps";
  import ICreateButtonProps from "react-declarative/components/SearchView/model/ICreateButtonProps";
  import TSubject from "react-declarative/model/TSubject";
  export type ISearchViewProps<
    Data extends IAnything = IAnything,
    Payload = IAnything,
  > = Omit<
    TextFieldProps,
    keyof {
      value: never;
      onChange: never;
      className: never;
      style: never;
      sx: never;
      ref: never;
      onClick: never;
      disabled: never;
      InputProps: never;
      inputProps: never;
      fullWidth: never;
    }
  > & {
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    changeSubject?: TSubject<void>;
    fullWidth?: boolean;
    SearchItem?: React.ComponentType<ISearchItemProps<Data>>;
    SearchInput?: React.ComponentType<ISearchInputProps>;
    CreateButton?: React.ComponentType<ICreateButtonProps>;
    payload?: Payload | (() => Payload);
    value?:
      | ISearchItem<Data>
      | null
      | (() => null | ISearchItem<Data> | Promise<null | ISearchItem<Data>>);
    searchText?: string | null | (() => null | string | Promise<null | string>);
    startAdornment?: React.ReactNode;
    endAdornment?: React.ReactNode;
    type?: keyof {
      date: string;
      email: string;
      number: string;
      search: never;
      tel: never;
      text: never;
      time: never;
      url: never;
      week: never;
    };
    mode?: keyof {
      none: never;
      text: never;
      tel: never;
      url: never;
      email: never;
      numeric: never;
      decimal: never;
      search: never;
    };
    pattern?: string;
    handler: (
      search: string,
      limit: number,
      offset: number,
      initial: boolean,
      currentRows: ISearchItem<Data>[],
    ) => ISearchItem<Data>[] | Promise<ISearchItem<Data>[]>;
    onChange?: (value: ISearchItem<Data> | null) => void;
    onCreate?: (value: string) => void;
    onTextChange?: (value: string) => void;
    disabled?: boolean;
    label?: string;
    placeholder?: string;
    delay?: number;
    limit?: number;
    variant?: "standard" | "outlined" | "filled";
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (error: Error) => void;
    throwError?: boolean;
  };
  export default ISearchViewProps;
}

declare module "react-declarative/model/IFieldMenu" {
  import IAnything from "react-declarative/model/IAnything";
  import { Value } from "react-declarative/model/IField";
  import IOption from "react-declarative/model/IOption";
  /**
   * Represents a field menu.
   * @template Data - The type of data for the menu.
   * @template Payload - The type of payload for the menu.
   */
  export interface IFieldMenu<Data = IAnything, Payload = IAnything>
    extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isVisible?: (data: Data, payload: Payload) => Promise<boolean> | boolean;
    isDisabled?: (data: Data, payload: Payload) => Promise<boolean> | boolean;
    onClick?: (
      data: Data,
      payload: Payload,
      onValueChange: (value: Value) => void,
      onChange: (data: Data) => void,
    ) => void;
  }
  export default IFieldMenu;
}

declare module "react-declarative/model/ITreeNode" {
  import INode from "react-declarative/components/TreeView/model/INode";
  /**
   * Represents a Node in a tree structure.
   */
  export interface ITreeNode extends INode {}
  export default ITreeNode;
}

declare module "react-declarative/components/List/api/useLastPagination" {
  import {
    ListHandler,
    ListHandlerChips,
    ListHandlerSortModel,
    ListHandlerPagination,
  } from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  interface IResult<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    data: IState<FilterData, RowData>;
    handler: ListHandler<FilterData, RowData>;
  }
  export interface IState<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    filterData: FilterData;
    pagination: ListHandlerPagination;
    sort: ListHandlerSortModel<RowData>;
    chipData: ListHandlerChips<RowData>;
    search: string;
  }
  /**
   * Custom hook for managing pagination state and handling pagination logic.
   *
   * @template FilterData - The type of filter data.
   * @template RowData - The type of row data.
   *
   * @param upperHandler - The handler function responsible for fetching data.
   *
   * @returns - An object containing the handler function and the state data.
   */
  export const useLastPagination: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
  >(
    upperHandler: ListHandler<FilterData, RowData, any>,
  ) => IResult;
  export default useLastPagination;
}

declare module "react-declarative/components/List/List" {
  import IRowData from "react-declarative/model/IRowData";
  import IField from "react-declarative/model/IField";
  import IListProps from "react-declarative/model/IListProps";
  import TypedField from "react-declarative/model/TypedField";
  /**
      * Represents a List component which renders a collection of entries.
      *
      * @template FilterData - The type of the filter data.
      * @template RowData - The type of the row data.
      * @template Payload - The type of the payload.
      * @template Field - The type of the field.
      *
      * @param handler - Function to handle the list data. Default value is an empty array.
      * @param payload - The payload for the list data. Default value is an empty object.
      * @param fallback - Function to handle errors. Default value is a console.error call.
      * @param limit - The limit of items per page. Default value is DEFAULT_LIMIT.
      * @param page - The current page number. Default value is DEFAULT_PAGE.
      * @param isChooser - Flag to indicate if the list is for choosing items. Default value is false.
      * @param filters - The array of filters for the list. Default value is an empty array.
      * @param columns - The array of columns for the list. Default value is an empty array.
      * @param actions - The array of actions for the list. Default value is an empty array.
      * @param onRows - Callback function for when list rows change. Default value is a null function.
      * @param onSortModelChange - Callback function for when sort model changes. Default value is a null function.
      * @param onFilterChange - Callback function for when filter changes. Default value is a null function.
      * @param onChipsChange - Callback function for when chip changes. Default value is a null function.
      * @param onSearchChange - Callback function for when search query changes. Default value is a null function.
      * @param onPageChange - Callback function for when page changes. Default value is a null function.
      * @param onLimitChange - Callback function for when limit changes. Default value is a null function.
      * @param labelDisplayedRows - Function to display the label for displayed rows.
      * @param selectionLabel - Function to display the label for selected items.
      * @param filterData - The additional data for filters. Default value is an empty object.
      * @param withToggledFilters - Flag to indicate if filters are toggled. Default value is false.
      * @param withCustomFilters - Flag to indicate if custom filters are used. Default value is false.
      * @param fetchDebounce - The debounce time for fetching the list data. Default value is LIST_FETCH_DEBOUNCE.
      * @param sortModel - The array of sort model for the list. Default value is an empty array.
      * @param chips - The array of chips for the list. Default value is an empty array.
      * @param chipData - The additional data for chips. Default value is an empty object.
      * @param search - The search query for the list. Default value is an empty string.
      * @param slots - The slots for the list. Default value is an empty object.
    
      * @returns - The List component.
      */
  export const List: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
    Payload extends unknown = any,
    Field extends IField<any, any> = IField<FilterData, Payload>,
  >(
    props: IListProps<FilterData, RowData, Payload, Field>,
  ) => JSX.Element;
  export const ListTyped: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
  >(
    props: IListProps<
      FilterData,
      RowData,
      TypedField<FilterData, any>,
      IField<FilterData, TypedField<FilterData, any>>
    >,
  ) => JSX.Element;
  export default List;
}

declare module "react-declarative/components/List/slots" {
  export * from "react-declarative/components/List/slots/ActionAddSlot";
  export * from "react-declarative/components/List/slots/ActionFabSlot";
  export * from "react-declarative/components/List/slots/ActionMenuSlot";
  export * from "react-declarative/components/List/slots/BodyRowSlot";
  export * from "react-declarative/components/List/slots/CheckboxCellSlot";
  export * from "react-declarative/components/List/slots/CommonCellSlot";
  export * from "react-declarative/components/List/slots/HeadRowSlot";
  export * from "react-declarative/components/List/slots/ActionListSlot";
  export * from "react-declarative/components/List/slots/ChipListSlot";
  export * from "react-declarative/components/List/slots/FilterListSlot";
  export * from "react-declarative/components/List/slots/OperationListSlot";
  export * from "react-declarative/components/List/slots/SearchSlot";
}

declare module "react-declarative/components/List/hooks/useProps" {
  import * as React from "react";
  import IListProps, {
    IListCallbacks,
    IListState,
  } from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  import IRowData from "react-declarative/model/IRowData";
  interface IPropContext<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
    Field extends IField = IField<FilterData, Payload>,
  > extends Omit<
        IListProps<FilterData, RowData, Payload, Field>,
        keyof {
          limit: never;
          chips: never;
          search: never;
          filterData: never;
          isChooser: never;
          payload: never;
        }
      >,
      IListState<FilterData, RowData>,
      IListCallbacks<FilterData, RowData> {
    children: React.ReactNode;
  }
  export const PropProvider: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
    Payload extends unknown = any,
    Field extends IField<any, any> = IField<FilterData, Payload>,
  >(
    props: IPropContext<FilterData, RowData, Payload, Field>,
  ) => JSX.Element;
  export const useProps: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
    Payload extends unknown = any,
    Field extends IField<any, any> = IField<FilterData, Payload>,
  >() => IPropContext<FilterData, RowData, Payload, Field>;
  export default useProps;
}

declare module "react-declarative/components/List/hooks/useCachedRows" {
  import React from "react";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData, { RowId } from "react-declarative/model/IRowData";
  export const useCachedRows: <
    RowData extends IRowData = any,
  >() => IState<RowData>;
  interface ICachedRowsProviderProps {
    children: React.ReactNode;
  }
  interface IState<RowData extends IRowData = IAnything> {
    cachedRows: Map<RowId, RowData>;
    selectedRows: RowData[];
  }
  export const CachedRowsProvider: <RowData extends IRowData = any>({
    children,
  }: ICachedRowsProviderProps) => JSX.Element;
  export default useCachedRows;
}

declare module "react-declarative/components/List/api/useQueryPagination" {
  import IAnything from "react-declarative/model/IAnything";
  import IListProps from "react-declarative/model/IListProps";
  import IRowData from "react-declarative/model/IRowData";
  interface IQuery<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    filterData: IListProps<FilterData, RowData>["filterData"];
    sortModel: IListProps<FilterData, RowData>["sortModel"];
    chipData: IListProps<FilterData, RowData>["chipData"];
    limit: IListProps<FilterData, RowData>["limit"];
    page: IListProps<FilterData, RowData>["page"];
    search: IListProps<FilterData, RowData>["search"];
  }
  interface IParams<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    removeEmptyFilters: (data: FilterData) => Partial<FilterData>;
    onFilterChange: IListProps<FilterData, RowData>["onFilterChange"];
    onLimitChange: IListProps<FilterData, RowData>["onLimitChange"];
    onPageChange: IListProps<FilterData, RowData>["onPageChange"];
    onSortModelChange: IListProps<FilterData, RowData>["onSortModelChange"];
    onChipsChange: IListProps<FilterData, RowData>["onChipsChange"];
    onSearchChange: IListProps<FilterData, RowData>["onSearchChange"];
    onChange?: (pagination: string) => void;
    fallback?: (e: Error) => void;
  }
  type FilterDataT<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > = Exclude<IQuery<FilterData, RowData>["filterData"], undefined>;
  type SortModelT<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > = Exclude<IQuery<FilterData, RowData>["sortModel"], undefined>;
  type ChipDataT<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > = Exclude<IQuery<FilterData, RowData>["chipData"], undefined>;
  export const DEFAULT_QUERY: IQuery;
  /**
   * A hook that provides pagination functionality for querying data.
   * @template FilterData The type of filter data.
   * @template RowData The type of row data.
   * @param [initialValue=DEFAULT_QUERY] - The initial value for the query.
   * @param [options={}] - The options for the hook.
   * @param [options.onFilterChange=() => null] - The callback function to handle filter data changes.
   * @param [options.onLimitChange=() => null] - The callback function to handle limit changes.
   * @param [options.onPageChange=() => null] - The callback function to handle page changes.
   * @param [options.onSortModelChange=() => null] - The callback function to handle sort model changes.
   * @param [options.onChipsChange=() => null] - The callback function to handle chip data changes.
   * @param [options.onSearchChange=() => null] - The callback function to handle search changes.
   * @param [options.onChange=() => null] - The callback function to handle state changes.
   * @param [options.removeEmptyFilters=removeEmptyFiltersDefault] - The function to remove empty filters.
   * @param [options.fallback] - The fallback options.
   * @returns An object containing the pagination props and methods.
   */
  export const useQueryPagination: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
  >(
    initialValue?: Partial<IQuery<FilterData, RowData>>,
    {
      onFilterChange: handleFilterChange,
      onLimitChange: handleLimitChange,
      onPageChange: handlePageChange,
      onSortModelChange: handleSortModelChange,
      onChipsChange: handleChipsChange,
      onSearchChange: handleSeachChange,
      onChange: handleChange,
      removeEmptyFilters,
      fallback,
    }?: Partial<IParams<FilterData, RowData>>,
  ) => {
    setFilterData: (data: FilterData) => void;
    setSortModel: (
      sort: import("../../../model/IListProps").ListHandlerSortModel<RowData>,
    ) => void;
    setChipData: (data: Partial<Record<keyof RowData, boolean>>) => void;
    setLimit: (limit: number) => void;
    setPage: (page: number) => void;
    setSearch: (search: string) => void;
    getFilterData: () => Exclude<Partial<FilterData>, undefined>;
    getSortModel: () => import("../../../model/IListProps").ListHandlerSortModel<RowData>;
    getChipData: () => Exclude<
      Partial<Record<keyof RowData, boolean>>,
      undefined
    >;
    getLimit: () => number;
    getPage: () => number;
    getSearch: () => string;
    listProps: {
      filterData: Partial<FilterData> | undefined;
      sortModel:
        | import("../../../model/IListProps").ListHandlerSortModel<RowData>
        | undefined;
      chipData: Partial<Record<keyof RowData, boolean>> | undefined;
      limit: number | undefined;
      page: number | undefined;
      search: string | undefined;
      fallback?: ((e: Error) => void) | undefined;
      onFilterChange: (data: FilterData) => void;
      onLimitChange: (limit: number) => void;
      onPageChange: (page: number) => void;
      onSortModelChange: (
        sort: import("../../../model/IListProps").ListHandlerSortModel<RowData>,
      ) => void;
      onChipsChange: (data: Partial<Record<keyof RowData, boolean>>) => void;
      onSearchChange: (search: string) => void;
    };
  };
  export default useQueryPagination;
}

declare module "react-declarative/components/List/api/useCachedPaginator" {
  import { ListHandler } from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  import { IArrayPaginatorParams } from "react-declarative/components/List/api/useArrayPaginator";
  interface IResult<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    handler: ListHandler<FilterData, RowData>;
    clear: () => void;
  }
  /**
   * Creates a cached paginator for list data.
   *
   * @template FilterData - The type of the filter data.
   * @template RowData - The type of the row data.
   *
   * @param handler - The list handler function or object.
   * @param params - The parameters for the paginator.
   *
   * @returns - The result containing the paginator handler and clear function.
   */
  export const useCachedPaginator: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
  >(
    handler: ListHandler<FilterData, RowData, any>,
    params: IArrayPaginatorParams<FilterData, RowData>,
  ) => IResult<FilterData, RowData>;
  export default useCachedPaginator;
}

declare module "react-declarative/components/List/api/useHistoryStatePagination" {
  import IAnything from "react-declarative/model/IAnything";
  import IListProps from "react-declarative/model/IListProps";
  import IRowData from "react-declarative/model/IRowData";
  import History from "react-declarative/model/History";
  interface IQuery<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    filterData: IListProps<FilterData, RowData>["filterData"];
    sortModel: IListProps<FilterData, RowData>["sortModel"];
    chipData: IListProps<FilterData, RowData>["chipData"];
    limit: IListProps<FilterData, RowData>["limit"];
    page: IListProps<FilterData, RowData>["page"];
    search: IListProps<FilterData, RowData>["search"];
  }
  interface IParams<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > {
    initialValue: Partial<IQuery<FilterData, RowData>>;
    removeEmptyFilters: (data: FilterData) => Partial<FilterData>;
    onFilterChange: IListProps<FilterData, RowData>["onFilterChange"];
    onLimitChange: IListProps<FilterData, RowData>["onLimitChange"];
    onPageChange: IListProps<FilterData, RowData>["onPageChange"];
    onSortModelChange: IListProps<FilterData, RowData>["onSortModelChange"];
    onChipsChange: IListProps<FilterData, RowData>["onChipsChange"];
    onSearchChange: IListProps<FilterData, RowData>["onSearchChange"];
    onChange?: (pagination: IQuery) => void;
    fallback?: (e: Error) => void;
  }
  type FilterDataT<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > = Exclude<IQuery<FilterData, RowData>["filterData"], undefined>;
  type SortModelT<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > = Exclude<IQuery<FilterData, RowData>["sortModel"], undefined>;
  type ChipDataT<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
  > = Exclude<IQuery<FilterData, RowData>["chipData"], undefined>;
  export const DEFAULT_QUERY: IQuery;
  /**
   * Handles pagination state using browser history state.
   * @template FilterData - The type of filter data for the query.
   * @template RowData - The type of row data for the query.
   * @param history - The history object from react-router.
   * @param options - Optional parameters for configuring the pagination.
   * @param options.initialValue - The initial query value.
   * @param options.onFilterChange - The callback function when filter data changes.
   * @param options.onLimitChange - The callback function when limit changes.
   * @param options.onPageChange - The callback function when page changes.
   * @param options.onSortModelChange - The callback function when sort model changes.
   * @param options.onChipsChange - The callback function when chip data changes.
   * @param options.onSearchChange - The callback function when search changes.
   * @param options.onChange - The callback function when the state changes.
   * @param options.removeEmptyFilters - Indicates whether to remove empty filters from the query.
   * @param options.fallback - The fallback component to render when the query is not available.
   * @returns - An object containing the pagination state and methods.
   * @property listProps - The props to be passed to a list component.
   * @property listProps.onFilterChange - The callback function to handle filter change.
   * @property listProps.onLimitChange - The callback function to handle limit change.
   * @property listProps.onPageChange - The callback function to handle page change.
   * @property listProps.onSortModelChange - The callback function to handle sort model change.
   * @property listProps.onChipsChange - The callback function to handle chip data change.
   * @property listProps.onSearchChange - The callback function to handle search change.
   * @property listProps.fallback - The fallback component to render when the query is not available.
   * @property listProps.filterData - The filter data in the query.
   * @property listProps.sortModel - The sort model in the query.
   * @property listProps.chipData - The chip data in the query.
   * @property listProps.limit - The limit in the query.
   * @property listProps.page - The page in the query.
   * @property listProps.search - The search value in the query.
   * @property getFilterData - Returns the filter data in the query.
   * @property getSortModel - Returns the sort model in the query.
   * @property getChipData - Returns the chip data in the query.
   * @property getLimit - Returns the limit in the query.
   * @property getPage - Returns the page in the query.
   * @property getSearch - Returns the search value in the query.
   * @property setFilterData - Sets the filter data in the query.
   * @property setSortModel - Sets the sort model in the query.
   * @property setChipData - Sets the chip data in the query.
   * @property setLimit - Sets the limit in the query.
   * @property setPage - Sets the page in the query.
   * @property setSearch - Sets the search value in the query.
   */
  export const useHistoryStatePagination: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
  >(
    history: History,
    {
      initialValue,
      onFilterChange: handleFilterChange,
      onLimitChange: handleLimitChange,
      onPageChange: handlePageChange,
      onSortModelChange: handleSortModelChange,
      onChipsChange: handleChipsChange,
      onSearchChange: handleSeachChange,
      onChange: handleChange,
      removeEmptyFilters,
      fallback,
    }?: Partial<IParams<FilterData, RowData>>,
  ) => {
    setFilterData: (data: FilterData) => void;
    setSortModel: (
      sort: import("../../../model/IListProps").ListHandlerSortModel<RowData>,
    ) => void;
    setChipData: (data: Partial<Record<keyof RowData, boolean>>) => void;
    setLimit: (limit: number) => void;
    setPage: (page: number) => void;
    setSearch: (search: string) => void;
    getFilterData: () => Exclude<Partial<FilterData>, undefined>;
    getSortModel: () => import("../../../model/IListProps").ListHandlerSortModel<RowData>;
    getChipData: () => Exclude<
      Partial<Record<keyof RowData, boolean>>,
      undefined
    >;
    getLimit: () => number;
    getPage: () => number;
    getSearch: () => string;
    listProps: {
      filterData: Partial<FilterData> | undefined;
      sortModel:
        | import("../../../model/IListProps").ListHandlerSortModel<RowData>
        | undefined;
      chipData: Partial<Record<keyof RowData, boolean>> | undefined;
      limit: number | undefined;
      page: number | undefined;
      search: string | undefined;
      fallback?: ((e: Error) => void) | undefined;
      onFilterChange: (data: FilterData) => void;
      onLimitChange: (limit: number) => void;
      onPageChange: (page: number) => void;
      onSortModelChange: (
        sort: import("../../../model/IListProps").ListHandlerSortModel<RowData>,
      ) => void;
      onChipsChange: (data: Partial<Record<keyof RowData, boolean>>) => void;
      onSearchChange: (search: string) => void;
    };
  };
  export default useHistoryStatePagination;
}

declare module "react-declarative/components/List/api/useListSelection" {
  import { RowId } from "react-declarative/model/IRowData";
  /**
   * A custom hook that manages the selection of rows in a list.
   *
   * @returns - An object containing the selected rows, list props, and a function to deselect all rows.
   */
  export const useListSelection: () => {
    readonly selectedRows: RowId[];
    readonly listProps: {
      readonly selectedRows: RowId[];
      readonly onSelectedRows: (rowIds: RowId[]) => void;
    };
    readonly deselectAll: () => void;
  };
  export default useListSelection;
}

declare module "react-declarative/components/List/api/useListAction" {
  import IRowData, { RowId } from "react-declarative/model/IRowData";
  interface IParams<Data extends IRowData = IRowData> {
    fetchRow: (id: RowId) => Data | Promise<Data>;
    onAction?: (
      action: string,
      rows: Data[],
      deselectAll: () => void,
    ) => Promise<void> | void;
    onRowAction?: (
      action: string,
      row: Data,
      deselectAll: () => void,
    ) => Promise<void> | void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
    fallback?: (e: Error) => void;
  }
  /**
   * Provides a set of actions and hooks for managing a list of data.
   *
   * @template Data - The type of the data in the list.
   *
   * @param params - The parameters for configuring the list actions.
   * @param params.onLoadStart - The function to be called when data loading starts.
   * @param params.onLoadEnd - The function to be called when data loading ends.
   * @param params.throwError - The function to be called when an error occurs.
   * @param params.fallback - The function to be called when data loading fails.
   * @param params.fetchRow - The function to fetch a single row of data.
   * @param params.onAction - The function to be called when a bulk action is performed.
   * @param params.onRowAction - The function to be called when a row action is performed.
   *
   * @returns - The list actions and necessary data.
   */
  export const useListAction: <Data extends IRowData = IRowData>({
    onLoadStart,
    onLoadEnd,
    throwError,
    fallback,
    fetchRow,
    onAction,
    onRowAction,
  }: IParams<Data>) => {
    readonly deselectAll: () => void;
    readonly selectedRows: RowId[];
    readonly listProps: {
      readonly selectedRows: RowId[];
      readonly onSelectedRows: (rowIds: RowId[]) => void;
    };
    readonly commitAction: (p?: string | undefined) => Promise<void | null>;
    readonly commitRowAction: (
      action: string,
      row: Data,
    ) => Promise<void | null>;
  };
  export default useListAction;
}

declare module "react-declarative/components/List/components/SlotFactory" {
  export * from "react-declarative/components/List/components/SlotFactory/SlotFactory";
  export * from "react-declarative/components/List/components/SlotFactory/SlotContext";
  export * from "react-declarative/components/List/components/SlotFactory/ISlotFactoryContext";
  export { default } from "react-declarative/components/List/components/SlotFactory/SlotFactory";
}

declare module "react-declarative/components/List/hooks/useFilterData" {
  import * as React from "react";
  import IListProps from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  import IRowData from "react-declarative/model/IRowData";
  type IContext<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
    Field extends IField = IField<FilterData, Payload>,
  > = Exclude<
    IListProps<FilterData, RowData, Payload, Field>["filterData"],
    undefined
  >;
  interface IProps<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
    Field extends IField = IField<FilterData, Payload>,
  > {
    value: IContext<FilterData, RowData, Payload, Field>;
    children: React.ReactNode;
  }
  export const FilterDataProvider: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
    Payload extends unknown = any,
    Field extends IField<any, any> = IField<FilterData, Payload>,
  >({
    children,
    value,
  }: IProps<FilterData, RowData, Payload, Field>) => JSX.Element;
  export const useFilterData: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
    Payload extends unknown = any,
    Field extends IField<any, any> = IField<FilterData, Payload>,
  >() => Exclude<Partial<FilterData>, undefined>;
  export default useFilterData;
}

declare module "react-declarative/components/List/hooks/usePagination" {
  import * as React from "react";
  import { ListHandlerPagination } from "react-declarative/model/IListProps";
  type IContext = ListHandlerPagination;
  interface IProps extends IContext {
    children: React.ReactNode;
  }
  export const PaginationProvider: ({
    children,
    limit,
    offset,
  }: IProps) => JSX.Element;
  export const usePagination: () => ListHandlerPagination;
  export default usePagination;
}

declare module "react-declarative/components/List/hooks/useSortModel" {
  import React from "react";
  import {
    IListSortItem,
    ListHandlerSortModel,
  } from "react-declarative/model/IListProps";
  export const useSortModel: () => IState;
  interface ISortModelProviderProps {
    children: React.ReactNode;
    sortModel: ListHandlerSortModel;
  }
  interface IState {
    sortModel: Map<IListSortItem["field"], IListSortItem>;
    setSortModel: (s: Map<IListSortItem["field"], IListSortItem>) => void;
  }
  export const SortModelProvider: ({
    children,
    sortModel: upperSortModel,
  }: ISortModelProviderProps) => JSX.Element;
  export default useSortModel;
}

declare module "react-declarative/components/List/hooks/useChips" {
  import React from "react";
  import {
    IListChip,
    ListHandlerChips,
  } from "react-declarative/model/IListProps";
  export const useChips: () => IState;
  interface IChipsProviderProps {
    children: React.ReactNode;
    chips: IListChip[];
    chipData: ListHandlerChips;
  }
  interface IState {
    chips: Map<string, boolean>;
    setChips: (s: Map<string, boolean>) => void;
  }
  export const ChipsProvider: ({
    children,
    chips: upperChips,
    chipData,
  }: IChipsProviderProps) => JSX.Element;
  export default useChips;
}

declare module "react-declarative/components/List/hooks/useSearch" {
  import * as React from "react";
  type IContext = string;
  interface IProps {
    value: IContext;
    children: React.ReactNode;
  }
  export const SearchProvider: (props: IProps) => JSX.Element;
  export const useSearch: () => string;
  export default useSearch;
}

declare module "react-declarative/components/List/hooks/usePayload" {
  import * as React from "react";
  import IListProps from "react-declarative/model/IListProps";
  interface IPayloadProviderProps {
    children: React.ReactNode;
    value: Exclude<IListProps["payload"], undefined>;
  }
  export const PayloadProvider: ({
    children,
    value,
  }: IPayloadProviderProps) => JSX.Element;
  export const usePayload: () => any;
  export default usePayload;
}

declare module "react-declarative/components/List/hooks/useReload" {
  export const useReload: () => (
    keepPagination?: boolean | undefined,
  ) => Promise<void>;
  export default useReload;
}

declare module "react-declarative/components/List/hooks/useSelection" {
  import React from "react";
  import { RowId } from "react-declarative/model/IRowData";
  export const useSelection: () => IState;
  interface ISelectionProviderProps {
    children: React.ReactNode;
    selectedRows?: RowId[];
  }
  interface IState {
    selection: Set<RowId>;
    setSelection: (s: Set<RowId>) => void;
  }
  export interface ISelectionReloadRef {
    reload: (initialChange?: boolean) => void;
  }
  export const SelectionProvider: ({
    children,
    selectedRows,
  }: ISelectionProviderProps) => JSX.Element;
  export default useSelection;
}

declare module "react-declarative/components/List/common/ClassicChipListSlot" {
  import { IChipListSlot } from "react-declarative/components/List/slots/ChipListSlot";
  export const ClassicChipListSlot: ({
    listChips,
    loading,
  }: IChipListSlot) => JSX.Element;
  export default ClassicChipListSlot;
}

declare module "react-declarative/components/List/common/ClassicFilterListSlot" {
  import { IFilterListSlot } from "react-declarative/components/List/slots/FilterListSlot";
  export const ClassicFilterListSlot: <FilterData extends {}>({
    className,
    style,
    height,
    filterData,
    filters,
    change,
    ready,
    label,
    loading,
    withSearch,
    withToggledFilters,
    search,
    onSearchChange,
    onFilterChange,
    onCollapsedChange,
  }: IFilterListSlot<FilterData>) => JSX.Element;
  export default ClassicFilterListSlot;
}

declare module "react-declarative/components/List/common/DialogFilterListSlot" {
  import { IFilterListSlot } from "react-declarative/components/List/slots/FilterListSlot";
  export const DialogFilterListSlot: <FilterData extends {}>({
    className,
    style,
    filterData,
    filters,
    change,
    label,
    loading,
    withSearch,
    withToggledFilters,
    search,
    onSearchChange,
    onFilterChange,
  }: IFilterListSlot) => JSX.Element;
  export default DialogFilterListSlot;
}

declare module "react-declarative/components/List/common/ModalFilterListSlot" {
  import { IFilterListSlot } from "react-declarative/components/List/slots/FilterListSlot";
  export const ModalFilterListSlot: <FilterData extends {}>({
    className,
    style,
    filterData,
    filters,
    change,
    label,
    loading,
    withSearch,
    withToggledFilters,
    search,
    onSearchChange,
    onFilterChange,
  }: IFilterListSlot) => JSX.Element;
  export default ModalFilterListSlot;
}

declare module "react-declarative/components/List/common/ModernChipListSlot" {
  import { IChipListSlot } from "react-declarative/components/List/slots/ChipListSlot";
  export const ModernChipListSlot: ({
    listChips,
    loading,
  }: IChipListSlot) => JSX.Element;
  export default ModernChipListSlot;
}

declare module "react-declarative/components/List/hooks/useColumnConfig" {
  import IColumn from "react-declarative/model/IColumn";
  interface ISortModalProps {
    columns: IColumn[];
    storageKey: string;
  }
  export const useColumnConfig: ({ columns, storageKey }: ISortModalProps) => {
    open: boolean;
    render: () => JSX.Element;
    columns: IColumn<any, any, any>[];
    pickColumns: () => void;
  };
  export default useColumnConfig;
}

declare module "react-declarative/components/Async" {
  export * from "react-declarative/components/Async/Async";
  export { default } from "react-declarative/components/Async/Async";
}

declare module "react-declarative/components/One/components/SlotFactory" {
  export * from "react-declarative/components/One/components/SlotFactory/SlotFactory";
  export * from "react-declarative/components/One/components/SlotFactory/SlotContext";
  export * from "react-declarative/components/One/components/SlotFactory/ISlotFactoryContext";
  export { default } from "react-declarative/components/One/components/SlotFactory/SlotFactory";
}

declare module "react-declarative/components/One" {
  export * from "react-declarative/components/One/One";
  export * from "react-declarative/components/One/slots";
  export { OneConfig } from "react-declarative/components/One/components/OneConfig";
  export { createField } from "react-declarative/components/One/config/createField";
  export { makeField } from "react-declarative/components/One/components/makeField";
  export { createLayout } from "react-declarative/components/One/config/createLayout";
  export { makeLayout } from "react-declarative/components/One/components/makeLayout";
  export { useOneMenu } from "react-declarative/components/One/context/MenuProvider";
  export { useOneProps } from "react-declarative/components/One/context/PropsProvider";
  export { useOneState } from "react-declarative/components/One/context/StateProvider";
  export { useOnePayload } from "react-declarative/components/One/context/PayloadProvider";
  export { useOneFeatures } from "react-declarative/components/One/context/FeatureProvider";
  export { useOneRadio } from "react-declarative/components/One/context/RadioProvider";
  export { useOneContext } from "react-declarative/components/One/context/OneContextProvider";
  export { OtherComboSlot } from "react-declarative/components/One/other/OtherComboSlot";
  export { OtherItemsSlot } from "react-declarative/components/One/other/OtherItemsSlot";
  export { useApiHandler } from "react-declarative/components/One/api/useApiHandler";
  export { useLocalHandler } from "react-declarative/components/One/api/useLocalHandler";
  export { useStaticHandler } from "react-declarative/components/One/api/useStaticHandler";
  export { usePreventLeave } from "react-declarative/components/One/api/usePreventLeave";
  export { default as OneSlotFactory } from "react-declarative/components/One/components/SlotFactory";
  export { defaultSlots as OneDefaultSlots } from "react-declarative/components/One/components/SlotFactory";
  export { default } from "react-declarative/components/One/One";
}

declare module "react-declarative/components/OneIcon" {
  export * from "react-declarative/components/OneIcon/OneIcon";
  export { default } from "react-declarative/components/OneIcon/OneIcon";
}

declare module "react-declarative/components/OneButton" {
  export * from "react-declarative/components/OneButton/OneButton";
  export { default } from "react-declarative/components/OneButton/OneButton";
}

declare module "react-declarative/components/Dot" {
  export * from "react-declarative/components/Dot/Dot";
  export { default } from "react-declarative/components/Dot/Dot";
}

declare module "react-declarative/components/NoSsr" {
  export * from "react-declarative/components/NoSsr/NoSsr";
  export { default } from "react-declarative/components/NoSsr/NoSsr";
}

declare module "react-declarative/components/Switch" {
  export * from "react-declarative/components/Switch/Switch";
  export { default } from "react-declarative/components/Switch/Switch";
}

declare module "react-declarative/components/Center" {
  export * from "react-declarative/components/Center/Center";
  export { default } from "react-declarative/components/Center/Center";
}

declare module "react-declarative/components/Square" {
  export * from "react-declarative/components/Square/Square";
  export { default } from "react-declarative/components/Square/Square";
}

declare module "react-declarative/components/Scaffold" {
  export * from "react-declarative/components/Scaffold/Scaffold";
  export * from "react-declarative/components/Scaffold/model/IScaffoldProps";
  export * from "react-declarative/components/Scaffold/model/IScaffoldOption";
  export { default } from "react-declarative/components/Scaffold/Scaffold";
}

declare module "react-declarative/components/Translate" {
  export * from "react-declarative/components/Translate/Translate";
  export { default } from "react-declarative/components/Translate/Translate";
}

declare module "react-declarative/components/Breadcrumbs" {
  export * from "react-declarative/components/Breadcrumbs/Breadcrumbs";
  export { default } from "react-declarative/components/Breadcrumbs/Breadcrumbs";
}

declare module "react-declarative/components/ErrorBoundary" {
  export * from "react-declarative/components/ErrorBoundary/ErrorBoundary";
  export { default } from "react-declarative/components/ErrorBoundary/ErrorBoundary";
}

declare module "react-declarative/components/ColorButton" {
  export * from "react-declarative/components/ColorButton/ColorButton";
  export { default } from "react-declarative/components/ColorButton/ColorButton";
}

declare module "react-declarative/components/ActionMenu" {
  export * from "react-declarative/components/ActionMenu/ActionMenu";
  export { default } from "react-declarative/components/ActionMenu/ActionMenu";
}

declare module "react-declarative/components/ActionButton" {
  export * from "react-declarative/components/ActionButton/ActionButton";
  export * from "react-declarative/components/ActionButton/api/usePreventAction";
  export { default } from "react-declarative/components/ActionButton/ActionButton";
}

declare module "react-declarative/components/ActionStopIcon" {
  export * from "react-declarative/components/ActionStopIcon/ActionStopIcon";
  export { default } from "react-declarative/components/ActionStopIcon/ActionStopIcon";
}

declare module "react-declarative/components/ActionFab" {
  export * from "react-declarative/components/ActionFab/ActionFab";
  export { default } from "react-declarative/components/ActionFab/ActionFab";
}

declare module "react-declarative/components/ActionFilter" {
  export * from "react-declarative/components/ActionFilter/ActionFilter";
  export * from "react-declarative/components/ActionFilter/model/IActionFilter";
  export { default } from "react-declarative/components/ActionFilter/ActionFilter";
}

declare module "react-declarative/components/ActionTrigger" {
  export * from "react-declarative/components/ActionTrigger/ActionTrigger";
  export * from "react-declarative/components/ActionTrigger/model/IActionTrigger";
  export { default } from "react-declarative/components/ActionTrigger/ActionTrigger";
}

declare module "react-declarative/components/ActionIcon" {
  export * from "react-declarative/components/ActionIcon/ActionIcon";
  export { default } from "react-declarative/components/ActionIcon/ActionIcon";
}

declare module "react-declarative/components/ActionToggle" {
  export * from "react-declarative/components/ActionToggle/ActionToggle";
  export { default } from "react-declarative/components/ActionToggle/ActionToggle";
}

declare module "react-declarative/components/ActionModal" {
  export * from "react-declarative/components/ActionModal/ActionModal";
  export * from "react-declarative/components/ActionModal/useActionModal";
  export { default } from "react-declarative/components/ActionModal/useActionModal";
}

declare module "react-declarative/components/SearchModal" {
  export * from "react-declarative/components/SearchModal/SearchModal";
  export * from "react-declarative/components/SearchModal/useSearchModal";
  export { default } from "react-declarative/components/SearchModal/useSearchModal";
}

declare module "react-declarative/components/SearchView" {
  export * from "react-declarative/components/SearchView/SearchView";
  export * from "react-declarative/components/SearchView/model/ISearchItem";
  export { default } from "react-declarative/components/SearchView/SearchView";
}

declare module "react-declarative/components/ConstraintView" {
  export * from "react-declarative/components/ConstraintView/ConstraintView";
  export * from "react-declarative/components/ConstraintView/useConstraint";
  export { default } from "react-declarative/components/ConstraintView/ConstraintView";
}

declare module "react-declarative/components/ScrollTopView" {
  export * from "react-declarative/components/ScrollTopView/ScrollTopView";
  export { default } from "react-declarative/components/ScrollTopView/ScrollTopView";
}

declare module "react-declarative/components/OutletView" {
  export * from "react-declarative/components/OutletView/OutletView";
  export * from "react-declarative/components/OutletView/model/IOutlet";
  export * from "react-declarative/components/OutletView/model/IOutletModal";
  export * from "react-declarative/components/OutletView/model/IOutletProps";
  export * from "react-declarative/components/OutletView/model/IOutletModalProps";
  export * from "react-declarative/components/OutletView/hooks/useOutletModal";
  export { default } from "react-declarative/components/OutletView/OutletView";
}

declare module "react-declarative/components/AlertView" {
  export * from "react-declarative/components/AlertView/AlertView";
  export { default } from "react-declarative/components/AlertView/AlertView";
}

declare module "react-declarative/components/PaperView" {
  export * from "react-declarative/components/PaperView/PaperView";
  export { default } from "react-declarative/components/PaperView/PaperView";
}

declare module "react-declarative/components/DragDropView" {
  export * from "react-declarative/components/DragDropView/DragDropView";
  export { default } from "react-declarative/components/DragDropView/DragDropView";
}

declare module "react-declarative/components/FilesView" {
  export * from "react-declarative/components/FilesView/FilesView";
  export * from "react-declarative/components/FilesView/api/usePreventNavigate";
  export * from "react-declarative/components/FilesView/useFilesView";
  export { default } from "react-declarative/components/FilesView/FilesView";
}

declare module "react-declarative/components/ScrollView" {
  export * from "react-declarative/components/ScrollView/ScrollView";
  export { default } from "react-declarative/components/ScrollView/ScrollView";
}

declare module "react-declarative/components/ScaleView" {
  export * from "react-declarative/components/ScaleView/ScaleView";
  export { default } from "react-declarative/components/ScaleView/ScaleView";
}

declare module "react-declarative/components/AutoSizer" {
  export * from "react-declarative/components/AutoSizer/AutoSizer";
  export { default } from "react-declarative/components/AutoSizer/AutoSizer";
}

declare module "react-declarative/components/FadeView" {
  export * from "react-declarative/components/FadeView/FadeView";
  export { default } from "react-declarative/components/FadeView/FadeView";
}

declare module "react-declarative/components/TabsView" {
  export * from "react-declarative/components/TabsView/TabsView";
  export { ITabsOutlet } from "react-declarative/components/TabsView/model/ITabsOutlet";
  export { ITabsOutletProps } from "react-declarative/components/TabsView/model/ITabsOutletProps";
  export { ITabsStep } from "react-declarative/components/TabsView/model/ITabsStep";
  export { ITabsModal } from "react-declarative/components/TabsView/model/ITabsModal";
  export { ITabsModalProps } from "react-declarative/components/TabsView/model/ITabsModalProps";
  export { default } from "react-declarative/components/TabsView/TabsView";
}

declare module "react-declarative/components/FetchView" {
  export * from "react-declarative/components/FetchView/FetchView";
  export {
    Reveal,
    IRevealProps,
  } from "react-declarative/components/FetchView/components/Reveal";
  export { default } from "react-declarative/components/FetchView/FetchView";
}

declare module "react-declarative/components/WaitView" {
  export * from "react-declarative/components/WaitView/WaitView";
  export { default } from "react-declarative/components/WaitView/WaitView";
}

declare module "react-declarative/components/PingView" {
  export * from "react-declarative/components/PingView/PingView";
  export { default } from "react-declarative/components/PingView/PingView";
}

declare module "react-declarative/components/HtmlView" {
  export * from "react-declarative/components/HtmlView/HtmlView";
  export { default } from "react-declarative/components/HtmlView/HtmlView";
}

declare module "react-declarative/components/OfflineView" {
  export * from "react-declarative/components/OfflineView/OfflineView";
  export { default } from "react-declarative/components/OfflineView/OfflineView";
}

declare module "react-declarative/components/RevealView" {
  export * from "react-declarative/components/RevealView/RevealView";
  export { default } from "react-declarative/components/RevealView/RevealView";
}

declare module "react-declarative/components/SecretView" {
  export * from "react-declarative/components/SecretView/SecretView";
  export { default } from "react-declarative/components/SecretView/SecretView";
}

declare module "react-declarative/components/WizardView" {
  export * from "react-declarative/components/WizardView/WizardView";
  export * from "react-declarative/components/WizardView/components/WizardNavigation";
  export * from "react-declarative/components/WizardView/components/WizardContainer";
  export { IWizardOutlet } from "react-declarative/components/WizardView/model/IWizardOutlet";
  export { IWizardOutletProps } from "react-declarative/components/WizardView/model/IWizardOutletProps";
  export { IWizardStep } from "react-declarative/components/WizardView/model/IWizardStep";
  export { IWizardModal } from "react-declarative/components/WizardView/model/IWizardModal";
  export { IWizardModalProps } from "react-declarative/components/WizardView/model/IWizardModalProps";
  export { useWizardModal } from "react-declarative/components/WizardView/hooks/useWizardModal";
  export { default } from "react-declarative/components/WizardView/WizardView";
}

declare module "react-declarative/components/PortalView" {
  export * from "react-declarative/components/PortalView/PortalView";
  export { default } from "react-declarative/components/PortalView/PortalView";
}

declare module "react-declarative/components/ErrorView" {
  export * from "react-declarative/components/ErrorView/ErrorView";
  export { default } from "react-declarative/components/ErrorView/ErrorView";
}

declare module "react-declarative/components/AuthView" {
  export * from "react-declarative/components/AuthView/AuthView";
  export { default } from "react-declarative/components/AuthView/AuthView";
}

declare module "react-declarative/components/KanbanView" {
  export * from "react-declarative/components/KanbanView/KanbanView";
  export * from "react-declarative/components/KanbanView/model/IBoard";
  export * from "react-declarative/components/KanbanView/model/IBoardColumn";
  export * from "react-declarative/components/KanbanView/model/IBoardItem";
  export * from "react-declarative/components/KanbanView/model/IBoardRow";
  export { default } from "react-declarative/components/KanbanView/KanbanView";
}

declare module "react-declarative/components/ReloadView" {
  export * from "react-declarative/components/ReloadView/ReloadView";
  export { default } from "react-declarative/components/ReloadView/ReloadView";
}

declare module "react-declarative/components/InfiniteView" {
  export * from "react-declarative/components/InfiniteView/InfiniteView";
  export { default } from "react-declarative/components/InfiniteView/InfiniteView";
}

declare module "react-declarative/components/VirtualView" {
  export * from "react-declarative/components/VirtualView/VirtualView";
  export { CHILD_ELEMENT as VIRTUAL_VIEW_CHILD } from "react-declarative/components/VirtualView/VirtualView";
  export { ROOT_ELEMENT as VIRTUAL_VIEW_ROOT } from "react-declarative/components/VirtualView/VirtualView";
  export { default } from "react-declarative/components/VirtualView/VirtualView";
}

declare module "react-declarative/components/LoaderView" {
  export * from "react-declarative/components/LoaderView/LoaderView";
  export { default } from "react-declarative/components/LoaderView/LoaderView";
}

declare module "react-declarative/components/DocumentView" {
  export * from "react-declarative/components/DocumentView/DocumentView";
  export { default } from "react-declarative/components/DocumentView/DocumentView";
}

declare module "react-declarative/components/ImageView" {
  export * from "react-declarative/components/ImageView/ImageView";
  export { default } from "react-declarative/components/ImageView/ImageView";
}

declare module "react-declarative/components/TreeView" {
  export * from "react-declarative/components/TreeView/TreeView";
  export { INode as ITreeViewNode } from "react-declarative/components/TreeView/model/INode";
  export { default } from "react-declarative/components/TreeView/TreeView";
}

declare module "react-declarative/components/GridView" {
  export * from "react-declarative/components/GridView/GridView";
  export { default } from "react-declarative/components/GridView/GridView";
}

declare module "react-declarative/components/Grid" {
  export * from "react-declarative/components/Grid/Grid";
  export * from "react-declarative/components/Grid/api/useOffsetPaginator";
  export * from "react-declarative/components/Grid/api/useCursorPaginator";
  export * from "react-declarative/components/Grid/api/useGridAction";
  export * from "react-declarative/components/Grid/api/useGridSelection";
  export { IGridProps } from "react-declarative/components/Grid/model/IGridProps";
  export { RowData } from "react-declarative/components/Grid/model/RowData";
  export { IColumn as IGridColumn } from "react-declarative/components/Grid/model/IColumn";
  export { IGridAction } from "react-declarative/components/Grid/model/IGridAction";
  export { TSort as TGridSort } from "react-declarative/components/Grid/model/TSort";
  export { default } from "react-declarative/components/Grid/Grid";
}

declare module "react-declarative/components/Tile" {
  export * from "react-declarative/components/Tile/Tile";
  export * from "react-declarative/components/Tile/model/ITile";
  export * from "react-declarative/components/Tile/model/ITileProps";
  export { default } from "react-declarative/components/Tile/Tile";
}

declare module "react-declarative/components/Spinner" {
  export * from "react-declarative/components/Spinner/Spinner";
  export { default } from "react-declarative/components/Spinner/Spinner";
}

declare module "react-declarative/components/Copy" {
  export * from "react-declarative/components/Copy/Copy";
  export { default } from "react-declarative/components/Copy/Copy";
}

declare module "react-declarative/components/If" {
  export * from "react-declarative/components/If/If";
  export { default } from "react-declarative/components/If/If";
}

declare module "react-declarative/components/CopyButton" {
  export * from "react-declarative/components/CopyButton/CopyButton";
  export { default } from "react-declarative/components/CopyButton/CopyButton";
}

declare module "react-declarative/components/SubjectBinding" {
  export * from "react-declarative/components/SubjectBinding/SubjectBinding";
  export { default } from "react-declarative/components/SubjectBinding/SubjectBinding";
}

declare module "react-declarative/components/Countdown" {
  export * from "react-declarative/components/Countdown/Countdown";
  export { default } from "react-declarative/components/Countdown/Countdown";
}

declare module "react-declarative/components/Chip" {
  export * from "react-declarative/components/Chip/Chip";
  export { default } from "react-declarative/components/Chip/Chip";
}

declare module "react-declarative/components/ScrollAdjust" {
  export * from "react-declarative/components/ScrollAdjust/ScrollAdjust";
  export { default } from "react-declarative/components/ScrollAdjust/ScrollAdjust";
}

declare module "react-declarative/components/MasterDetail" {
  export * from "react-declarative/components/MasterDetail/MasterDetail";
  export * from "react-declarative/components/MasterDetail/config";
  export { IMasterDetailOption } from "react-declarative/components/MasterDetail/model/IMasterDetailOption";
  export { MasterDetailMode } from "react-declarative/components/MasterDetail/model/MasterDetailMode";
  export { default } from "react-declarative/components/MasterDetail/MasterDetail";
}

declare module "react-declarative/components/ModalProvider/ModalProvider" {
  import * as React from "react";
  import IAnything from "react-declarative/model/IAnything";
  interface IModalProviderProps {
    children: React.ReactNode;
  }
  type IRenderer = React.ComponentType<IAnything>;
  interface IHook {
    (
      render: IRenderer,
      deps?: any[],
    ): {
      showModal: Function;
      hideModal: Function;
    };
  }
  /**
   * ModalProvider
   *
   * The ModalProvider component provides a context for managing modals and rendering elements.
   *
   * @param props - The props for the ModalProvider component.
   * @param props.children - The child nodes to be rendered within the ModalProvider.
   *
   * @returns - The ModalProvider component.
   */
  export const ModalProvider: ({
    children,
  }: IModalProviderProps) => JSX.Element;
  export const useModal: IHook;
  export default ModalProvider;
}

declare module "react-declarative/components/SnackProvider/SnackProvider" {
  import * as React from "react";
  interface ISnackProviderProps {
    children: React.ReactNode;
    delay?: number;
  }
  const useSnack: () => (msg: string) => void;
  /**
   * SnackProvider is a component that provides snack notifications to its children.
   *
   * @param props - The props for SnackProvider component.
   * @param props.children - The children components that will have access to snack notifications.
   * @param [props.delay] - The delay for auto hiding the snack notifications.
   *
   * @returns - The SnackProvider component.
   */
  export const SnackProvider: ({
    children,
    delay,
  }: ISnackProviderProps) => JSX.Element;
  export { useSnack };
  export default SnackProvider;
}

declare module "react-declarative/components/SizeProvider/SizeProvider" {
  import { BoxProps } from "@mui/material/Box";
  import ISize from "react-declarative/model/ISize";
  interface ISizeProvider
    extends Omit<
      BoxProps,
      keyof {
        ref: never;
      }
    > {
    target?: HTMLElement;
  }
  const useSize: () => ISize;
  /**
   * Provides the size of a target element.
   *
   * @param props - The properties used by the SizeProvider component.
   * @param props.children - The child elements.
   * @param props.className - The class name to be added to the root element.
   * @param props.target - The target element to observe for size changes.
   * @returns The SizeProvider component.
   */
  export const SizeProvider: ({
    children,
    className,
    target,
    ...props
  }: ISizeProvider) => JSX.Element;
  export { useSize };
  export default SizeProvider;
}

declare module "react-declarative/components/ModalManager/ModalManagerProvider" {
  import * as React from "react";
  interface IModalManagerProviderProps {
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
    fallback?: (error: Error) => void;
    children: React.ReactNode;
  }
  /**
   * ModalManagerProvider component provides a context for managing modals in an application.
   *
   * @param props - The props object containing the following properties:
   *   - children: ReactNode - The child components to be rendered inside the provider.
   *   - fallback: ReactNode - The fallback component to be rendered when there are no modals.
   *   - throwError: boolean - Whether to throw an error when an unexpected state occurs.
   *   - onLoadEnd: function - Callback function to be executed after loading ends.
   *   - onLoadStart: function - Callback function to be executed before loading starts.
   *
   * @returns The rendered ModalManagerProvider component.
   */
  export const ModalManagerProvider: ({
    children,
    fallback,
    throwError,
    onLoadEnd,
    onLoadStart,
  }: IModalManagerProviderProps) => JSX.Element;
  export default ModalManagerProvider;
}

declare module "react-declarative/components/ModalManager/model/IModal" {
  import ModalRender from "react-declarative/components/ModalManager/model/ModalRender";
  /**
   * Represents a modal component.
   *
   * @interface IModal
   */
  export interface IModal {
    id: string;
    render: ModalRender;
    onInit?: () => Promise<void> | void;
    onMount?: (count: number, stack: IModal[]) => Promise<void> | void;
    onUnmount?: (count: number, stack: IModal[]) => Promise<void> | void;
  }
  export default IModal;
}

declare module "react-declarative/components/ModalManager/model/ModalRender" {
  export type ModalRender = () => React.ReactNode;
  export default ModalRender;
}

declare module "react-declarative/components/ModalManager/hooks/useModalManager" {
  import IModal from "react-declarative/components/ModalManager/model/IModal";
  interface IResult {
    total: number;
    push: (modal: IModal) => void;
    pop: () => void;
    clear: () => void;
  }
  export const useModalManager: () => IResult;
  export default useModalManager;
}

declare module "react-declarative/components/common/ListPicker" {
  export * from "react-declarative/components/common/ListPicker/ListPicker";
  export { default } from "react-declarative/components/common/ListPicker/ListPicker";
}

declare module "react-declarative/components/CardView/CardView" {
  import ICardViewProps from "react-declarative/components/CardView/model/ICardViewProps";
  import IItemData from "react-declarative/components/CardView/model/IItemData";
  /**
   * Render a CardView component.
   *
   * @template ItemData - The type of data for card items.
   *
   * @param props - The props for CardView component.
   * @returns - The CardView component.
   */
  export const CardView: <ItemData extends IItemData = any>(
    props: ICardViewProps<ItemData, any>,
  ) => JSX.Element;
  export default CardView;
}

declare module "react-declarative/components/CardView/model/ICardViewAction" {
  import IOption from "react-declarative/model/IOption";
  import IItemData from "react-declarative/components/CardView/model/IItemData";
  /**
   * Represents an interface for an action in a card view.
   * This interface extends the Omit<IOption, keyof { isVisible: never; isDisabled: never; }> interface.
   *
   * @template ItemData - The type of data associated with the item.
   * @template Payload - The type of payload.
   */
  export interface ICardViewAction<
    ItemData extends IItemData = any,
    Payload extends any = any,
  > extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isVisible?: (row: ItemData, payload: Payload) => Promise<boolean> | boolean;
    isDisabled?: (
      row: ItemData,
      payload: Payload,
    ) => Promise<boolean> | boolean;
  }
  export default ICardViewAction;
}

declare module "react-declarative/components/CardView/model/ICardViewOperation" {
  import { IActionTrigger } from "react-declarative/components/ActionTrigger";
  import IItemData from "react-declarative/components/CardView/model/IItemData";
  /**
   * Interface representing an operation for a card view.
   *
   * @template ItemData - The type of the item data.
   * @template Payload - The type of the payload.
   */
  export interface ICardViewOperation<
    ItemData extends IItemData = any,
    Payload extends any = any,
  > extends Omit<
      IActionTrigger,
      keyof {
        isAvailable: never;
      }
    > {
    isAvailable?: (
      selectedItems: ItemData[],
      isAllSelected: boolean,
      payload: Payload,
    ) => boolean | Promise<boolean>;
  }
  export default ICardViewOperation;
}

declare module "react-declarative/components/CardView/model/IItemData" {
  /**
   * Represents the data of an item.
   * @interface
   */
  export interface IItemData {
    id: string | number;
  }
  export default IItemData;
}

declare module "react-declarative/components/CalendarView/CalendarView" {
  import ICalendarViewProps from "react-declarative/components/CalendarView/model/ICalendarViewProps";
  /**
   * CalendarView component displays a calendar with various functionalities such as selecting dates, changing months, and changing years.
   *
   * @template Data - The type of data to be passed to the component
   * @template Payload - The type of payload to be used in the component
   *
   * @param props - The props object containing the necessary parameters for the CalendarView component
   *
   * @returns - The rendered CalendarView component
   */
  export const CalendarView: {
    <Data extends unknown = any, Payload extends unknown = any>(
      props: ICalendarViewProps<Data, Payload>,
    ): JSX.Element;
    init(): void;
  };
  export default CalendarView;
}

declare module "react-declarative/components/CalendarView/model/ICalendarItem" {
  import IAnything from "react-declarative/model/IAnything";
  import { stamp } from "react-declarative/utils/getMomentStamp";
  /**
   * Represents a calendar item.
   *
   * @export
   * @interface ICalendarItem
   * @template Data The type of data associated with the calendar item.
   * @template Payload The type of payload associated with the calendar item.
   */
  export interface ICalendarItem<Data = IAnything, Payload = IAnything> {
    data: Data;
    payload: Payload;
    stamp: stamp;
  }
  export default ICalendarItem;
}

declare module "react-declarative/components/CalendarView/model/ICalendarRequest" {
  import IAnything from "react-declarative/model/IAnything";
  /**
   * Represents a calendar request.
   * @template Payload - The type of payload for the calendar request.
   */
  export interface ICalendarRequest<Payload extends IAnything = IAnything> {
    payload: Payload;
    fromStamp: number;
    toStamp: number;
  }
  export default ICalendarRequest;
}

declare module "react-declarative/components/CalendarView/model/ICalendarTile" {
  import IAnything from "react-declarative/model/IAnything";
  import { ITile } from "react-declarative/components/Tile";
  /**
   * Represents a calendar tile.
   *
   * @template Data - The type of data associated with the tile.
   * @template Payload - The type of additional payload associated with the tile.
   */
  export interface ICalendarTile<Data = IAnything, Payload = IAnything>
    extends Omit<
      ITile<Data, Payload>,
      keyof {
        toggleSelection: never;
        isSelected: never;
      }
    > {
    onDaySelect: () => void;
  }
  export default ICalendarTile;
}

declare module "react-declarative/components/FeatureView/FeatureView" {
  import IFeatureViewProps from "react-declarative/components/FeatureView/model/IFeatureViewProps";
  /**
   * Represents a feature view component.
   *
   * @typedef FeatureView
   * @property changeSubject - The subject of the change.
   * @property outlinePaper - Whether to outline the paper.
   * @property transparentPaper - Whether the paper is transparent.
   * @property className - The CSS class name for the component.
   * @property style - The CSS styles for the component.
   * @property sx - The theme styles for the component.
   * @property data - The data for the features.
   * @property readonly - Whether the component is read-only.
   * @property features - The list of available features.
   * @property expandAll - Whether to expand all features.
   * @property onChange - The function to call when a feature is changed.
   *
   * @returns The rendered component.
   */
  export const FeatureView: ({
    changeSubject,
    outlinePaper,
    transparentPaper,
    className,
    style,
    sx,
    data,
    readonly,
    features,
    expandAll,
    onChange,
  }: IFeatureViewProps) => JSX.Element;
  export default FeatureView;
}

declare module "react-declarative/components/FeatureView/hooks/useFeatureView" {
  import { IParams as IActionModalParams } from "react-declarative/components/ActionModal";
  import IFeatureViewProps from "react-declarative/components/FeatureView/model/IFeatureViewProps";
  interface IParams
    extends Omit<
      IFeatureViewProps,
      keyof {
        changeSubject: never;
      }
    > {
    title: IActionModalParams["title"];
    fullScreen: IActionModalParams["fullScreen"];
    fallback: IActionModalParams["fallback"];
    onLoadStart: IActionModalParams["onLoadStart"];
    onLoadEnd: IActionModalParams["onLoadEnd"];
    onSubmit?: (data: string[] | null) => boolean | Promise<boolean>;
    submitLabel: IActionModalParams["submitLabel"];
    withStaticAction?: IActionModalParams["withStaticAction"];
    withActionButton?: IActionModalParams["withActionButton"];
  }
  /**
   * Custom hook for displaying a feature view modal.
   *
   * @param params - The parameters for the feature view modal.
   * @param params.data - The feature data.
   * @param params.title - The title of the modal.
   * @param params.features - The features to display.
   * @param params.expandAll - Whether to expand all feature sections.
   * @param params.readonly - Whether the modal is readonly.
   * @param params.fullScreen - Whether the modal should be displayed in full screen.
   * @param params.fallback - The fallback react element to display if modal content is unavailable.
   * @param params.onLoadStart - Callback function to be called when modal starts to load.
   * @param params.onLoadEnd - Callback function to be called when modal finishes loading.
   * @param params.onSubmit - Callback function to be called when modal is submitted.
   * @param params.onChange - Callback function to be called when modal value changes.
   * @param params.submitLabel - The label for the submit button.
   * @param params.withActionButton - Whether to include an action button in the modal.
   * @param params.withStaticAction - Whether to include a static action in the modal.
   * @return - The modal hook object.
   */
  export const useFeatureView: ({
    data,
    title,
    features,
    expandAll,
    readonly,
    fullScreen,
    fallback,
    onLoadStart,
    onLoadEnd,
    onSubmit,
    onChange,
    submitLabel,
    withActionButton,
    withStaticAction,
  }: IParams) => {
    open: boolean;
    render: () => JSX.Element;
    pickData: (param?: any) => void;
  };
  export default useFeatureView;
}

declare module "react-declarative/components/FeatureView/model/IFeature" {
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  import FeatureType from "react-declarative/components/FeatureView/model/FeatureType";
  export interface IFeature<
    Data extends IAnything = IAnything,
    Payload = IAnything,
  > {
    type?: FeatureType;
    name: string;
    label?: string;
    description?: string;
    defaultValue?: string | boolean;
    isDisabled?: IField<Data, Payload>["isDisabled"];
    isVisible?: IField<Data, Payload>["isVisible"];
    map?: IField<Data, Payload>["map"];
  }
  export default IFeature;
}

declare module "react-declarative/components/FeatureView/model/IFeatureGroup" {
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  import IFeature from "react-declarative/components/FeatureView/model/IFeature";
  export interface IFeatureGroup<
    Data extends IAnything = IAnything,
    Payload = IAnything,
  > {
    title: string;
    expanded?: boolean;
    children: IFeature<Data, Payload>[];
    isVisible?: IField<Data, Payload>["isVisible"];
    isDisabled?: IField<Data, Payload>["isDisabled"];
  }
  export default IFeatureGroup;
}

declare module "react-declarative/components/FeatureView/model/FeatureType" {
  export enum FeatureType {
    Boolean = "boolean-feature",
    Number = "number-feature",
  }
  export default FeatureType;
}

declare module "react-declarative/components/VisibilityView/VisibilityView" {
  import IVisibilityViewProps from "react-declarative/components/VisibilityView/model/IVisibilityViewProps";
  /**
   * Represents the visibility view component.
   *
   * @param VisibilityView - The props for the visibility view component.
   * @param changeSubject - The function to change the subject.
   * @param outlinePaper - Whether to outline the paper.
   * @param transparentPaper - Whether the paper is transparent.
   * @param className - The CSS class name.
   * @param style - The style object.
   * @param sx - The sx prop for emotion/styled.
   * @param expandAll - Whether to expand all fields.
   * @param readonly - Whether the fields are readonly.
   * @param onChange - The function to handle changes.
   * @param groups - The array of field groups.
   * @param data - The data object.
   * @param keyToTitle - The function to convert a key to a title.
   * @returns The visibility view component.
   */
  export const VisibilityView: ({
    changeSubject,
    outlinePaper,
    transparentPaper,
    className,
    style,
    sx,
    expandAll,
    readonly,
    onChange,
    groups,
    data,
    keyToTitle,
  }: IVisibilityViewProps) => JSX.Element;
  export default VisibilityView;
}

declare module "react-declarative/components/VisibilityView/model/IVisibilityGroup" {
  import IField from "react-declarative/model/IField";
  export interface IVisibilityGroup {
    name: string;
    title?: string;
    description?: string;
    fields: IField[];
  }
  export default IVisibilityGroup;
}

declare module "react-declarative/components/VisibilityView/hooks/useVisibilityView" {
  import { IParams as IActionModalParams } from "react-declarative/components/ActionModal";
  import IVisibilityViewProps from "react-declarative/components/VisibilityView/model/IVisibilityViewProps";
  type Data = Record<string, string[]>;
  interface IParams
    extends Omit<
      IVisibilityViewProps,
      keyof {
        changeSubject: never;
      }
    > {
    fullScreen: IActionModalParams["fullScreen"];
    fallback: IActionModalParams["fallback"];
    onLoadStart: IActionModalParams["onLoadStart"];
    onLoadEnd: IActionModalParams["onLoadEnd"];
    onSubmit?: (data: Data | null) => boolean | Promise<boolean>;
    submitLabel: IActionModalParams["submitLabel"];
  }
  /**
   * Initializes and returns a visibility view component.
   *
   * @param params - The configuration parameters.
   * @param params.groups - The groups of fields to display.
   * @param params.data - The initial data values.
   * @param params.keyToTitle - The function to generate a title from a key.
   * @param params.expandAll - Flag indicating if all fields should be expanded by default.
   * @param params.readonly - Flag indicating if the view should be readonly.
   * @param params.fullScreen - Flag indicating if the view should be displayed in full screen.
   * @param params.fallback - The component to display if the main component fails to load.
   * @param params.onLoadStart - The function to call when the view starts loading.
   * @param params.onLoadEnd - The function to call when the view finishes loading.
   * @param params.onSubmit - The function to call when the form is submitted.
   * @param params.onChange - The function to call when the form's data changes.
   * @param params.submitLabel - The label for the submit button.
   * @returns - The visibility view component.
   */
  export const useVisibilityView: ({
    groups,
    data,
    keyToTitle,
    expandAll,
    readonly,
    fullScreen,
    fallback,
    onLoadStart,
    onLoadEnd,
    onSubmit,
    onChange,
    submitLabel,
  }: IParams) => {
    open: boolean;
    render: () => JSX.Element;
    pickData: (param?: any) => void;
  };
  export default useVisibilityView;
}

declare module "react-declarative/components/RecordView/RecordView" {
  import IData from "react-declarative/components/RecordView/model/IData";
  import IRecordViewProps from "react-declarative/components/RecordView/model/IRecordViewProps";
  /**
   * Renders a view to display record data with search capabilities.
   *
   * @template Data - The type of the data object.
   * @template Payload - The type of the payload object.
   *
   * @param props - The component props.
   * @param props.data - The data object to be displayed.
   * @param [props.search=''] - The search string.
   * @param [props.onSearchChanged] - The callback function triggered when the search string changes.
   * @param [props.formatValue] - The function used to format the value of a data key.
   * @param [props.formatKey] - The function used to format the key of a data entry.
   * @param [props.withExpandAll=false] - Specifies whether to display an option to expand all entries.
   * @param [props.withExpandRoot=false] - Specifies whether to display an option to expand the root entry.
   * @param [props.withExpandLevel=0] - The maximum level of entries to be expanded by default.
   * @param [props.expandList] - The list of data keys to be expanded by default.
   * @param [props.keyWidth=2] - The width of the key column.
   * @param [props.valueWidth=10] - The width of the value column.
   * @param [props.totalWidth] - The total width of the container.
   * @param [props.background] - The background color of the container.
   * @param [props.BeforeSearch] - The component to render before the search field.
   * @param [props.AfterSearch] - The component to render after the search field.
   * @param [props.payload] - The payload object to be passed as a prop to the container component.
   * @param [props.otherProps] - Any other additional props to be passed to the container component.
   *
   * @returns The rendered component.
   */
  export const RecordView: {
    <Data extends unknown = IData, Payload = any>({
      data: upperData,
      search,
      onSearchChanged,
      formatValue,
      formatKey,
      withExpandAll,
      withExpandRoot,
      withExpandLevel,
      expandList,
      keyWidth,
      valueWidth,
      totalWidth,
      background,
      BeforeSearch,
      AfterSearch,
      payload,
      ...otherProps
    }: IRecordViewProps<Data, Payload>): JSX.Element;
    excelExport: (data: IData, sheetName?: string) => void;
  };
  export default RecordView;
}

declare module "react-declarative/components/RecordView/helpers/excelExport" {
  import IData from "react-declarative/components/RecordView/model/IData";
  export const excelExport: (data: IData, sheetName?: string) => void;
  export default excelExport;
}

declare module "react-declarative/components/Scaffold2/Scaffold2" {
  import IScaffold2Props from "react-declarative/components/Scaffold2/model/IScaffold2Props";
  /**
   * Represents a scaffold component that provides state management and context providers.
   * @function Scaffold2
   * @param props - The props object containing the component's properties.
   * @param [props.appName="Scaffold2"] - The name of the app.
   * @param [props.noSearch=false] - Specifies if the search feature is disabled.
   * @param [props.noAppName=false] - Specifies if the app name should be hidden.
   * @param props.onInit - The callback function invoked during initialization.
   * @param props.onLoadStart - The callback function invoked before loading data.
   * @param props.onLoadEnd - The callback function invoked after loading data.
   * @param props.fallback - The fallback component to render in case of an error.
   * @param props.options - The options object.
   * @param props.payload - The payload object.
   * @param [props.deps=[]] - The array of dependencies.
   * @param props.throwError - Specifies if an error should be thrown.
   * @returns - The rendered component.
   */
  export const Scaffold2: <T extends unknown = any>(
    props: IScaffold2Props<T>,
  ) => JSX.Element;
  export default Scaffold2;
}

declare module "react-declarative/components/Scaffold2/model/IScaffold2Action" {
  import IOption from "react-declarative/model/IOption";
  import Payload from "react-declarative/components/Scaffold2/model/Payload";
  export interface IScaffold2Action<T = Payload>
    extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isVisible?: (payload: T) => Promise<boolean> | boolean;
    isDisabled?: (payload: T) => Promise<boolean> | boolean;
  }
  export default IScaffold2Action;
}

declare module "react-declarative/components/Scaffold2/model/IScaffold2Group" {
  import React from "react";
  import IScaffold2Option, {
    IScaffold2OptionInternal,
  } from "react-declarative/components/Scaffold2/model/IScaffold2Option";
  import Payload from "react-declarative/components/Scaffold2/model/Payload";
  export interface IScaffold2Group<T = Payload> {
    id: string;
    label?: string;
    icon?: React.ComponentType;
    noHeader?: boolean;
    isVisible?: () => boolean | Promise<boolean>;
    isDisabled?: () => boolean | Promise<boolean>;
    children: IScaffold2Option<T>[];
  }
  export interface IScaffold2GroupInternal<T = Payload>
    extends Omit<
      IScaffold2Group<T>,
      keyof {
        isVisible: never;
        isDisabled: never;
        children: never;
      }
    > {
    path: string;
    visible: boolean;
    disabled: boolean;
    children: IScaffold2OptionInternal<T>[];
  }
  export default IScaffold2Group;
}

declare module "react-declarative/components/Scaffold2/model/IScaffold2Option" {
  import { SxProps } from "@mui/material";
  import IScaffold2Tab, {
    IScaffold2TabInternal,
  } from "react-declarative/components/Scaffold2/model/IScaffold2Tab";
  import Payload from "react-declarative/components/Scaffold2/model/Payload";
  export interface IScaffold2Option<T = Payload> {
    id: string;
    label?: string;
    lifted?: boolean;
    pin?: boolean;
    sx?: SxProps<any>;
    icon?: React.ComponentType<any>;
    tabs?: IScaffold2Tab<T>[];
    options?: IScaffold2Option<T>[];
    isVisible?: (payload: T) => boolean | Promise<boolean>;
    isDisabled?: (payload: T) => boolean | Promise<boolean>;
  }
  export interface IScaffold2OptionInternal<T = Payload>
    extends Omit<
      IScaffold2Option<T>,
      keyof {
        isVisible: never;
        isDisabled: never;
        options: never;
        tabs: never;
      }
    > {
    path: string;
    visible: boolean;
    disabled: boolean;
    options?: IScaffold2OptionInternal<T>[];
    tabs?: IScaffold2TabInternal<T>[];
  }
  export default IScaffold2Option;
}

declare module "react-declarative/components/Scaffold2/model/IScaffold2Tab" {
  import React from "react";
  import Payload from "react-declarative/components/Scaffold2/model/Payload";
  export interface IScaffold2Tab<T = Payload> {
    id: string;
    label?: string;
    icon?: React.ComponentType<any>;
    isVisible?: (payload: T) => Promise<boolean> | boolean;
    isDisabled?: (payload: T) => Promise<boolean> | boolean;
    isActive?: (payload: T) => Promise<boolean> | boolean;
  }
  export interface IScaffold2TabInternal<T = Payload>
    extends Omit<
      IScaffold2Tab<T>,
      keyof {
        isVisible: never;
        isDisabled: never;
        isActive: never;
      }
    > {
    id: string;
    path: string;
    label?: string;
    icon?: React.ComponentType<any>;
    visible: boolean;
    disabled: boolean;
    active: boolean;
  }
  export default IScaffold2Tab;
}

declare module "react-declarative/components/Breadcrumbs2/Breadcrumbs2" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import IBreadcrumbs2Action from "react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Action";
  import IBreadcrumbs2Option from "react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Option";
  interface IBreadcrumbs2Props<T extends any = any> {
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    onAction?: (action: string) => void | Promise<void>;
    actions?: IBreadcrumbs2Action<T>[];
    items: IBreadcrumbs2Option<T>[];
    payload?: T;
    BeforeMenuContent?: React.ComponentType<any>;
    AfterMenuContent?: React.ComponentType<any>;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
  }
  /**
   * Renders a breadcrumbs component with customizable items and actions.
   *
   * @template T - The type of payload data.
   * @param props - The props object.
   * @param [props.className] - The class name for the component container.
   * @param [props.style] - The inline styles for the component container.
   * @param [props.sx] - The sx prop for the component container.
   * @param [props.onAction=() => undefined] - The callback function to be called when an action is performed.
   * @param props.items - The array of breadcrumb items.
   * @param props.actions - The array of actions to be displayed in the action menu.
   * @param props.payload - The payload data.
   * @param [props.BeforeMenuContent] - The custom content to be displayed before the action menu.
   * @param [props.AfterMenuContent] - The custom content to be displayed after the action menu.
   * @param [props.onLoadStart] - The callback function to be called when the component is loading.
   * @param [props.onLoadEnd] - The callback function to be called when the component finishes loading.
   * @param [props.fallback] - The fallback component to be displayed while loading.
   * @param [props.throwError] - Whether to throw an error on loading failure.
   * @returns The breadcrumbs component.
   */
  export const Breadcrumbs2: <T extends unknown = any>({
    className,
    style,
    sx,
    onAction,
    items,
    actions,
    payload,
    BeforeMenuContent,
    AfterMenuContent,
    onLoadStart,
    onLoadEnd,
    fallback,
    throwError,
  }: IBreadcrumbs2Props<T>) => JSX.Element;
  export default Breadcrumbs2;
}

declare module "react-declarative/components/Breadcrumbs2/model/Breadcrumbs2Type" {
  /**
   * Represents the type of breadcrumbs in Breadcrumbs2.
   */
  export enum Breadcrumbs2Type {
    Link = "breadcrumbs2-link",
    Button = "breadcrumbs2-button",
    Component = "breadcrumbs2-component",
  }
  export default Breadcrumbs2Type;
}

declare module "react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Action" {
  import IAnything from "react-declarative/model/IAnything";
  import IOption from "react-declarative/model/IOption";
  /**
   * Interface for defining actions related to breadcrumbs with optional data payload.
   * @template Data - The type of the data payload.
   */
  export interface IBreadcrumbs2Action<Data = IAnything>
    extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isVisible?: (payload: Data) => Promise<boolean> | boolean;
    isDisabled?: (payload: Data) => Promise<boolean> | boolean;
  }
  export default IBreadcrumbs2Action;
}

declare module "react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Option" {
  import { SxProps } from "@mui/material";
  import IAnything from "react-declarative/model/IAnything";
  import IOption from "react-declarative/model/IOption";
  import Breadcrumbs2Type from "react-declarative/components/Breadcrumbs2/model/Breadcrumbs2Type";
  /**
   * Represents an option configuration for IBreadcrumbs2 component.
   *
   * @template Data - The type of additional data associated with the option.
   */
  export interface IBreadcrumbs2Option<Data = IAnything>
    extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
        label: never;
      }
    > {
    type: Breadcrumbs2Type;
    label?: React.ReactNode;
    element?: React.ComponentType<{
      payload: Data;
      disabled: boolean;
    }>;
    sx?: SxProps<any>;
    compute?: (payload: Data) => Promise<string> | string;
    isVisible?: (payload: Data) => Promise<boolean> | boolean;
    isDisabled?: (payload: Data) => Promise<boolean> | boolean;
  }
  export default IBreadcrumbs2Option;
}

declare module "react-declarative/components/common/Group" {
  export * from "react-declarative/components/common/Group/Group";
  export { default } from "react-declarative/components/common/Group/Group";
}

declare module "react-declarative/components/common/Outline" {
  export * from "react-declarative/components/common/Outline/Outline";
  export { default } from "react-declarative/components/common/Outline/Outline";
}

declare module "react-declarative/components/common/Paper" {
  export * from "react-declarative/components/common/Paper/Paper";
  export { default } from "react-declarative/components/common/Paper/Paper";
}

declare module "react-declarative/components/common/Expansion" {
  export * from "react-declarative/components/common/Expansion/Expansion";
  export { default } from "react-declarative/components/common/Expansion/Expansion";
}

declare module "react-declarative/components/SearchView/model/ISearchItemProps" {
  import IAnything from "react-declarative/model/IAnything";
  import ISearchItem from "react-declarative/components/SearchView/model/ISearchItem";
  export interface ISearchItemProps<T extends IAnything = IAnything>
    extends Omit<
      ISearchItem,
      keyof {
        data: never;
      }
    > {
    disabled: boolean;
    payload: IAnything;
    data: T;
  }
  export default ISearchItemProps;
}

declare module "react-declarative/components/SearchView/model/ISearchInputProps" {
  import ISearchViewProps from "react-declarative/components/SearchView/model/ISearchViewProps";
  import TSubject from "react-declarative/model/TSubject";
  export interface ISearchInputProps {
    placeholder?: string;
    type: Exclude<ISearchViewProps["type"], undefined>;
    mode: Exclude<ISearchViewProps["mode"], undefined>;
    autoComplete: ISearchViewProps["autoComplete"];
    pattern: ISearchViewProps["pattern"];
    reloadSubject: TSubject<void>;
    onTextChange: (value: string) => void;
    loading: boolean;
    getValue: () => string;
  }
  export default ISearchInputProps;
}

declare module "react-declarative/components/SearchView/model/ICreateButtonProps" {
  import IAnything from "react-declarative/model/IAnything";
  export interface ICreateButtonProps {
    search: string;
    payload: IAnything;
  }
  export default ICreateButtonProps;
}

declare module "react-declarative/components/TreeView/model/INode" {
  /**
   * Represents a Node in a tree structure.
   */
  export interface INode {
    label: string;
    value: string;
    child?: Omit<INode, "child">[];
  }
  export default INode;
}

declare module "react-declarative/components/List/slots/ActionAddSlot" {
  export * from "react-declarative/components/List/slots/ActionAddSlot/IActionAddSlot";
  export * from "react-declarative/components/List/slots/ActionAddSlot/ActionAddSlot";
  export { default } from "react-declarative/components/List/slots/ActionAddSlot/ActionAddSlot";
}

declare module "react-declarative/components/List/slots/ActionFabSlot" {
  export * from "react-declarative/components/List/slots/ActionFabSlot/IActionFabSlot";
  export * from "react-declarative/components/List/slots/ActionFabSlot/ActionFabSlot";
  export { default } from "react-declarative/components/List/slots/ActionFabSlot/ActionFabSlot";
}

declare module "react-declarative/components/List/slots/ActionMenuSlot" {
  export * from "react-declarative/components/List/slots/ActionMenuSlot/IActionMenuSlot";
  export * from "react-declarative/components/List/slots/ActionMenuSlot/ActionMenuSlot";
  export { default } from "react-declarative/components/List/slots/ActionMenuSlot/ActionMenuSlot";
}

declare module "react-declarative/components/List/slots/BodyRowSlot" {
  export * from "react-declarative/components/List/slots/BodyRowSlot/IBodyRowSlot";
  export * from "react-declarative/components/List/slots/BodyRowSlot/BodyRowSlot";
  export { default } from "react-declarative/components/List/slots/BodyRowSlot/BodyRowSlot";
}

declare module "react-declarative/components/List/slots/CheckboxCellSlot" {
  export * from "react-declarative/components/List/slots/CheckboxCellSlot/ICheckboxCellSlot";
  export * from "react-declarative/components/List/slots/CheckboxCellSlot/CheckboxCellSlot";
  export { default } from "react-declarative/components/List/slots/CheckboxCellSlot/CheckboxCellSlot";
}

declare module "react-declarative/components/List/slots/CommonCellSlot" {
  export * from "react-declarative/components/List/slots/CommonCellSlot/ICommonCellSlot";
  export * from "react-declarative/components/List/slots/CommonCellSlot/CommonCellSlot";
  export { default } from "react-declarative/components/List/slots/CommonCellSlot/CommonCellSlot";
}

declare module "react-declarative/components/List/slots/HeadRowSlot" {
  export * from "react-declarative/components/List/slots/HeadRowSlot/IHeadRowSlot";
  export * from "react-declarative/components/List/slots/HeadRowSlot/HeadRowSlot";
  export { default } from "react-declarative/components/List/slots/HeadRowSlot/HeadRowSlot";
}

declare module "react-declarative/components/List/slots/ActionListSlot" {
  export * from "react-declarative/components/List/slots/ActionListSlot/IActionListSlot";
  export * from "react-declarative/components/List/slots/ActionListSlot/ActionListSlot";
  export { default } from "react-declarative/components/List/slots/ActionListSlot/ActionListSlot";
}

declare module "react-declarative/components/List/slots/ChipListSlot" {
  export * from "react-declarative/components/List/slots/ChipListSlot/IChipListSlot";
  export * from "react-declarative/components/List/slots/ChipListSlot/ChipListSlot";
  export { default } from "react-declarative/components/List/slots/ChipListSlot/ChipListSlot";
}

declare module "react-declarative/components/List/slots/FilterListSlot" {
  export * from "react-declarative/components/List/slots/FilterListSlot/IFilterListSlot";
  export * from "react-declarative/components/List/slots/FilterListSlot/FilterListSlot";
  export { default } from "react-declarative/components/List/slots/FilterListSlot/FilterListSlot";
}

declare module "react-declarative/components/List/slots/OperationListSlot" {
  export * from "react-declarative/components/List/slots/OperationListSlot/IOperationListSlot";
  export * from "react-declarative/components/List/slots/OperationListSlot/OperationListSlot";
  export { default } from "react-declarative/components/List/slots/OperationListSlot/OperationListSlot";
}

declare module "react-declarative/components/List/slots/SearchSlot" {
  export * from "react-declarative/components/List/slots/SearchSlot/ISearchSlot";
  export * from "react-declarative/components/List/slots/SearchSlot/SearchSlot";
  export { default } from "react-declarative/components/List/slots/SearchSlot/SearchSlot";
}

declare module "react-declarative/components/List/components/SlotFactory/SlotFactory" {
  import * as React from "react";
  import ISlotFactoryContext from "react-declarative/components/List/components/SlotFactory/ISlotFactoryContext";
  interface ISlotFactoryProps extends Partial<ISlotFactoryContext> {
    children: React.ReactNode;
  }
  /**
   * SlotFactory - A factory function to create slots for a given SlotContext.
   *
   * @param props - The props for the SlotFactory.
   * @param props.children - The children to render within the SlotFactory.
   * @param props.currentSlots - The slots to be added/overridden within the SlotFactory.
   *
   * @returns The rendered children within the SlotFactory.
   */
  export const SlotFactory: ({
    children,
    ...currentSlots
  }: Partial<ISlotFactoryProps>) => JSX.Element;
  export default SlotFactory;
}

declare module "react-declarative/components/List/components/SlotFactory/SlotContext" {
  import ISlotFactoryContext from "react-declarative/components/List/components/SlotFactory/ISlotFactoryContext";
  export const defaultSlots: {
    BodyRow: <RowData extends import("../../../..").IRowData = any>(
      props: import("../..").IBodyRowSlot<RowData>,
    ) => JSX.Element;
    CheckboxCell: <RowData_1 extends import("../../../..").IRowData = any>({
      row,
      disabled,
    }: import("./components/CheckboxCell").ICheckboxCellProps<RowData_1>) => JSX.Element;
    CommonCell: <RowData_2 extends import("../../../..").IRowData = any>({
      column,
      row,
      disabled,
      onMenuToggle,
      onAction,
    }: import("../..").ICommonCellSlot<RowData_2>) => any;
    HeadRow: (props: import("../..").IHeadRowSlot<any>) => JSX.Element;
    ActionAdd: ({
      action,
      width,
      label,
      isVisible,
      isDisabled,
    }: import("../..").IActionAddSlot<any, any>) => JSX.Element;
    ActionMenu: ({
      options,
      deps,
    }: import("../..").IActionMenuSlot) => JSX.Element;
    ActionFab: ({
      action,
      label,
      width,
      icon: Icon,
      isVisible,
      isDisabled,
    }: import("../..").IActionFabSlot<any, any>) => JSX.Element;
    ChipListSlot: ({
      listChips,
      loading,
    }: import("../..").IChipListSlot<any>) => JSX.Element;
    ActionListSlot: <FilterData extends {}>({
      className,
      actions,
      style,
      title,
      height,
      width,
      deps,
    }: import("../..").IActionListSlot<FilterData>) => JSX.Element;
    FilterListSlot: <FilterData_1 extends {}>({
      className,
      style,
      height,
      filterData,
      filters,
      change,
      ready,
      label,
      loading,
      withSearch,
      withToggledFilters,
      search,
      onSearchChange,
      onFilterChange,
      onCollapsedChange,
    }: import("../..").IFilterListSlot<FilterData_1>) => JSX.Element;
    OperationListSlot: ({
      className,
      style,
      operations,
      width,
    }: import("../..").IOperationListSlot) => JSX.Element;
    SearchSlot: ({
      className,
      style,
      label,
      loading,
      search,
      onSearchChange,
    }: import("../..").ISearchSlot) => JSX.Element;
    DesktopBodyRow: <RowData_3 extends import("../../../..").IRowData = any>({
      row,
      mode,
      columns,
      disabled,
      fullWidth,
    }: import("../..").IBodyRowSlot<RowData_3>) => JSX.Element;
    MobileBodyRow: <RowData_4 extends import("../../../..").IRowData = any>({
      row,
      mode,
      disabled,
      columns,
      fullWidth,
    }: import("../..").IBodyRowSlot<RowData_4>) => JSX.Element;
  };
  export const SlotContext: import("react").Context<ISlotFactoryContext>;
  export default SlotContext;
}

declare module "react-declarative/components/List/components/SlotFactory/ISlotFactoryContext" {
  import { ComponentType } from "react";
  import { IBodyRowSlot } from "react-declarative/components/List/slots/BodyRowSlot";
  import { ICheckboxCellSlot } from "react-declarative/components/List/slots/CheckboxCellSlot";
  import { ICommonCellSlot } from "react-declarative/components/List/slots/CommonCellSlot";
  import { IHeadRowSlot } from "react-declarative/components/List/slots/HeadRowSlot";
  import { IActionAddSlot } from "react-declarative/components/List/slots/ActionAddSlot";
  import { IActionMenuSlot } from "react-declarative/components/List/slots/ActionMenuSlot";
  import { IActionFabSlot } from "react-declarative/components/List/slots/ActionFabSlot";
  import { IActionListSlot } from "react-declarative/components/List/slots/ActionListSlot";
  import { IChipListSlot } from "react-declarative/components/List/slots/ChipListSlot";
  import { IFilterListSlot } from "react-declarative/components/List/slots/FilterListSlot";
  import { IOperationListSlot } from "react-declarative/components/List/slots/OperationListSlot";
  import { ISearchSlot } from "react-declarative/components/List/slots/SearchSlot";
  export interface ISlotFactoryContext {
    DesktopBodyRow: ComponentType<IBodyRowSlot>;
    MobileBodyRow: ComponentType<IBodyRowSlot>;
    BodyRow: ComponentType<IBodyRowSlot>;
    CheckboxCell: ComponentType<ICheckboxCellSlot>;
    CommonCell: ComponentType<ICommonCellSlot>;
    HeadRow: ComponentType<IHeadRowSlot>;
    ActionAdd: ComponentType<IActionAddSlot>;
    ActionFab: ComponentType<IActionFabSlot>;
    ActionMenu: ComponentType<IActionMenuSlot>;
    ActionListSlot: ComponentType<IActionListSlot>;
    FilterListSlot: ComponentType<IFilterListSlot>;
    ChipListSlot: ComponentType<IChipListSlot>;
    OperationListSlot: ComponentType<IOperationListSlot>;
    SearchSlot: ComponentType<ISearchSlot>;
  }
  export default ISlotFactoryContext;
}

declare module "react-declarative/components/Async/Async" {
  import * as React from "react";
  import TSubject from "react-declarative/model/TSubject";
  export interface IAsyncProps<T extends any = object> {
    loading?: boolean;
    reloadSubject?: TSubject<void>;
    children: (p: T) => Result | Promise<Result>;
    fallback?: (e: Error) => void;
    Loader?: React.ComponentType<any>;
    Error?: React.ComponentType<any>;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    payload?: T;
    deps?: any[];
    throwError?: boolean;
  }
  type Result = React.ReactNode | void;
  /**
   * Async
   * @template T - The type of the payload data.
   * @param params - The parameters object.
   * @param params.reloadSubject - The subject used to trigger a reload of the async data.
   * @param params.loading - A boolean indicating whether the async data is currently being loaded.
   * @param params.children - The children component that renders the async data.
   * @param params.fallback - The fallback component to render in case of an error.
   * @param params.Loader - The loader component to render while the async data is being loaded.
   * @param params.Error - The error component to render in case of an error.
   * @param params.onLoadStart - A function to be called when the async data loading starts.
   * @param params.onLoadEnd - A function to be called when the async data loading ends.
   * @param params.payload - The payload data to be passed to the children component.
   * @param params.deps - The dependencies of the async data.
   * @param params.throwError - A boolean indicating whether to throw an error in case of an error or to fallback.
   * @returns - The rendered component.
   */
  export const Async: <T extends unknown = object>({
    reloadSubject: upperReloadSubject,
    loading: upperLoading,
    children,
    fallback,
    Loader,
    Error,
    onLoadStart,
    onLoadEnd,
    payload,
    deps,
    throwError,
  }: IAsyncProps<T>) => JSX.Element;
  export default Async;
}

declare module "react-declarative/components/One/components/SlotFactory/SlotFactory" {
  import * as React from "react";
  import ISlotFactoryContext from "react-declarative/components/One/components/SlotFactory/ISlotFactoryContext";
  interface ISlotFactoryProps extends Partial<ISlotFactoryContext> {
    children: React.ReactNode;
  }
  /**
   * SlotFactory function
   * @param param - Slots prop for SlotFactory
   * @param param.children - React node to be rendered as children
   * @returns React node containing the children with the provided slots
   */
  export const SlotFactory: ({
    children,
    ...currentSlots
  }: Partial<ISlotFactoryProps>) => JSX.Element;
  export default SlotFactory;
}

declare module "react-declarative/components/One/components/SlotFactory/SlotContext" {
  import ISlotFactoryContext from "react-declarative/components/One/components/SlotFactory/ISlotFactoryContext";
  export const defaultSlots: {
    CheckBox: ({
      disabled,
      onChange,
      title,
      value,
    }: import("../..").ICheckBoxSlot) => JSX.Element;
    Combo: ({
      value: upperValue,
      disabled,
      readonly,
      description,
      placeholder,
      outlined,
      itemList,
      virtualListBox,
      watchItemList,
      labelShrink,
      noDeselect,
      freeSolo,
      title,
      dirty,
      invalid,
      incorrect,
      withContextMenu,
      tr,
      onChange,
    }: import("../..").IComboSlot) => JSX.Element;
    Items: ({
      value: upperValue,
      disabled,
      readonly,
      description,
      placeholder,
      outlined,
      itemList,
      freeSolo,
      noDeselect,
      virtualListBox,
      watchItemList,
      labelShrink,
      dirty,
      invalid,
      incorrect,
      title,
      tr,
      onChange,
      withContextMenu,
    }: import("../..").IItemsSlot) => JSX.Element;
    Line: ({
      title,
      lineTransparent,
    }: import("../..").ILineSlot) => JSX.Element;
    Radio: ({
      disabled,
      onChange,
      title,
      radioValue,
      value,
      name,
    }: import("../..").IRadioSlot) => JSX.Element;
    Rating: ({
      value,
      disabled,
      readonly,
      onChange,
    }: import("../..").IRatingSlot) => JSX.Element;
    Progress: ({
      maxPercent,
      showPercentLabel,
      value,
    }: import("../..").IProgressSlot) => JSX.Element;
    Typography: ({
      value,
      placeholder,
      typoVariant,
      style,
    }: import("../..").ITypographySlot) => JSX.Element;
    Text: ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      inputType,
      inputMode,
      inputPattern,
      labelShrink,
      description,
      outlined,
      title,
      leadingIcon: li,
      trailingIcon: ti,
      leadingIconClick: lic,
      trailingIconClick: tic,
      leadingIconRipple: lir,
      trailingIconRipple: tir,
      inputRows: rows,
      placeholder,
      inputAutocomplete: autoComplete,
      inputFormatterSymbol: symbol,
      inputFormatterAllowed: allowed,
      inputFormatterReplace: replace,
      inputFormatterTemplate: template,
      inputFormatter,
      dirty,
      loading,
      autoFocus,
      inputRef,
      onChange,
    }: import("../..").ITextSlot) => JSX.Element;
    Date: ({
      invalid,
      incorrect,
      value: upperValue,
      disabled,
      readonly,
      description,
      outlined,
      title,
      placeholder,
      labelShrink,
      dirty,
      autoFocus,
      inputRef,
      onChange,
      withContextMenu,
    }: import("../..").IDateSlot) => JSX.Element;
    Time: ({
      invalid,
      incorrect,
      value: upperValue,
      disabled,
      readonly,
      description,
      outlined,
      title,
      labelShrink,
      placeholder,
      dirty,
      autoFocus,
      inputRef,
      onChange,
      withContextMenu,
    }: import("../..").ITimeSlot) => JSX.Element;
    Switch: ({
      disabled,
      value,
      onChange,
      title,
      switchNoColor,
      switchActiveLabel,
    }: import("../..").ISwitchSlot) => JSX.Element;
    Slider: ({
      value,
      onChange,
      leadingIcon: li,
      trailingIcon: ti,
      leadingIconClick: lic,
      trailingIconClick: tic,
      leadingIconRipple: lir,
      trailingIconRipple: tir,
      labelFormatSlider,
      stepSlider,
      disabled,
      readonly,
      maxSlider,
      minSlider,
    }: import("../..").ISliderSlot) => JSX.Element;
    File: ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      description,
      outlined,
      labelShrink,
      title,
      placeholder,
      dirty,
      loading: upperLoading,
      inputRef,
      onChange,
      fileAccept,
      name,
      upload,
      view,
    }: import("../..").IFileSlot) => JSX.Element;
    Choose: ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      description,
      outlined,
      title,
      placeholder,
      labelShrink,
      dirty,
      loading: upperLoading,
      inputRef,
      onChange,
      choose,
      tr,
    }: import("../..").IChooseSlot) => JSX.Element;
    Complete: ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      inputType,
      inputMode,
      inputPattern,
      labelShrink,
      description,
      outlined,
      keepRaw,
      title,
      placeholder,
      inputAutocomplete: autoComplete,
      dirty,
      loading: upperLoading,
      tip,
      tipSelect,
      autoFocus,
      onChange,
      inputFormatterSymbol: symbol,
      inputFormatterAllowed: allowed,
      inputFormatterReplace: replace,
      inputFormatterTemplate: template,
      inputFormatter,
      withContextMenu,
    }: import("../..").ICompleteSlot) => JSX.Element;
    YesNo: ({
      value: upperValue,
      disabled,
      readonly,
      description,
      placeholder,
      outlined,
      virtualListBox,
      labelShrink,
      noDeselect,
      title,
      tr,
      dirty,
      invalid,
      incorrect,
      onChange,
    }: import("../..").IYesNoSlot) => JSX.Element;
    Dict: ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      inputType,
      inputMode,
      inputPattern,
      inputAutocomplete,
      description,
      outlined,
      title,
      placeholder,
      dirty,
      loading,
      inputRef,
      onChange,
      dictLimit,
      dictDelay,
      dictOnText,
      dictOnItem,
      dictSearch,
      dictValue,
      dictSearchText,
      dictOnAppend,
      dictSearchItem,
      dictCreateButton,
      inputFormatterSymbol: symbol,
      inputFormatterAllowed: allowed,
      inputFormatterReplace: replace,
      inputFormatterTemplate: template,
      inputFormatter,
      leadingIcon: li,
      trailingIcon: ti,
      leadingIconClick: lic,
      trailingIconClick: tic,
      leadingIconRipple: lir,
      trailingIconRipple: tir,
    }: import("../..").IDictSlot) => JSX.Element;
    Tree: ({
      invalid,
      incorrect,
      value,
      disabled,
      readonly,
      description,
      outlined,
      title,
      placeholder,
      dirty,
      loading: upperLoading,
      onChange,
      itemTree,
    }: import("../..").ITreeSlot) => JSX.Element;
  };
  export const SlotContext: import("react").Context<ISlotFactoryContext>;
  export default SlotContext;
}

declare module "react-declarative/components/One/components/SlotFactory/ISlotFactoryContext" {
  import { ComponentType } from "react";
  import { IProgressSlot } from "react-declarative/components/One/slots/ProgressSlot";
  import { ICheckBoxSlot } from "react-declarative/components/One/slots/CheckBoxSlot";
  import { IItemsSlot } from "react-declarative/components/One/slots/ItemsSlot";
  import { IComboSlot } from "react-declarative/components/One/slots/ComboSlot";
  import { ILineSlot } from "react-declarative/components/One/slots/LineSlot";
  import { IRadioSlot } from "react-declarative/components/One/slots/RadioSlot";
  import { IRatingSlot } from "react-declarative/components/One/slots/RatingSlot";
  import { ITypographySlot } from "react-declarative/components/One/slots/TypographySlot";
  import { ITextSlot } from "react-declarative/components/One/slots/TextSlot";
  import { IDateSlot } from "react-declarative/components/One/slots/DateSlot";
  import { ITimeSlot } from "react-declarative/components/One/slots/TimeSlot";
  import { ISwitchSlot } from "react-declarative/components/One/slots/SwitchSlot";
  import { ISliderSlot } from "react-declarative/components/One/slots/SliderSlot";
  import { IFileSlot } from "react-declarative/components/One/slots/FileSlot/IFileSlot";
  import { IChooseSlot } from "react-declarative/components/One/slots/ChooseSlot";
  import { ICompleteSlot } from "react-declarative/components/One/slots/CompleteSlot";
  import { IYesNoSlot } from "react-declarative/components/One/slots/YesNoSlot";
  import { IDictSlot } from "react-declarative/components/One/slots/DictSlot";
  import { ITreeSlot } from "react-declarative/components/One/slots/TreeSlot";
  /**
   * A context object that provides access to various component types used by the slot factory.
   * @typedef ISlotFactoryContext
   * @property CheckBox - The component type for Checkbox slots.
   * @property Combo - The component type for Combo slots.
   * @property YesNo - The component type for YesNo slots.
   * @property Items - The component type for Items slots.
   * @property Line - The component type for Line slots.
   * @property Progress - The component type for Progress slots.
   * @property Radio - The component type for Radio slots.
   * @property Rating - The component type for Rating slots.
   * @property Typography - The component type for Typography slots.
   * @property Text - The component type for Text slots.
   * @property Date - The component type for Date slots.
   * @property Time - The component type for Time slots.
   * @property Switch - The component type for Switch slots.
   * @property Slider - The component type for Slider slots.
   * @property File - The component type for File slots.
   * @property Choose - The component type for Choose slots.
   * @property Complete - The component type for Complete slots.
   * @property Dict - The component type for Dict slots.
   * @property Tree - The component type for Tree slots.
   */
  export interface ISlotFactoryContext {
    CheckBox: ComponentType<ICheckBoxSlot>;
    Combo: ComponentType<IComboSlot>;
    YesNo: ComponentType<IYesNoSlot>;
    Items: ComponentType<IItemsSlot>;
    Line: ComponentType<ILineSlot>;
    Progress: ComponentType<IProgressSlot>;
    Radio: ComponentType<IRadioSlot>;
    Rating: ComponentType<IRatingSlot>;
    Typography: ComponentType<ITypographySlot>;
    Text: ComponentType<ITextSlot>;
    Date: ComponentType<IDateSlot>;
    Time: ComponentType<ITimeSlot>;
    Switch: ComponentType<ISwitchSlot>;
    Slider: ComponentType<ISliderSlot>;
    File: ComponentType<IFileSlot>;
    Choose: ComponentType<IChooseSlot>;
    Complete: ComponentType<ICompleteSlot>;
    Dict: ComponentType<IDictSlot>;
    Tree: ComponentType<ITreeSlot>;
  }
  export default ISlotFactoryContext;
}

declare module "react-declarative/components/One/One" {
  import IField from "react-declarative/model/IField";
  import TypedField from "react-declarative/model/TypedField";
  import IOnePublicProps from "react-declarative/model/IOnePublicProps";
  /**
   * Creates a json template engine called `One` with the given props.
   *
   * @param props - The props for the component.
   * @param props.createField - The function to create a field.
   * @param props.createLayout - The function to create a layout.
   * @param props.apiRef - The API reference object.
   * @param props.changeSubject - The subject for change events.
   * @param props.reloadSubject - The subject for reload events.
   * @param props.updateSubject - The subject for update events.
   * @param props.onFocus - The callback function for focus events.
   * @param props.onBlur - The callback function for blur events.
   * @param props.onMenu - The callback function for menu events.
   * @param props.onClick - The callback function for click events.
   * @param props.onReady - The callback function for ready events.
   * @param props.onChange - The callback function for change events.
   * @param props.onInvalid - The callback function for invalid events.
   * @param props.onLoadStart - The callback function for load start events.
   * @param props.onLoadEnd - The callback function for load end events.
   * @param props.features - Additional features for the component.
   * @param props.otherProps - Additional props for the component.
   * @returns - The rendered component.
   */
  export const One: {
    <Data extends unknown = any, Payload = any, Field = IField<Data, any>>(
      props: IOnePublicProps<Data, Payload, Field>,
    ): JSX.Element;
    displayName: string;
    /**
     * После написания формы можно включить строгую
     * проверку типов полей
     * <One.typed handler={...
     *     ^^^^^^
     */
    typed: {
      <
        Data_1 extends unknown = any,
        Payload_1 extends unknown = any,
        Field_1 = TypedField<Data_1, any>,
      >(
        props: IOnePublicProps<Data_1, Payload_1, Field_1>,
      ): JSX.Element;
      displayName: string;
    };
  };
  export const OneTyped: {
    <
      Data extends unknown = any,
      Payload extends unknown = any,
      Field = TypedField<Data, any>,
    >(
      props: IOnePublicProps<Data, Payload, Field>,
    ): JSX.Element;
    displayName: string;
  };
  export default One;
}

declare module "react-declarative/components/One/slots" {
  export * from "react-declarative/components/One/slots/CheckBoxSlot";
  export * from "react-declarative/components/One/slots/ComboSlot";
  export * from "react-declarative/components/One/slots/ItemsSlot";
  export * from "react-declarative/components/One/slots/LineSlot";
  export * from "react-declarative/components/One/slots/ProgressSlot";
  export * from "react-declarative/components/One/slots/RadioSlot";
  export * from "react-declarative/components/One/slots/RatingSlot";
  export * from "react-declarative/components/One/slots/SliderSlot";
  export * from "react-declarative/components/One/slots/SwitchSlot";
  export * from "react-declarative/components/One/slots/TextSlot";
  export * from "react-declarative/components/One/slots/TypographySlot";
  export * from "react-declarative/components/One/slots/DateSlot";
  export * from "react-declarative/components/One/slots/TimeSlot";
  export * from "react-declarative/components/One/slots/FileSlot";
  export * from "react-declarative/components/One/slots/ChooseSlot";
  export * from "react-declarative/components/One/slots/CompleteSlot";
  export * from "react-declarative/components/One/slots/YesNoSlot";
  export * from "react-declarative/components/One/slots/DictSlot";
  export * from "react-declarative/components/One/slots/TreeSlot";
}

declare module "react-declarative/components/One/components/OneConfig" {
  export * from "react-declarative/components/One/components/OneConfig/OneConfig";
  export { default } from "react-declarative/components/One/components/OneConfig/OneConfig";
}

declare module "react-declarative/components/One/config/createField" {
  import IEntity from "react-declarative/model/IEntity";
  /**
   * Фабрика для создания полей
   */
  export const createField: <Data extends unknown = any>(
    entity: IEntity<Data, any>,
    currentPath?: string,
  ) => JSX.Element;
  export default createField;
}

declare module "react-declarative/components/One/components/makeField" {
  export * from "react-declarative/components/One/components/makeField/makeField";
  export { default } from "react-declarative/components/One/components/makeField/makeField";
}

declare module "react-declarative/components/One/config/createLayout" {
  import * as React from "react";
  import IEntity from "react-declarative/model/IEntity";
  /**
   * Фабрика для создания компоновок
   */
  export const createLayout: <Data extends unknown = any>(
    entity: IEntity<Data, any>,
    children: React.ReactNode,
    currentPath?: string,
  ) => JSX.Element;
  export default createLayout;
}

declare module "react-declarative/components/One/components/makeLayout" {
  export * from "react-declarative/components/One/components/makeLayout/makeLayout";
  export { default } from "react-declarative/components/One/components/makeLayout/makeLayout";
}

declare module "react-declarative/components/One/context/MenuProvider" {
  import * as React from "react";
  import { IParams } from "react-declarative/components/One/components/common/MenuItems";
  import TSubject from "react-declarative/model/TSubject";
  interface IContext {
    createContextMenu: (
      params: IParams,
    ) => React.MouseEventHandler<HTMLDivElement>;
    requestSubject: TSubject<void>;
  }
  interface IMenuProviderProps {
    children: React.ReactNode;
  }
  export const MenuProvider: ({ children }: IMenuProviderProps) => JSX.Element;
  export const useOneMenu: () => IContext;
  export default MenuProvider;
}

declare module "react-declarative/components/One/context/PropsProvider" {
  import * as React from "react";
  import IField from "react-declarative/model/IField";
  import IAnything from "react-declarative/model/IAnything";
  import IOneProps from "react-declarative/model/IOneProps";
  interface IPropsProviderProps<
    Data extends IAnything = IAnything,
    Field extends IField<Data> = IField<Data>,
  > extends IOneProps<Data, Field> {
    children: React.ReactNode;
  }
  export const PropsProvider: <
    Data extends unknown = any,
    Field extends IField<Data, any> = IField<Data, any>,
  >({
    children,
    ...props
  }: IPropsProviderProps<Data, Field>) => JSX.Element;
  export const useOneProps: <Data extends unknown = any>() => IOneProps<
    Data,
    any,
    IField<Data, any>
  >;
  export default PropsProvider;
}

declare module "react-declarative/components/One/context/StateProvider" {
  import * as React from "react";
  import IField from "react-declarative/model/IField";
  import IAnything from "react-declarative/model/IAnything";
  import IOneProps from "react-declarative/model/IOneProps";
  interface IStateProviderProps<
    Data = IAnything,
    Payload = IAnything,
    Field extends IField<Data, Payload> = IField<Data, Payload>,
  > extends IOneProps<Data, Payload, Field> {
    payload: Payload;
    children: React.ReactElement;
  }
  interface IState<Data = IAnything> {
    object: Data | null;
    setObject: (data: Data, invalidMap: Record<string, boolean>) => void;
    changeObject: (data: Data) => void;
  }
  /**
   * StateProvider is a component that manages the state of an object and provides it to its children components through a context.
   * It takes in various props to configure its behavior.
   *
   * @template Data - The type of the object being managed by the StateProvider.
   * @template Payload - The type of the payload used for fetching the object.
   * @template Field - The type of the field used for validating the object.
   *
   * @param props - The props used to configure the StateProvider.
   * @param props.children - The children components to be rendered within the StateProvider.
   * @param props.fields - The fields used for validating the object.
   * @param props.features - The features used for manipulating the object.
   * @param props.change - The function called when the object is changed.
   * @param props.fallback - The function called when the object cannot be resolved.
   * @param props.handler - The function used for fetching the object.
   * @param props.payload - The payload used for fetching the object.
   * @param props.loadStart - The function called when the object starts loading.
   * @param props.loadEnd - The function called when the object finishes loading.
   *
   * @return - The rendered children components wrapped in the StateContext.Provider.
   *
   * @example
   * <StateProvider
   *    fields={fields}
   *    features={features}
   *    change={change}
   *    fallback={fallback}
   *    handler={handler}
   *    payload={payload}
   *    loadStart={loadStart}
   *    loadEnd={loadEnd}
   * >
   *    {children}
   * </StateProvider>
   */
  export const StateProvider: <
    Data extends unknown,
    Payload extends unknown,
    Field extends IField<Data, Payload> = IField<Data, Payload>,
  >({
    children,
    ...otherProps
  }: IStateProviderProps<Data, Payload, Field>) => JSX.Element;
  export const useOneState: <Data extends unknown>() => IState<Data>;
  export default StateProvider;
}

declare module "react-declarative/components/One/context/PayloadProvider" {
  import * as React from "react";
  import IOneProps from "react-declarative/model/IOneProps";
  interface IPayloadProviderProps {
    children: React.ReactNode;
    payload?: IOneProps["payload"];
  }
  export const PayloadProvider: ({
    children,
    payload,
  }: IPayloadProviderProps) => JSX.Element;
  export const useOnePayload: () => any;
  export default PayloadProvider;
}

declare module "react-declarative/components/One/context/FeatureProvider" {
  import * as React from "react";
  import IOneProps from "react-declarative/model/IOneProps";
  interface IFeatureProviderProps {
    children: React.ReactNode;
    features?: IOneProps["features"];
  }
  export const FeatureProvider: ({
    children,
    features,
  }: IFeatureProviderProps) => JSX.Element;
  export const useOneFeatures: () => string[];
  export default FeatureProvider;
}

declare module "react-declarative/components/One/context/RadioProvider" {
  export const RadioProvider: ({
      children,
      initialState,
      onChange,
    }: {
      onChange?: ((state: Record<string, string | null>) => void) | undefined;
      children: import("react").ReactNode;
      initialState:
        | Record<string, string | null>
        | (() => Record<string, string | null>);
    }) => JSX.Element,
    useOneRadio: () => readonly [
      Record<string, string | null>,
      (
        state:
          | Record<string, string | null>
          | ((
              prevState: Record<string, string | null>,
            ) => Record<string, string | null>),
      ) => void,
    ];
  export default RadioProvider;
}

declare module "react-declarative/components/One/context/OneContextProvider" {
  import * as React from "react";
  import IOneProps from "react-declarative/model/IOneProps";
  export const DEFAULT_VALUE: {};
  interface IOneContextProviderProps {
    context: IOneProps["context"];
    children: React.ReactNode;
  }
  export const OneContextProvider: ({
    context,
    children,
  }: IOneContextProviderProps) => JSX.Element;
  export const useOneContext: () => Record<string, any>;
  export default OneContextProvider;
}

declare module "react-declarative/components/One/other/OtherComboSlot" {
  import { IComboSlot } from "react-declarative/components/One/slots/ComboSlot";
  /**
   * OtherComboSlot is a component that renders a combo slot with autocomplete functionality.
   *
   * @param value - The value of the combo slot.
   * @param disabled - Indicates whether the combo slot is disabled.
   * @param readonly - Indicates whether the combo slot is readonly.
   * @param description - The description of the combo slot.
   * @param placeholder - The placeholder text for the combo slot.
   * @param outlined - Indicates whether the combo slot should be outlined.
   * @param itemList - The list of item objects for the combo slot.
   * @param title - The title of the combo slot.
   * @param dirty - Indicates whether the combo slot has been modified.
   * @param invalid - Indicates whether the combo slot is invalid.
   * @param tr - A translation function to translate strings.
   * @param onChange - The callback function when the combo slot value changes.
   * @returns - The rendered combo slot component.
   */
  export const OtherComboSlot: ({
    value,
    disabled,
    readonly,
    description,
    placeholder,
    outlined,
    itemList,
    title,
    dirty,
    invalid,
    tr,
    onChange,
  }: IComboSlot) => JSX.Element;
  export default OtherComboSlot;
}

declare module "react-declarative/components/One/other/OtherItemsSlot" {
  import { IItemsSlot } from "react-declarative/components/One/slots/ItemsSlot";
  /**
   * Represents an input field for selecting multiple items from a list.
   *
   * @param OtherItemsSlot - The configuration object for the OtherItemsSlot component.
   * @param OtherItemsSlot.value - The current selected value(s) for the input field.
   * @param OtherItemsSlot.disabled - Determines if the input field is disabled or not.
   * @param OtherItemsSlot.readonly - Determines if the input field is read-only or not.
   * @param OtherItemsSlot.description - The description text for the input field.
   * @param OtherItemsSlot.placeholder - The input field's placeholder text.
   * @param [OtherItemsSlot.outlined=false] - Determines if the input field is outlined or not.
   * @param [OtherItemsSlot.itemList=[]] - The list of items to be displayed in the autocomplete dropdown.
   * @param OtherItemsSlot.dirty - Indicates if the input field has been modified.
   * @param OtherItemsSlot.invalid - Indicates if the input field's value is not valid.
   * @param OtherItemsSlot.title - The title of the input field.
   * @param [OtherItemsSlot.tr=(s) => s.toString()] - The translation function for the labels in the dropdown.
   * @param OtherItemsSlot.onChange - The event handler function for when the selected value(s) change.
   *
   * @returns - The OtherItemsSlot component.
   */
  export const OtherItemsSlot: ({
    value,
    disabled,
    readonly,
    description,
    placeholder,
    outlined,
    itemList,
    dirty,
    invalid,
    title,
    tr,
    onChange,
  }: IItemsSlot) => JSX.Element;
  export default OtherItemsSlot;
}

declare module "react-declarative/components/One/api/useLocalHandler" {
  import IOneProps, { OneHandler } from "react-declarative/model/IOneProps";
  import IAnything from "react-declarative/model/IAnything";
  export interface ILocalHandlerParams<
    Data extends IAnything = IAnything,
    Payload extends IAnything = IAnything,
  > {
    payload?: Payload;
    resultMap?: (json: Record<string, any> | null) => Data | null;
    onLoadBegin?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
  }
  export interface ILocalHandlerResult<Data extends IAnything = IAnything> {
    data: Data | null;
    change: IOneProps<Data>["change"];
  }
  /**
   * Executes a local handler function and manages the state of the data.
   *
   * @template Data - The type of the data that will be stored in the state.
   * @template Payload - The type of the payload that will be passed to the handler function.
   *
   * @param handler - The handler function to be executed.
   * @param options - Additional options for the local handler.
   * @param options.resultMap - Optional. A function to transform the data before storing it in the state.
   * @param options.payload - Optional. The payload to be passed to the handler function.
   * @param options.onLoadBegin - Optional. A callback function to be executed before the handler function.
   * @param options.onLoadEnd - Optional. A callback function to be executed after the handler function.
   * @param options.fallback - Optional. A fallback function to handle errors.
   *
   * @returns - An object containing the data and a function to change the data.
   */
  export const useLocalHandler: <
    Data extends unknown = any,
    Payload extends unknown = any,
  >(
    handler: OneHandler<Data, Payload>,
    {
      resultMap,
      payload,
      onLoadBegin,
      onLoadEnd,
      fallback,
    }?: ILocalHandlerParams<Data, any>,
  ) => ILocalHandlerResult<Data>;
  export default useLocalHandler;
}

declare module "react-declarative/components/One/api/useStaticHandler" {
  import { OneHandler } from "react-declarative/model/IOneProps";
  import IAnything from "react-declarative/model/IAnything";
  export interface IStaticHandlerParams<Data extends IAnything = IAnything> {
    resultMap?: (json: Record<string, any> | null) => Data | null;
    onLoadBegin?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
  }
  /**
   * Creates a static handler that wraps around an existing handler function.
   *
   * @template Data - The data type expected to be returned by the handler.
   * @template Payload - The payload type expected to be passed to the handler.
   * @param handler - The existing handler function.
   * @param options - The options for the static handler.
   * @param options.resultMap - The function to modify the returned data from the handler.
   * @param options.onLoadBegin - The function to be called when the handler starts loading.
   * @param options.onLoadEnd - The function to be called when the handler finishes loading.
   * @param options.fallback - The fallback function to be executed if an error occurs in the handler.
   * @returns - The static handler function.
   */
  export const useStaticHandler: <Data extends unknown = any, Payload = any>(
    handler: OneHandler<Data, Payload>,
    {
      resultMap,
      onLoadBegin,
      onLoadEnd,
      fallback,
    }?: IStaticHandlerParams<Data>,
  ) => OneHandler<Data, Payload>;
  export default useStaticHandler;
}

declare module "react-declarative/components/One/api/usePreventLeave" {
  import { BrowserHistory, MemoryHistory, HashHistory } from "history";
  import IOneProps from "react-declarative/model/IOneProps";
  import IAnything from "react-declarative/model/IAnything";
  import TSubject from "react-declarative/model/TSubject";
  export interface IPreventLeaveParams<Data = IAnything, ID = string> {
    history?: BrowserHistory | MemoryHistory | HashHistory;
    waitForChangesDelay?: number;
    readonly?: boolean;
    updateSubject?: TSubject<[ID, Data]>;
    changeSubject?: TSubject<Data>;
    shouldAutoSave?: () => boolean;
    checkUpdate?: (id: ID, data: Data) => boolean;
    checkDirty?: (prevData: Data, currentData: Data) => boolean;
    onChange?: IOneProps<Data>["change"];
    onBlock?: () => (() => void) | void;
    onUpdate?: (id: ID, data: Data) => void;
    onSave?: (data: Data) => boolean | Promise<boolean>;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
  }
  export interface IPreventLeaveReturn<Data = IAnything> {
    oneProps: {
      change: (data: Data, initial?: boolean) => void;
      invalidity: IOneProps<Data>["invalidity"];
      readonly: IOneProps<Data>["readonly"];
      changeSubject: IOneProps<Data>["changeSubject"];
      fallback?: (e: Error) => void;
    };
    data: Data | null;
    hasChanged: boolean;
    hasLoading: boolean;
    beginSave: () => Promise<boolean>;
    afterSave: () => void;
    dropChanges: () => void;
    waitForChanges: () => Promise<void>;
  }
  /**
   * PreventLeave hook documentation
   *
   * @template Data - The data type
   * @template ID - The ID type
   *
   * @param [params] - The optional parameters
   * @param [params.history] - The history object to use for navigation
   * @param [params.waitForChangesDelay] - The delay in milliseconds to wait for changes
   * @param [params.readonly] - Whether the data is readonly
   * @param [params.onChange] - The callback function to execute when the data changes
   * @param [params.onLoadStart] - The callback function to execute when loading starts
   * @param [params.onLoadEnd] - The callback function to execute when loading ends
   * @param [params.onBlock] - The callback function to execute to block navigation
   * @param [params.onSave] - The callback function to execute when saving the data
   * @param [params.onUpdate] - The callback function to execute when updating the data
   * @param [params.checkUpdate] - The function to check if an update is allowed
   * @param [params.checkDirty] - The function to check if the data is dirty
   * @param [params.shouldAutoSave] - The function to determine if autosave should be enabled
   * @param [params.fallback] - The fallback object to handle errors
   * @param [params.updateSubject] - The subject to subscribe to for updates
   * @param [params.changeSubject] - The subject to subscribe to for changes
   *
   * @returns - The PreventLeave hook return object
   * @returns return.beginSave - The function to begin the save process
   * @returns return.afterSave - The function to execute after saving
   * @returns return.dropChanges - The function to drop changes and reset to initial data
   * @returns return.waitForChanges - The function to wait for changes to settle
   * @returns return.oneProps - The one props object for OneForm integration
   * @returns return.oneProps.change - The function to change the data
   * @returns return.oneProps.invalidity - The function to set the data as invalid
   * @returns return.oneProps.readonly - Whether the data is readonly
   * @returns return.data - The data object, null if invalid
   * @returns return.hasChanged - Whether the data has changed
   * @returns return.hasLoading - Whether the data is being loaded
   */
  export const usePreventLeave: <Data = any, ID = string>({
    history,
    waitForChangesDelay,
    readonly: upperReadonly,
    onChange,
    onLoadStart,
    onLoadEnd,
    onBlock,
    onSave,
    onUpdate,
    checkUpdate,
    checkDirty,
    shouldAutoSave,
    fallback,
    updateSubject: upperUpdateSubject,
    changeSubject: upperChangeSubject,
  }?: IPreventLeaveParams<Data, ID>) => IPreventLeaveReturn<Data>;
  export default usePreventLeave;
}

declare module "react-declarative/components/OneIcon/OneIcon" {
  import IOneIconProps from "react-declarative/components/OneIcon/model/IOneIconProps";
  /** *
   * @template Data - generic type for data object
   * @template Payload - generic type for payload object
   * @typedef OneIcon
   * @property [waitForChangesDelay=WAIT_FOR_CHANGES_DELAY] - delay in milliseconds for waiting changes
   * @property [fieldDebounce] - debounce time in milliseconds for field changes
   * @property [noBadge=false] - flag to disable badge
   * @property fields - array of field objects
   * @property handler - function to handle data
   * @property [payload={}] - payload object
   * @property [badgeColor="info"] - color of the badge
   * @property [color="default"] - color of the icon button
   * @property badgeOverlap - overlap position for the badge
   * @property badgeSx - styles for the badge
   * @property oneSx - styles for the One component
   * @property onChange - function for handling the change event
   * @property onFocus - function for handling the focus event
   * @property onBlur - function for handling the blur event
   * @property buttonProps - additional props for the IconButton component
   */
  export const OneIcon: <Data extends {} = any, Payload extends unknown = any>({
    waitForChangesDelay,
    fieldDebounce,
    noBadge,
    fields,
    handler,
    payload: upperPayload,
    badgeColor,
    color,
    badgeOverlap,
    badgeSx,
    oneSx,
    onChange,
    onFocus,
    onBlur,
    onInvalid,
    ...buttonProps
  }: IOneIconProps<Data, Payload>) => JSX.Element | null;
  export default OneIcon;
}

declare module "react-declarative/components/OneButton/OneButton" {
  import IOneButtonProps from "react-declarative/components/OneButton/model/IOneButtonProps";
  /**
   * Represents a button component with a popover that displays a form.
   *
   * @template Data - The type of data for the form.
   * @template Payload - The type of payload for the button handler.
   *
   * @param props - The properties of the button component.
   * @param [props.waitForChangesDelay=WAIT_FOR_CHANGES_DELAY] - The delay in milliseconds to wait for changes before updating data.
   * @param [props.fieldDebounce] - The debounce time in milliseconds for input fields.
   * @param [props.noBadge=false] - Whether to display a badge on the button.
   * @param props.fields - The fields for the form.
   * @param props.handler - The handler function for the button.
   * @param [props.payload={}] - The payload for the button handler.
   * @param [props.badgeColor="info"] - The color of the badge.
   * @param [props.color="primary"] - The color of the button.
   * @param [props.badgeOverlap] - The overlap mode of the badge.
   * @param [props.badgeSx] - The styles for the badge.
   * @param [props.oneSx] - The styles for the form.
   * @param [props.onChange] - The callback function to be called when the data changes.
   * @param [props.onFocus] - The callback function to be called when a field is focused.
   * @param [props.onBlur] - The callback function to be called when a field is blurred.
   * @param [props.onInvalid] - The callback function to be called when a field is invalid.
   *
   * @returns - Returns null if loading or error, otherwise returns the button component with popover.
   */
  export const OneButton: <
    Data extends {} = any,
    Payload extends unknown = any,
  >({
    waitForChangesDelay,
    fieldDebounce,
    noBadge,
    fields,
    handler,
    payload: upperPayload,
    badgeColor,
    color,
    badgeOverlap,
    badgeSx,
    oneSx,
    onChange,
    onFocus,
    onBlur,
    onInvalid,
    ...buttonProps
  }: IOneButtonProps<Data, Payload>) => JSX.Element | null;
  export default OneButton;
}

declare module "react-declarative/components/Dot/Dot" {
  import { BoxProps } from "@mui/material/Box";
  interface IDotProps extends BoxProps {
    side: number;
    color: string;
  }
  /**
   * Represents a Dot component.
   * @param props - The props object.
   * @param props.className - The class name of the Dot component.
   * @param props.color - The background color of the Dot component.
   * @param props.side - The side length of the Dot component.
   * @param props.otherProps - Additional props to be spread onto the Dot component.
   * @returns - The rendered Dot component.
   */
  export const Dot: ({
    className,
    color: background,
    side,
    ...otherProps
  }: IDotProps) => JSX.Element;
  export default Dot;
}

declare module "react-declarative/components/NoSsr/NoSsr" {
  import * as React from "react";
  interface INoSsrProps {
    ServerView?: React.ComponentType<any>;
    children?: React.ReactNode;
  }
  interface State {
    canRender: boolean;
  }
  export class NoSsr extends React.Component<INoSsrProps, State> {
    constructor(props: INoSsrProps);
    componentDidMount: () => void;
    render: () => JSX.Element;
  }
  export default NoSsr;
}

declare module "react-declarative/components/Switch/Switch" {
  import * as React from "react";
  import { BrowserHistory, HashHistory, MemoryHistory } from "history";
  import { IFetchViewProps } from "react-declarative/components/FetchView";
  export interface ISwitchItem {
    path: string;
    element?: React.ComponentType<any>;
    guard?: () => boolean | Promise<boolean>;
    prefetch?: (
      params: Record<string, any>,
    ) => Record<string, any> | Promise<Record<string, any>>;
    unload?: (params: Record<string, any>) => Promise<void> | void;
    redirect?: string | ((params: Record<string, any>) => string | null);
  }
  export interface ISwitchProps {
    className?: string;
    style?: React.CSSProperties;
    items: ISwitchItem[];
    fallback?: (e: Error) => void;
    history?: BrowserHistory | MemoryHistory | HashHistory;
    Forbidden?: React.ComponentType<any>;
    NotFound?: React.ComponentType<any>;
    Loader?: React.ComponentType<any>;
    Error?: React.ComponentType<any>;
    animation?: IFetchViewProps["animation"];
    onLoadStart?: () => void;
    onLoadEnd?: (isOk?: boolean) => void;
    onInit?: () => void;
    onDispose?: () => void;
    throwError?: boolean;
    children?: (result: ISwitchResult) => React.ReactNode;
  }
  interface ISwitchResult {
    element: React.ComponentType<any>;
    key: string;
    path: string;
    params?: Record<string, any>;
  }
  /**
   * Represents a switch component that renders different elements based on the current location.
   * @param SwitchProps - The props for the Switch component.
   * @param SwitchProps.className - The CSS class name for the component.
   * @param SwitchProps.style - The inline style object for the component.
   * @param SwitchProps.Loader - The loader component to render while initial loading.
   * @param SwitchProps.Forbidden - The component to render if access to a route is forbidden.
   * @param SwitchProps.NotFound - The component to render if the requested route is not found.
   * @param SwitchProps.Error - The component to render if an error occurs.
   * @param SwitchProps.animation - The animation type for transitioning between elements.
   * @param SwitchProps.history - The history object to use for routing. Defaults to DEFAULT_HISTORY if not provided.
   * @param SwitchProps.children - The function that returns the child elements to render based on the current location.
   * @param SwitchProps.fallback - The component to render if an error occurs and throwError is set to false.
   * @param SwitchProps.items - The array of route items to match and render components for.
   * @param SwitchProps.onLoadStart - The callback function to invoke when the component starts loading.
   * @param SwitchProps.onLoadEnd - The callback function to invoke when the component finishes loading.
   * @param SwitchProps.onInit - The callback function to invoke when the component initializes. Defaults to an empty function.
   * @param SwitchProps.onDispose - The callback function to invoke when the component is disposed. Defaults to an empty function.
   * @param SwitchProps.throwError - Indicates whether to throw an error if an exception occurs. Defaults to false.
   * @returns The Switch component.
   */
  export const Switch: ({
    className,
    style,
    Loader,
    Forbidden,
    NotFound,
    Error,
    animation,
    history,
    children,
    fallback,
    items: upperItems,
    onLoadStart,
    onLoadEnd,
    onInit,
    onDispose,
    throwError,
  }: ISwitchProps) => JSX.Element;
  export default Switch;
}

declare module "react-declarative/components/Center/Center" {
  import { BoxProps } from "@mui/material/Box";
  interface ICenterProps extends BoxProps {}
  /**
   * A functional component that renders a Box component with given className and otherProps.
   *
   * @param props - The properties to configure the Center component.
   * @param props.className - The className for the Box component.
   * @param props.otherProps - The other properties to be spread onto the Box component.
   *
   * @returns The rendered Center component.
   */
  export const Center: ({
    className,
    ...otherProps
  }: ICenterProps) => JSX.Element;
  export default Center;
}

declare module "react-declarative/components/Square/Square" {
  import * as React from "react";
  import { BoxProps } from "@mui/material/Box";
  interface ISquareProps extends BoxProps {
    children: React.ReactNode;
  }
  /**
   * Square component.
   *
   * @typedef Square
   * @param className - The class name to apply to the Square component.
   * @param children - The content to render inside the Square component.
   * @param otherProps - Additional props to be spread onto the Square component.
   * @returns - The rendered Square component.
   */
  export const Square: ({
    className,
    children,
    ...otherProps
  }: ISquareProps) => JSX.Element;
  export default Square;
}

declare module "react-declarative/components/Scaffold/Scaffold" {
  import IScaffoldProps from "react-declarative/components/Scaffold/model/IScaffoldProps";
  /**
   * Function that generates a Scaffold component.
   *
   * @param props - The props for the Scaffold component.
   * @param props.roles - The roles to resolve for the component.
   * @param props.payload - The payload for the component.
   * @param [props.throwError] - Whether to throw an error or not.
   * @param [props.fallback] - The fallback component to render while loading.
   * @param [props.options] - The options to resolve for the component.
   * @param [props.loadingLine=false] - Whether to show a loading line or not.
   * @param [props.loading=-1] - The payload for the loading line.
   * @param [props.Loader=LoaderDefault] - The component to use as the loader.
   * @param [props.withPassthrough=false] - Whether to pass the payload to child components or not.
   * @param [props.onInit] - The function to execute on component initialization.
   * @returns - The rendered component tree.
   */
  export const Scaffold: <T extends unknown = any>({
    roles,
    payload,
    throwError,
    fallback,
    options,
    loadingLine,
    loading,
    Loader,
    withPassthrough,
    onInit,
    ...props
  }: IScaffoldProps<T>) => JSX.Element;
  export default Scaffold;
}

declare module "react-declarative/components/Scaffold/model/IScaffoldProps" {
  import IMenuGroup from "react-declarative/model/IMenuGroup";
  import IScaffoldOption from "react-declarative/components/Scaffold/model/IScaffoldOption";
  /**
   * The interface for the Scaffold component props.
   * @template T - The type of the payload data.
   */
  export interface IScaffoldProps<T extends any = any> {
    children: React.ReactNode;
    className?: string;
    dense?: boolean;
    withPassthrough?: boolean;
    style?: React.CSSProperties;
    title?: string;
    loadingLine?: boolean;
    loading?: number;
    colored?: boolean;
    selected?: string;
    options?: IMenuGroup[];
    actions?: IScaffoldOption<T>[];
    payload?: T;
    throwError?: boolean;
    fallback?: (e: Error) => void;
    BeforeSearch?: React.ComponentType<any>;
    AfterSearch?: React.ComponentType<any>;
    BeforeMenuContent?: React.ComponentType<any>;
    AfterMenuContent?: React.ComponentType<any>;
    Loader?: React.ComponentType<any>;
    roles?:
      | string[]
      | ((payload: T) => string[])
      | ((payload: T) => Promise<string[]>);
    onOptionClick?: (name: string) => void;
    onAction?: (name: string) => void;
    onInit?: () => void | Promise<void>;
  }
  export default IScaffoldProps;
}

declare module "react-declarative/components/Scaffold/model/IScaffoldOption" {
  import IOption from "react-declarative/model/IOption";
  /**
   * Interface representing the options for scaffolding.
   * @template T - The payload type.
   */
  export interface IScaffoldOption<T extends any = any>
    extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isVisible?: (payload: T) => Promise<boolean> | boolean;
    isDisabled?: (payload: T) => Promise<boolean> | boolean;
  }
  export default IScaffoldOption;
}

declare module "react-declarative/components/Translate/Translate" {
  import React from "react";
  interface IAttributeCollection {
    [name: string]: unknown;
  }
  export interface ITranslateConfig {
    useRawMark: boolean;
    rawSymbol: string;
    rawCondition: (text: string) => boolean;
  }
  type Locale = Record<string, string>;
  type Middleware = (str: string) => string | null;
  const createElementRef: typeof React.createElement;
  /**
   * Translate class for handling text translation and transformation.
   */
  export class Translate {
    readonly config: Partial<ITranslateConfig>;
    get skipList(): string[];
    translateText: (text: string) => string;
    constructor(
      locale?: Locale,
      transform?: ((str: string) => string) | undefined,
      config?: Partial<ITranslateConfig>,
    );
    use: (middleware: Middleware) => void;
    createElement: (
      type: string,
      props: IAttributeCollection | null,
      ...children: any[]
    ) => ReturnType<typeof createElementRef>;
    jss: (
      type: string,
      props: IAttributeCollection | null,
    ) => React.ReactElement<{}, string | React.JSXElementConstructor<any>>;
    static install: (
      locale?: Locale | undefined,
      transform?: ((str: string) => string) | undefined,
      config?: Partial<ITranslateConfig> | undefined,
    ) => Translate;
    clear: () => void;
  }
  global {
    interface Window {
      Translate: Translate;
    }
  }
  export default Translate;
}

declare module "react-declarative/components/Breadcrumbs/Breadcrumbs" {
  import * as React from "react";
  import IBreadcrumbsOption from "react-declarative/model/IBreadcrumbsOption";
  interface IBreadcrumbsProps<T extends any = any> {
    onSave?: () => void;
    onBack?: () => void;
    onAction?: (action: string) => void;
    actions?: IBreadcrumbsOption<T>[];
    saveDisabled?: boolean;
    title?: string;
    subtitle?: string;
    withSave?: boolean;
    payload?: T;
    BeforeMenuContent?: React.ComponentType<any>;
    AfterMenuContent?: React.ComponentType<any>;
  }
  /**
   * Renders a breadcrumb component with optional save button and action menu.
   *
   * @template T - The type of payload used by the actions.
   * @param props - The component props.
   * @param props.onSave - The callback function called when save button is clicked.
   * @param props.onBack - The callback function called when breadcrumb is clicked.
   * @param props.onAction - The callback function called when an action is selected from the menu.
   * @param props.actions - The list of actions to display in the menu.
   * @param props.saveDisabled - Whether the save button should be disabled.
   * @param props.payload - The payload object passed to the actions.
   * @param [props.title='Title'] - The title text for the breadcrumb.
   * @param [props.subtitle='Subtitle'] - The subtitle text for the breadcrumb.
   * @param [props.withSave=false] - Whether the save button should be displayed.
   * @param [props.BeforeMenuContent] - The optional content to display before the action menu.
   * @param [props.AfterMenuContent] - The optional content to display after the action menu.
   * @returns The rendered breadcrumb component.
   */
  export const Breadcrumbs: <T extends unknown = any>({
    onSave,
    onBack,
    onAction,
    actions,
    saveDisabled,
    payload,
    title,
    subtitle,
    withSave,
    BeforeMenuContent,
    AfterMenuContent,
  }: IBreadcrumbsProps<T>) => JSX.Element;
  export default Breadcrumbs;
}

declare module "react-declarative/components/ErrorBoundary/ErrorBoundary" {
  import * as React from "react";
  import { BrowserHistory, HashHistory, MemoryHistory } from "history";
  interface IErrorBoundaryProps {
    onError?: (error: Error, errorInfo: any) => void;
    history: MemoryHistory | BrowserHistory | HashHistory;
    children?: React.ReactNode;
  }
  interface IErrorBoundaryState {
    hasError: boolean;
  }
  export class ErrorBoundary extends React.Component<
    IErrorBoundaryProps,
    IErrorBoundaryState
  > {
    static getDerivedStateFromError(): {
      hasError: boolean;
    };
    constructor(props: IErrorBoundaryProps);
    componentDidUpdate: () => void;
    componentDidCatch: (error: any, errorInfo: any) => void;
    render: () => React.ReactNode;
  }
  export default ErrorBoundary;
}

declare module "react-declarative/components/ColorButton/ColorButton" {
  import { BoxProps } from "@mui/material/Box";
  interface IColorButtonProps
    extends Omit<
      BoxProps,
      keyof {
        value: never;
        onChange: never;
        onClick: never;
      }
    > {
    value?: string;
    onChange?: (color: string) => void;
  }
  /**
   * Represents a color button component.
   * @typedef IColorButtonProps
   * @property className - The class name for the color button.
   * @property value - The initial value for the color button (default: "").
   * @property sx - The style object for the color button.
   * @property onChange - The function to be called when the color button value changes (default: () => null).
   */
  export const ColorButton: ({
    className,
    value: upperValue,
    sx,
    onChange,
    ...props
  }: IColorButtonProps) => JSX.Element;
  export default ColorButton;
}

declare module "react-declarative/components/ActionMenu/ActionMenu" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import { IAsyncProps } from "react-declarative/components/Async";
  import IOption from "react-declarative/model/IOption";
  import TSubject from "react-declarative/model/TSubject";
  export interface IActionMenuProps<T extends any = object> {
    keepMounted?: boolean;
    options?: Partial<IOption>[];
    transparent?: boolean;
    disabled?: boolean;
    onAction?: (action: string) => void;
    onToggle?: (opened: boolean) => void;
    fallback?: (e: Error) => void;
    deps?: any[];
    throwError?: boolean;
    className?: string;
    reloadSubject?: TSubject<void>;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    payload?: IAsyncProps<T>["payload"];
    onLoadStart?: IAsyncProps<T>["onLoadStart"];
    onLoadEnd?: IAsyncProps<T>["onLoadEnd"];
    BeforeContent?: React.ComponentType<any>;
    AfterContent?: React.ComponentType<any>;
  }
  /**
   * ActionMenu is a component that displays a menu of options triggered by a button click.
   *
   * @template T - The type of payload passed to the action.
   *
   * @param options - An array of option objects that define the content and behavior of each menu option.
   * @param transparent - Determines whether the menu button should have a transparent style.
   * @param disabled - Determines whether the menu should be disabled and not respond to user interactions.
   * @param throwError - Determines whether to throw an error when an asynchronous action fails.
   * @param fallback - The fallback content to display when an asynchronous action fails.
   * @param onToggle - A callback function to handle the menu open/close state change event.
   * @param onAction - A callback function to handle the execution of an action when a menu option is clicked.
   * @param payload - A payload object to pass to the action callback function.
   * @param className - Additional CSS class name(s) to apply to the menu button.
   * @param style - Additional inline styles to apply to the menu button.
   * @param sx - Additional Stylsx object to apply to the menu button.
   * @param deps - An array of dependencies to update the menu when changed.
   * @param onLoadStart - A callback function to handle the start of an asynchronous action.
   * @param onLoadEnd - A callback function to handle the end of an asynchronous action.
   * @param keepMounted - Determines whether to keep the menu mounted in the DOM even when closed.
   * @param BeforeContent - The content to display before the menu options.
   * @param AfterContent - The content to display after the menu options.
   * @param reloadSubject - A subject that triggers the reload of the menu options.
   *
   * @returns - The rendered ActionMenu component.
   */
  export const ActionMenu: <T extends unknown = object>({
    options,
    transparent,
    disabled,
    throwError,
    fallback,
    onToggle,
    onAction,
    payload,
    className,
    style,
    sx,
    deps,
    onLoadStart,
    onLoadEnd,
    keepMounted,
    BeforeContent,
    AfterContent,
    reloadSubject,
  }: IActionMenuProps<T>) => JSX.Element;
  export default ActionMenu;
}

declare module "react-declarative/components/ActionButton/ActionButton" {
  import * as React from "react";
  import { ButtonProps } from "@mui/material/Button";
  const ProgressDefault: ({
    loading,
    children,
  }: {
    children: React.ReactNode;
    loading: boolean;
  }) => JSX.Element;
  interface IActionButtonProps
    extends Omit<
      ButtonProps,
      keyof {
        onClick: never;
      }
    > {
    Progress?: typeof ProgressDefault;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    onClick?: (
      event: React.MouseEvent<HTMLButtonElement, MouseEvent>,
    ) => void | Promise<void>;
    fallback?: (e: Error) => void;
    throwError?: boolean;
  }
  /**
   * Represents an action button component.
   *
   * @component
   * @param props - The component props.
   * @param [props.Progress=ProgressDefault] - The progress component to show when the button is loading.
   * @param [props.onClick=()=>{}] - The function to be called when the button is clicked.
   * @param [props.onLoadStart] - The function to be called when the loading starts.
   * @param [props.onLoadEnd] - The function to be called when the loading ends.
   * @param [props.fallback] - The function to be called when an error occurs and throwError is false.
   * @param [props.children] - The content to be rendered inside the button.
   * @param [props.disabled] - Whether the button is disabled.
   * @param [props.throwError=false] - Whether to throw an error when an exception occurs.
   * @param [props.variant="outlined"] - The button style variant.
   *
   * @returns The rendered component.
   */
  export const ActionButton: ({
    Progress,
    onClick,
    onLoadStart,
    onLoadEnd,
    fallback,
    children,
    disabled,
    throwError,
    variant,
    ...otherProps
  }: IActionButtonProps) => JSX.Element;
  export default ActionButton;
}

declare module "react-declarative/components/ActionButton/api/usePreventAction" {
  interface IParams {
    disabled?: boolean;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
  }
  /**
   * A hook that allows preventing an action based on loading state.
   * @param [IParams] - The parameters for the hook.
   * @param [onLoadStart] - The function to execute when the loading starts.
   * @param [onLoadEnd] - The function to execute when the loading ends.
   * @param [disabled] - Whether the action is disabled.
   * @returns - An object containing the handleLoadStart, handleLoadEnd, and loading properties.
   */
  export const usePreventAction: ({
    onLoadStart,
    onLoadEnd,
    disabled,
  }?: IParams) => {
    readonly handleLoadStart: () => void;
    readonly handleLoadEnd: (isOk: boolean) => void;
    readonly loading: boolean | undefined;
  };
  export default usePreventAction;
}

declare module "react-declarative/components/ActionStopIcon/ActionStopIcon" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import { IconButtonProps } from "@mui/material/IconButton";
  interface IActionStopIconProps
    extends Omit<
      IconButtonProps,
      keyof {
        className: never;
        style: never;
        sx: never;
        size: never;
        thickness: never;
        onClick: never;
      }
    > {
    children?: React.ReactNode;
    sx?: SxProps<any>;
    className?: string;
    style?: React.CSSProperties;
    noProgress?: boolean;
    disabled?: boolean;
    size?: number;
    thickness?: number;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    onClick?: (
      event: React.MouseEvent<HTMLButtonElement, MouseEvent>,
    ) => void | Promise<void>;
    fallback?: (e: Error) => void;
    throwError?: boolean;
  }
  /**
   * Represents an ActionStopIcon component.
   *
   * @typedef IActionStopIconProps
   * @property className - The CSS class name for the component.
   * @property style - The inline CSS styles for the component.
   * @property sx - The system styles for the component.
   * @property size - The size of the icon. Default is DEFAULT_SIZE.
   * @property thickness - The thickness of the CircularProgress spinner. Default is DEFAULT_THICKNESS.
   * @property noProgress - Flag indicating whether to show the CircularProgress spinner. Default is false.
   * @property throwError - Flag indicating whether to throw an error or trigger the fallback function upon an error. Default is false.
   * @property disabled - Flag indicating whether the component is disabled. Default is false.
   * @property onLoadStart - Callback function triggered when the component starts loading.
   * @property onLoadEnd - Callback function triggered when the component finishes loading.
   * @property fallback - The fallback function to be called when an error occurs and 'throwError' is set to false.
   * @property onClick - The click event handler for the component. Default is an empty function.
   * @property children - The child element to be rendered inside the component. Default is a CloseIcon.
   * @property otherProps - Any additional props for the component.
   */
  export const ActionStopIcon: ({
    className,
    style,
    sx,
    size,
    thickness,
    noProgress,
    throwError,
    disabled,
    onLoadStart,
    onLoadEnd,
    fallback,
    onClick,
    children,
    ...otherProps
  }: IActionStopIconProps) => JSX.Element;
  export default ActionStopIcon;
}

declare module "react-declarative/components/ActionFab/ActionFab" {
  import * as React from "react";
  import { FabProps } from "@mui/material/Fab";
  interface IActionFabProps
    extends Omit<
      FabProps,
      keyof {
        onClick: never;
        size?: never;
      }
    > {
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    onClick?: (
      event: React.MouseEvent<HTMLButtonElement, MouseEvent>,
    ) => void | Promise<void>;
    fallback?: (e: Error) => void;
    throwError?: boolean;
    thickness?: number;
    size?: number;
    noProgress?: boolean;
  }
  /**
   * ActionFab component.
   *
   * @param props - The component props.
   * @param props.className - The CSS class name for the root element.
   * @param props.style - The inline CSS styles for the root element.
   * @param props.sx - The style object for SX props.
   * @param props.noProgress - If true, the progress indicator will not be displayed when loading. Default is false.
   * @param props.throwError - If true, any error thrown during onClick will be re-thrown. Default is false.
   * @param props.disabled - If true, the component is disabled. Default is false.
   * @param props.size - The size of the component. Default is DEFAULT_SIZE.
   * @param props.thickness - The thickness of the progress indicator. Default is DEFAULT_THICKNESS.
   * @param props.color - The color of the component. Default is "primary".
   * @param props.onLoadStart - The callback function called when loading starts.
   * @param props.onLoadEnd - The callback function called when loading ends.
   * @param props.onClick - The callback function called when the component is clicked.
   * @param props.fallback - The fallback component to render if an error occurs during onClick.
   * @param props.children - The child components to render inside the component.
   * @param props.otherProps - The additional props to pass to the Fab component.
   * @returns The rendered component.
   */
  export const ActionFab: ({
    className,
    style,
    sx,
    noProgress,
    throwError,
    disabled,
    size,
    thickness,
    color,
    onLoadStart,
    onLoadEnd,
    onClick,
    fallback,
    children,
    ...otherProps
  }: IActionFabProps) => JSX.Element;
  export default ActionFab;
}

declare module "react-declarative/components/ActionFilter/ActionFilter" {
  import { BoxProps as MatBoxProps } from "@mui/material/Box";
  import IActionFilterProps from "react-declarative/components/ActionFilter/model/IActionFilterProps";
  type BoxProps = Omit<
    MatBoxProps,
    keyof {
      onChange: never;
    }
  >;
  /**
   * Represents an Action Filter component.
   *
   * @typedef ActionFilter
   * @property actions - The available filter actions.
   * @property label - The label for the filter component.
   * @property addLabel - The label for the "Add filter" button.
   * @property data - The initial filter data.
   * @property onChange - The callback function to be called when the filter data changes.
   * @property otherProps - Additional properties for the Box component.
   */
  export const ActionFilter: ({
    actions,
    label,
    addLabel,
    data: initialData,
    onChange,
    ...otherProps
  }: BoxProps & IActionFilterProps) => JSX.Element;
  export default ActionFilter;
}

declare module "react-declarative/components/ActionFilter/model/IActionFilter" {
  /**
   * Represents an action filter.
   * @interface
   */
  export interface IActionFilter {
    action: string;
    label: string;
    items: {
      value: string;
      label: string;
    }[];
  }
  export default IActionFilter;
}

declare module "react-declarative/components/ActionTrigger/ActionTrigger" {
  import IActionTriggerProps from "react-declarative/components/ActionTrigger/model/IActionTriggerProps";
  /**
   * Renders a component that triggers actions based on user interaction.
   *
   * @template T - The type of the payload returned by the action.
   * @param props - The props for the component.
   * @param props.actions - An array of objects representing the actions to be triggered. Each object should have the following properties:
   *   - action: The name of the action to be triggered.
   *   - label: The label of the action.
   *   - icon: An optional icon component for the action.
   *   - isAvailable: An optional function or boolean indicating whether the action is available. If a function is provided, it should return a boolean.
   * @param [props.variant='outlined'] - The variant of the action buttons.
   * @param [props.size='medium'] - The size of the action buttons.
   * @param [props.onAction=() => {}] - The callback function to be called when an action is triggered.
   * @param [props.fallback] - The fallback value to be passed to the Async component.
   * @param [props.onLoadStart] - The callback function to be called when the async operation starts.
   * @param [props.onLoadEnd] - The callback function to be called when the async operation ends.
   * @param [props.payload] - The payload data to be passed to the async operation.
   * @param [props.deps] - The dependencies of the async operation.
   * @param [props.throwError] - Whether to throw an error if the async operation fails.
   * @param otherProps - Additional props to be spread onto the container Box component.
   * @returns - The rendered component.
   */
  export const ActionTrigger: <T extends unknown = object>({
    actions,
    variant,
    size,
    onAction,
    fallback,
    onLoadStart,
    onLoadEnd,
    payload,
    deps,
    throwError,
    ...otherProps
  }: IActionTriggerProps<T>) => JSX.Element;
  export default ActionTrigger;
}

declare module "react-declarative/components/ActionTrigger/model/IActionTrigger" {
  import IAnything from "react-declarative/model/IAnything";
  import IOption from "react-declarative/model/IOption";
  /**
   * Represents an action trigger that determines when an action can be triggered.
   * @template Data - The type of data that the trigger function will receive.
   */
  export interface IActionTrigger<Data extends any = IAnything>
    extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isAvailable?: ((payload: Data) => boolean | Promise<boolean>) | boolean;
  }
  export default IActionTrigger;
}

declare module "react-declarative/components/ActionIcon/ActionIcon" {
  import * as React from "react";
  import { IconButtonProps } from "@mui/material/IconButton";
  interface IActionIconProps
    extends Omit<
      IconButtonProps,
      keyof {
        onClick: never;
        size: never;
      }
    > {
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    onClick?: (
      event: React.MouseEvent<HTMLButtonElement, MouseEvent>,
    ) => void | Promise<void>;
    fallback?: (e: Error) => void;
    throwError?: boolean;
    size?: number;
    thickness?: number;
    noProgress?: boolean;
  }
  /**
   * Represents an action icon component.
   * @typedef ActionIcon
   * @property className - The class name for the component.
   * @property style - The inline style for the component.
   * @property sx - The custom styling for the component using SX prop provided by Emotion.
   * @property noProgress - Determines if the progress spinner should be shown.
   * @property throwError - Determines if an error should be thrown in case of an exception.
   * @property disabled - Determines if the component is disabled.
   * @property onLoadStart - The callback function called when the action starts loading.
   * @property onLoadEnd - The callback function called when the action finishes loading.
   * @property onClick - The callback function called when the icon is clicked.
   * @property fallback - The fallback function called in case of an error and throwError is false.
   * @property children - The child components of the icon.
   * @property size - The size of the icon.
   * @property thickness - The thickness of the circular progress spinner.
   * @property otherProps - Other props to be passed to the IconButton component.
   */
  export const ActionIcon: ({
    className,
    style,
    sx,
    noProgress,
    throwError,
    disabled,
    onLoadStart,
    onLoadEnd,
    onClick,
    fallback,
    children,
    size,
    thickness,
    ...otherProps
  }: IActionIconProps) => JSX.Element;
  export default ActionIcon;
}

declare module "react-declarative/components/ActionToggle/ActionToggle" {
  import { SxProps } from "@mui/material";
  import { BoxProps } from "@mui/material/Box";
  interface IActionToggleProps
    extends Omit<
      BoxProps,
      keyof {
        onChange: never;
        onClick: never;
        sx?: never;
      }
    > {
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    onClick?: (value: boolean) => void | Promise<void>;
    fallback?: (e: Error) => void;
    checked?: boolean;
    disabled?: boolean;
    defaultChecked?: boolean;
    throwError?: boolean;
    sx?: SxProps<any>;
  }
  /**
   * Represents an action toggle component.
   *
   * @typedef ActionToggle
   * @param className - The custom class name for the component.
   * @param onClick - The callback function called when the toggle is clicked.
   * @param onLoadStart - The callback function called when the loading starts.
   * @param onLoadEnd - The callback function called when the loading ends.
   * @param fallback - The fallback function called when an error occurs and throwError is false.
   * @param disabled - Indicates whether the toggle is disabled.
   * @param throwError - Indicates whether an error should be thrown.
   * @param checked - Indicates whether the toggle is checked.
   * @param defaultChecked - The default value for the checked state.
   * @param otherProps - Additional props to be spread on the component.
   */
  export const ActionToggle: ({
    className,
    onClick,
    onLoadStart,
    onLoadEnd,
    fallback,
    disabled,
    throwError,
    checked: upperChecked,
    defaultChecked,
    ...otherProps
  }: IActionToggleProps) => JSX.Element;
  export default ActionToggle;
}

declare module "react-declarative/components/ActionModal/ActionModal" {
  import * as React from "react";
  import { SxProps } from "@mui/system";
  import ISize from "react-declarative/model/ISize";
  import IField from "react-declarative/model/IField";
  import IOneApi from "react-declarative/model/IOneApi";
  import IAnything from "react-declarative/model/IAnything";
  import IOneProps from "react-declarative/model/IOneProps";
  import IOnePublicProps from "react-declarative/model/IOnePublicProps";
  export interface IActionModalProps<
    Data extends IAnything = IAnything,
    Payload = IAnything,
    Field = IField<Data>,
    Param = any,
  > {
    sizeRequest?: (size: ISize) => {
      height: number;
      width: number;
      sx?: SxProps;
    };
    waitForChangesDelay?: number;
    withActionButton?: boolean;
    withStaticAction?: boolean;
    fullScreen?: boolean;
    hidden?: boolean;
    readonly?: boolean;
    apiRef?: React.Ref<IOneApi>;
    fields: Field[];
    title?: string;
    dirty?: boolean;
    param?: Param;
    features?: IOnePublicProps<Data, Payload>["features"];
    outlinePaper?: IOneProps<Data, Payload>["outlinePaper"];
    transparentPaper?: IOneProps<Data, Payload>["transparentPaper"];
    handler?: IOneProps<Data, Payload>["handler"];
    payload?: IOneProps<Data, Payload>["payload"];
    changeSubject?: IOneProps<Data, Payload>["changeSubject"];
    reloadSubject?: IOneProps<Data, Payload>["reloadSubject"];
    onSubmit?: (
      data: Data | null,
      payload: Payload,
      param: Param,
    ) => Promise<boolean> | boolean;
    onChange?: (data: Data, initial: boolean) => void;
    onInvalid?: (name: string, msg: string) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    AfterTitle?: React.ComponentType<{
      onClose?: () => void;
      payload: Payload;
      param: Param;
    }>;
    BeforeTitle?: React.ComponentType<{
      onClose?: () => void;
      payload: Payload;
      param: Param;
    }>;
    throwError?: boolean;
    open?: boolean;
    submitLabel?: string;
  }
  /**
   * ActionModal is a component that renders a modal dialog with customizable fields and actions.
   *
   * @template Data - The type of data for the fields in the modal.
   * @template Payload - The type of payload that will be passed to the onSubmit callback.
   * @template Field - The type of field that will be rendered in the modal.
   *
   * @typedef IActionModalProps - The props for the ActionModal component.
   * @property [withActionButton=true] - Determines whether an action button should be displayed.
   * @property [withStaticAction=false] - Determines whether a static action should be displayed.
   * @property [waitForChangesDelay=0] - The amount of time to wait for any changes before submitting the form.
   * @property [onSubmit=()=>true] - The callback function to be called when the form is submitted.
   * @property [onChange=()=>undefined] - The callback function to be called when any field changes.
   * @property [onInvalid=()=>undefined] - The callback function to be called when a field becomes invalid.
   * @property [onLoadStart] - The callback function to be called when the form starts loading.
   * @property [onLoadEnd] - The callback function to be called when the form finishes loading.
   * @property [fallback] - The fallback component to be displayed when an error occurs.
   * @property [fields] - The fields to be rendered in the form.
   * @property [param] - Additional parameter to be passed to the onSubmit callback.
   * @property [handler] - The function to be called when any field changes its value.
   * @property [payload={}] - The payload to be passed to the onSubmit callback.
   * @property [fullScreen=false] - Determines whether the modal should be displayed in full screen.
   * @property [sizeRequest] - The function to compute the size of the modal.
   * @property [title] - The title to be displayed in the modal.
   * @property [apiRef] - Reference to the api.
   * @property [features] - Additional features for the ActionModal.
   * @property [changeSubject] - Subject for changes.
   * @property [reloadSubject] - Subject for reloads.
   * @property [outlinePaper=false] - Determines whether the paper component should have an outline.
   * @property [transparentPaper=false] - Determines whether the paper component should be transparent.
   * @property [open=true] - Determines whether the modal is open.
   * @property [dirty=false] - Determines whether any field in the form is dirty.
   * @property [hidden=false] - Determines whether the modal is hidden.
   * @property [readonly=false] - Determines whether the modal is read-only.
   * @property [throwError=false] - Determines whether an error should be thrown on submission error.
   * @property [submitLabel='Submit'] - The label to be displayed on the action button.
   * @property [AfterTitle] - The component to be displayed after the title.
   * @property [BeforeTitle] - The component to be displayed before the title.
   *
   * @param props - The props for the ActionModal component.
   * @returns - The rendered modal component.
   */
  export const ActionModal: <
    Data extends unknown = any,
    Payload = any,
    Field = IField<Data, any>,
  >({
    withActionButton,
    withStaticAction,
    waitForChangesDelay,
    onSubmit,
    onChange,
    onInvalid,
    onLoadStart,
    onLoadEnd,
    fallback,
    fields,
    param,
    handler,
    payload: upperPayload,
    fullScreen,
    sizeRequest,
    title,
    apiRef,
    features,
    changeSubject,
    reloadSubject,
    outlinePaper,
    transparentPaper,
    open,
    dirty,
    hidden,
    readonly,
    throwError,
    submitLabel,
    AfterTitle,
    BeforeTitle,
  }: IActionModalProps<Data, Payload, Field, any>) => JSX.Element;
  export default ActionModal;
}

declare module "react-declarative/components/ActionModal/useActionModal" {
  import { IActionModalProps } from "react-declarative/components/ActionModal/ActionModal";
  import TypedField from "react-declarative/model/TypedField";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IParams<
    Data extends IAnything = IAnything,
    Payload extends IAnything = IAnything,
    Field = IField<Data>,
    Param = any,
  > extends Omit<
      IActionModalProps<Data, Payload, Field, Param>,
      keyof {
        open: never;
      }
    > {
    waitForChangesDelay?: number;
    param?: Param;
    onClose?: () => void;
  }
  /**
   * Creates a hook for managing an action modal.
   * @template Data - The type of data being submitted.
   * @template Payload - The type of payload data.
   * @template Field - The type of field data.
   * @template Param - The type of param data.
   * @param params - The parameters for configuring the action modal.
   * @param params.hidden - Indicates whether the action modal is hidden.
   * @param params.fields - The fields for the action modal.
   * @param params.waitForChangesDelay - The delay for waiting on changes.
   * @param params.param - The initial value for the param.
   * @param params.features - The features for the action modal.
   * @param params.handler - The handler function for the action modal.
   * @param params.fallback - The fallback element for the action modal.
   * @param params.apiRef - The reference to the API for the action modal.
   * @param params.changeSubject - The subject for change events.
   * @param params.reloadSubject - The subject for reload events.
   * @param params.withActionButton - Indicates whether to include an action button.
   * @param params.withStaticAction - Indicates whether to include a static action.
   * @param params.payload - The payload data for the action modal.
   * @param params.BeforeTitle - The element to render before the title.
   * @param params.onChange - The onChange event handler for the action modal.
   * @param params.onClose - The onClose event handler for the action modal.
   * @param params.onSubmit - The onSubmit event handler for the action modal.
   * @param params.onLoadEnd - The onLoadEnd event handler for the action modal.
   * @param params.onLoadStart - The onLoadStart event handler for the action modal.
   * @param params.onInvalid - The onInvalid event handler for the action modal.
   * @param params.AfterTitle - The element to render after the title.
   * @param params.outlinePaper - Indicates whether the paper has an outline.
   * @param params.transparentPaper - Indicates whether the paper is transparent.
   * @param params.submitLabel - The label for the submit button.
   * @param params.throwError - Indicates whether to throw an error on submit.
   * @param params.dirty - Indicates whether the form is dirty.
   * @param params.readonly - Indicates whether the form is readonly.
   * @param params.fullScreen - Indicates whether the action modal is fullscreen.
   * @param params.sizeRequest - The size request for the action modal.
   * @param params.title - The title for the action modal.
   * @returns - The state and render functions.
   * @property open - Indicates whether the action modal is open or closed.
   * @property render - The render function for the action modal.
   * @property pickData - The function for selecting data.
   */
  export const useActionModal: <
    Data extends unknown = any,
    Payload extends unknown = any,
    Field = IField<Data, any>,
    Param = any,
  >({
    hidden,
    fields,
    waitForChangesDelay,
    param: upperParam,
    features,
    handler,
    fallback,
    apiRef,
    changeSubject,
    reloadSubject,
    withActionButton,
    withStaticAction,
    payload: upperPayload,
    BeforeTitle,
    onChange,
    onClose,
    onSubmit,
    onLoadEnd,
    onLoadStart,
    onInvalid,
    AfterTitle,
    outlinePaper,
    transparentPaper,
    submitLabel,
    throwError,
    dirty,
    readonly,
    fullScreen,
    sizeRequest,
    title,
  }: IParams<Data, Payload, Field, Param>) => {
    open: boolean;
    render: () => JSX.Element;
    pickData: (param?: Param | undefined) => void;
  };
  export const useActionModalTyped: <Data extends unknown = any>(
    params: IParams<Data, TypedField<Data, any>, IField<Data, any>, any>,
  ) => {
    open: boolean;
    render: () => JSX.Element;
    pickData: (param?: any) => void;
  };
  export default useActionModal;
}

declare module "react-declarative/components/SearchModal/SearchModal" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import SelectionMode from "react-declarative/model/SelectionMode";
  import IListProps from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  import IField from "react-declarative/model/IField";
  import ISize from "react-declarative/model/ISize";
  export interface ISearchModalProps<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
    Field extends IField = IField<FilterData, Payload>,
  > extends Omit<
      IListProps<FilterData, RowData, Payload, Field>,
      keyof {
        selectedRows: never;
        heightRequest: never;
        widthRequest: never;
        onSelectedRows: never;
        onLoadStart: never;
        onLoadEnd: never;
        onRowClick: never;
      }
    > {
    fullScreen?: boolean;
    sizeRequest?: (size: ISize) => {
      height: number;
      width: number;
      sx?: SxProps;
    };
    title?: string;
    AfterTitle?: React.ComponentType<{
      onClose?: () => void;
      payload: Payload;
    }>;
    BeforeTitle?: React.ComponentType<{
      onClose?: () => void;
      payload: Payload;
    }>;
    data?: IRowData["id"][];
    selectionMode?: SelectionMode;
    onSubmit?: (
      data: IRowData["id"][] | null,
      payload: Payload,
    ) => Promise<boolean> | boolean;
    onChange?: (data: IRowData["id"][] | null, initial: boolean) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
    open?: boolean;
    hidden?: boolean;
    submitLabel?: string;
  }
  /**
   * Represents a Search Modal component.
   *
   * @template FilterData - The type of filter data.
   * @template RowData - The type of row data.
   * @template Payload - The type of payload.
   * @template Field - The type of field.
   *
   * @param props - The props of the component.
   * @param [props.fullScreen=true] - Whether the modal should be displayed as full screen.
   * @param [props.sizeRequest] - The size request for the modal.
   * @param [props.hidden=false] - Whether the modal should be hidden.
   * @param [props.onSubmit] - The callback function when the form is submitted.
   * @param [props.onChange] - The callback function when the form data changes.
   * @param [props.onLoadStart] - The callback function when the data loading starts.
   * @param [props.onLoadEnd] - The callback function when the data loading ends.
   * @param [props.fallback] - The fallback function when an error occurs.
   * @param [props.AfterTitle] - The component to be rendered after the title.
   * @param [props.BeforeTitle] - The component to be rendered before the title.
   * @param [props.title] - The title of the modal.
   * @param [props.payload] - The payload data.
   * @param [props.withInitialLoader=true] - Whether to show the initial loader.
   * @param [props.selectionMode=SelectionMode.Multiple] - The selection mode for the list.
   * @param [props.data] - The data for the list.
   * @param [props.open=true] - Whether the modal is open.
   * @param [props.throwError=false] - Whether to throw an error when an error occurs.
   * @param [props.submitLabel="Submit"] - The label for the submit button.
   * @param [props.listProps] - The additional props for the list component.
   *
   * @returns The Search Modal component.
   */
  export const SearchModal: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
    Payload extends unknown = any,
    Field extends IField<any, any> = IField<FilterData, Payload>,
  >({
    fullScreen,
    sizeRequest,
    hidden,
    onSubmit,
    onChange,
    onLoadStart,
    onLoadEnd,
    fallback,
    AfterTitle,
    BeforeTitle,
    title,
    payload: upperPayload,
    withInitialLoader,
    selectionMode,
    data: upperData,
    open,
    throwError,
    submitLabel,
    ...listProps
  }: ISearchModalProps<FilterData, RowData, Payload, Field>) => JSX.Element;
  export default SearchModal;
}

declare module "react-declarative/components/SearchModal/useSearchModal" {
  import { ISearchModalProps } from "react-declarative/components/SearchModal/SearchModal";
  import TypedField from "react-declarative/model/TypedField";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  import IRowData from "react-declarative/model/IRowData";
  type Param = IRowData["id"][];
  interface IParams<
    FilterData extends {} = IAnything,
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
    Field extends IField = IField<FilterData, Payload>,
  > extends Omit<
      ISearchModalProps<FilterData, RowData, Payload, Field>,
      keyof {
        open: never;
        onSubmit: never;
        className: never;
        isChooser: never;
        style: never;
      }
    > {
    param?: Param;
    onSubmit?: (
      data: IRowData["id"][] | null,
      payload: Payload,
      param: Param,
    ) => Promise<boolean> | boolean;
  }
  /**
   * The useSearchModal function is a custom hook that provides functionality for displaying a search modal.
   * It accepts various parameters and returns an object with properties and methods for controlling the search modal.
   *
   * @template FilterData - The type of the filter data.
   * @template RowData - The type of the row data.
   * @template Payload - The type of the payload.
   * @template Field - The type of the field.
   *
   * @param params - The parameters for configuring the search modal.
   * @param params.param - The initial value for the parameter.
   * @param params.selectionMode - The selection mode for the search modal.
   * @param params.handler - The handler function for handling events.
   * @param params.fallback - The fallback function to be executed if an error occurs.
   * @param params.apiRef - The reference to the API.
   * @param params.reloadSubject - The subject for triggering reload events.
   * @param params.payload - The initial value for the payload.
   * @param params.onChange - The callback function for handling change events.
   * @param params.onAction - The callback function for handling action events.
   * @param params.onRowAction - The callback function for handling row action events.
   * @param params.onSubmit - The callback function for handling submit events.
   * @param params.onLoadEnd - The callback function to be executed when loading ends.
   * @param params.onLoadStart - The callback function to be executed when loading starts.
   * @param params.submitLabel - The label for the submit button.
   * @param params.throwError - Indicates whether to throw an error or not.
   * @param params.title - The title of the search modal.
   * @param params.hidden - Indicates whether the search modal should be hidden or not.
   * @param listProps - Additional properties for customizing the search modal.
   *
   * @returns An object with properties and methods for controlling the search modal.
   * @property open - Indicates whether the search modal is open or not.
   * @property render - A function for rendering the search modal.
   * @property pickData - A function for picking data.
   * @property close - A function for closing the search modal and handling submit with null data.
   */
  export const useSearchModal: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
    Payload extends unknown = any,
    Field extends IField<any, any> = IField<FilterData, Payload>,
  >({
    param: upperParam,
    selectionMode,
    handler,
    fallback,
    apiRef,
    reloadSubject,
    payload: upperPayload,
    onChange,
    onAction,
    onRowAction,
    onSubmit,
    onLoadEnd,
    onLoadStart,
    submitLabel,
    throwError,
    title,
    hidden,
    ...listProps
  }: IParams<FilterData, RowData, Payload, Field>) => {
    readonly open: boolean;
    readonly render: () => JSX.Element;
    readonly pickData: (param?: Param) => void;
    readonly close: () => Promise<boolean>;
  };
  export const useSearchModalTyped: <
    FilterData extends {} = any,
    RowData extends IRowData = any,
    Payload extends unknown = any,
    Field extends IField<any, any> = TypedField<FilterData, Payload>,
  >(
    params: IParams<FilterData, RowData, Payload, Field>,
  ) => {
    readonly open: boolean;
    readonly render: () => JSX.Element;
    readonly pickData: (param?: Param) => void;
    readonly close: () => Promise<boolean>;
  };
  export default useSearchModal;
}

declare module "react-declarative/components/SearchView/SearchView" {
  import ISearchViewProps from "react-declarative/components/SearchView/model/ISearchViewProps";
  /**
   * SearchView component documentation
   *
   * @template Data - The data type of the component
   * @template Payload - The payload type of the component
   *
   * @param props - The component props
   * @param [props.className] - The class name for the component
   * @param [props.style] - The inline style for the component
   * @param [props.sx] - The sx prop for the component (sx prop is a shorthand for sx={{}} in styled components)
   * @param [props.type="text"] - The type of the input field
   * @param [props.mode="text"] - The input mode of the input field
   * @param [props.variant="standard"] - The variant of the input field
   * @param [props.pattern] - The pattern attribute of the input field
   * @param [props.value] - The value of the component
   * @param [props.label] - The label for the input field
   * @param [props.placeholder] - The placeholder for the input field
   * @param [props.searchText] - The search text for the component
   * @param [props.changeSubject] - The change subject for the component
   * @param [props.onChange=() => undefined] - The change event handler for the value
   * @param [props.onTextChange=() => undefined] - The change event handler for the search text
   * @param [props.delay=DEFAULT_DELAY] - The delay in milliseconds before executing a search
   * @param [props.limit=DEFAULT_LIMIT] - The maximum number of search results to return
   * @param [props.payload] - The payload for the search request
   * @param [props.autoComplete] - The autocomplete attribute for the input field
   * @param [props.fullWidth] - Whether the input field should take up the full width
   * @param [props.disabled] - Whether the input field should be disabled
   * @param [props.onCreate] - The callback to create a new item
   * @param [props.onLoadStart] - The callback when the search request starts
   * @param [props.onLoadEnd] - The callback when the search request ends
   * @param [props.fallback] - The fallback content to display during loading or error
   * @param props.handler - The search handler function
   * @param [props.inputRef] - The ref for the input field
   * @param [props.SearchItem=SearchItemDefault] - The component to render each search item
   * @param [props.SearchInput=SearchInputDefault] - The component to render the search input
   * @param [props.CreateButton=CreateButtonDefault] - The component to render the create button
   * @param [props.startAdornment=null] - The start adornment for the input field
   * @param [props.endAdornment=null] - The end adornment for the input field
   * @param [props.throwError] - Whether errors should be thrown or not
   * @param [props.otherProps] - Any other props that should be passed to the TextField component
   *
   * @returns The SearchView component
   */
  export const SearchView: <Data extends unknown = any, Payload = any>({
    className,
    style,
    sx,
    type,
    mode,
    variant,
    pattern,
    value,
    label,
    placeholder,
    searchText,
    changeSubject: upperChangeSubject,
    onChange,
    onTextChange,
    delay,
    limit,
    payload: upperPayload,
    autoComplete,
    fullWidth,
    disabled,
    onCreate,
    onLoadStart,
    onLoadEnd,
    fallback,
    handler,
    inputRef,
    SearchItem,
    SearchInput,
    CreateButton,
    startAdornment,
    endAdornment,
    throwError,
    ...otherProps
  }: ISearchViewProps<Data, Payload>) => JSX.Element;
  export default SearchView;
}

declare module "react-declarative/components/ConstraintView/ConstraintView" {
  import * as React from "react";
  import {
    IAutoSizerProps,
    IChildParams,
  } from "react-declarative/components/AutoSizer";
  import IAnything from "react-declarative/model/IAnything";
  interface IConstraintViewProps<T extends IAnything = IAnything>
    extends Omit<
      IAutoSizerProps<T>,
      keyof {
        children: never;
      }
    > {
    phoneView?: React.ComponentType<any>;
    tabletView?: React.ComponentType<any>;
    desktopView?: React.ComponentType<any>;
    onViewChanged?: (name: string) => void;
    params?: IChildParams<T>;
  }
  /**
   * Represents a view that is constrained by the device's screen size to render different content
   *
   * @template T - The type of data passed to the view components
   * @param props - The props for the ConstraintView component
   * @param props.desktopView - The view component to render on desktop devices
   * @param props.tabletView - The view component to render on tablet devices
   * @param props.phoneView - The view component to render on phone devices
   * @param props.onViewChanged - A callback function invoked when the view changes
   * @param props.params - The parameters to pass to the view components
   * @param props - Any other props to pass to the component
   * @returns - The rendered content based on the current device's screen size
   */
  export const ConstraintView: <T extends unknown = any>({
    desktopView: Desktop,
    tabletView: Tablet,
    phoneView: Phone,
    onViewChanged,
    params,
    ...otherProps
  }: IConstraintViewProps<T>) => JSX.Element;
  export default ConstraintView;
}

declare module "react-declarative/components/ConstraintView/useConstraint" {
  export const useConstraint: (width: number) => {
    isPhone: boolean;
    isTablet: boolean;
    isDesktop: boolean;
  };
  export default useConstraint;
}

declare module "react-declarative/components/ScrollTopView/ScrollTopView" {
  import { FabProps } from "@mui/material/Fab";
  type IScrollTopViewProps = Omit<
    FabProps,
    keyof {
      onClick: never;
    }
  > & {
    scrollTarget?: HTMLElement;
  };
  /**
   * Represents a scroll to top button view component.
   *
   * @param props - The component props.
   * @param [props.className] - The class name for the component.
   * @param [props.style] - The inline style for the component.
   * @param [props.sx] - The sx prop for the component.
   * @param [props.color="primary"] - The color of the component.
   * @param [props.size="medium"] - The size of the component.
   * @param [props.scrollTarget=document.documentElement] - The element to scroll when clicked.
   * @param [props.otherProps] - Other additional props.
   *
   * @returns The scroll to top button view component.
   */
  export const ScrollTopView: ({
    className,
    style,
    sx,
    color,
    size,
    scrollTarget,
    ...otherProps
  }: IScrollTopViewProps) => JSX.Element;
  export default ScrollTopView;
}

declare module "react-declarative/components/OutletView/OutletView" {
  import IOutletViewProps from "react-declarative/components/OutletView/model/IOutletViewProps";
  import IOtherProps from "react-declarative/components/OutletView/model/IOtherProps";
  /**
   * OutletView component documentation
   *
   * @description Use `history.replace` to navigate between subviews
   *
   * @param className - The class name of the component
   * @param readonly - Flag indicating if the component should be in read only mode
   * @param waitForChangesDelay - Delay in milliseconds for waiting for changes before submit
   * @param initialData - Initial data object for the component
   * @param animation - Animation type for the component
   * @param routes - Array of route objects for the component
   * @param params - Parameters object for the component
   * @param upperPayload - Payload object for the component
   * @param history - History object for the component
   * @param fallback - Fallback function for error handling
   * @param onChange - Change event handler function
   * @param onSubmit - Submit event handler function
   * @param onLoadStart - Load start event handler function
   * @param onLoadEnd - Load end event handler function
   * @param upperChangeSubject - Change subject for the component
   * @param otherProps - Other properties for the component
   * @returns The rendered component
   */
  export const OutletView: <
    Data extends {} = Record<string, any>,
    Payload = any,
    Params = any,
    OtherProps = IOtherProps,
  >({
    className,
    readonly,
    waitForChangesDelay,
    initialData,
    animation,
    routes,
    params,
    payload: upperPayload,
    history,
    fallback,
    onChange,
    onSubmit,
    onLoadStart,
    onLoadEnd,
    changeSubject: upperChangeSubject,
    otherProps,
    ...revealProps
  }: IOutletViewProps<Data, Payload, Params, OtherProps>) => JSX.Element;
  export default OutletView;
}

declare module "react-declarative/components/OutletView/model/IOutlet" {
  import * as React from "react";
  import IAnything from "react-declarative/model/IAnything";
  import IOutletProps from "react-declarative/components/OutletView/model/IOutletProps";
  import IOtherProps from "react-declarative/components/OutletView/model/IOtherProps";
  export interface IOutlet<
    Data = IAnything,
    Payload = IAnything,
    Params = IAnything,
    OtherProps = IOtherProps,
  > {
    id: string;
    element: (
      props: IOutletProps<Data, Payload, Params> & OtherProps,
    ) => React.ReactElement;
    isAvailable?: (pathname: string) => boolean;
    isActive: (pathname: string) => boolean;
  }
  export default IOutlet;
}

declare module "react-declarative/components/OutletView/model/IOutletModal" {
  import IAnything from "react-declarative/model/IAnything";
  import IOutlet from "react-declarative/components/OutletView/model/IOutlet";
  export type ModalOtherProps = {
    onClose: () => void;
  };
  export type IOutletModal<
    Data = IAnything,
    Payload = IAnything,
    Params = IAnything,
  > = IOutlet<Data, Payload, Params, ModalOtherProps>;
  export default IOutletModal;
}

declare module "react-declarative/components/OutletView/model/IOutletProps" {
  import IAnything from "react-declarative/model/IAnything";
  import History from "react-declarative/model/History";
  export interface IOutletProps<
    Data = IAnything,
    Payload = IAnything,
    Params = IAnything,
  > {
    onChange: (data: Data[keyof Data], initial?: boolean) => void;
    onInvalid: (name: string, msg: string) => void;
    beginSave: () => Promise<boolean>;
    afterSave: () => Promise<void>;
    dirty: boolean;
    formState: {
      change: (data: Data) => void;
      data: Data;
      hasChanged: boolean;
      hasLoading: boolean;
      hasInvalid: boolean;
      payload: Payload;
      id: string;
    };
    history: History;
    activeOption: string;
    readonly: boolean;
    data: Data;
    hasChanged: boolean;
    hasLoading: boolean;
    hasInvalid: boolean;
    params: Params;
    payload: Payload;
  }
  export default IOutletProps;
}

declare module "react-declarative/components/OutletView/model/IOutletModalProps" {
  import IAnything from "react-declarative/model/IAnything";
  import { ModalOtherProps } from "react-declarative/components/OutletView/model/IOutletModal";
  import IOutletProps from "react-declarative/components/OutletView/model/IOutletProps";
  export type IOutletModalProps<
    Data = IAnything,
    Payload = IAnything,
    Params = IAnything,
  > = IOutletProps<Data, Payload, Params> & ModalOtherProps;
  export default IOutletModalProps;
}

declare module "react-declarative/components/OutletView/hooks/useOutletModal" {
  import { IOutletModalProps } from "react-declarative/components/OutletView/components/OutletModal";
  import IAnything from "react-declarative/model/IAnything";
  import History from "react-declarative/model/History";
  import Id from "react-declarative/components/OutletView/model/Id";
  import TSubject from "react-declarative/model/TSubject";
  interface IParams<
    Data extends {} = Record<string, any>,
    Payload = IAnything,
    Params = IAnything,
  > extends Omit<
      IOutletModalProps<Data, Payload, Params>,
      keyof {
        outletIdSubject: never;
        history: never;
        onSubmit: never;
        className: never;
      }
    > {
    onSubmit?: (
      id: Id,
      data: Data | null,
      payload: Payload,
    ) => Promise<boolean> | boolean;
    pickDataSubject?: TSubject<Id>;
    fullScreen?: boolean;
    history?: History;
    pathname?: string;
  }
  /**
   * A custom hook that provides functionality for managing and rendering an outlet modal.
   *
   * @template Data - The type of data associated with the outlet modal.
   * @template Payload - The type of payload passed during submission.
   * @template Params - The type of additional parameters.
   *
   * @param params - The parameters object.
   * @param params.fallback - The fallback content to be rendered if the modal cannot be displayed.
   * @param [params.pathname="/"] - The pathname for the outlet modal history.
   * @param [params.history] - The history object used to manage navigation.
   * @param [params.fullScreen=true] - A boolean value indicating whether the modal should be displayed in full screen.
   * @param params.onLoadEnd - The callback function to be called when the outlet content finishes loading.
   * @param params.onLoadStart - The callback function to be called when the outlet content starts loading.
   * @param [params.throwError] - A boolean value indicating whether errors should be thrown during submission.
   * @param params.onChange - The callback function to be called when the outlet content changes.
   * @param [params.onSubmit=() => true] - The callback function to be called when the outlet content is submitted.
   * @param params.onMount - The callback function to be called when the outlet modal is mounted.
   * @param params.onUnmount - The callback function to be called when the outlet modal is unmounted.
   * @param [params.onClose] - The callback function to be called when the outlet modal is closed.
   * @param [params.submitLabel] - The label for the submit button in the outlet modal.
   * @param [params.title] - The title for the outlet modal.
   * @param [params.hidden] - A boolean value indicating whether the outlet modal should be hidden.
   * @param [params.pickDataSubject] - The subject used for picking data.
   * @param outletProps - Additional props for the underlying `OutletModal` component.
   *
   * @returns - An object containing the following methods and properties:
   *   - `open` - A boolean value indicating whether the modal is open.
   *   - `render` - A function that renders the outlet modal.
   *   - `pickData` - A function used to pick data for the modal.
   *   - `close` - A function used to close the modal.
   */
  export const useOutletModal: <
    Data extends {} = Record<string, any>,
    Payload = any,
    Params = any,
  >({
    fallback,
    pathname,
    history: upperHistory,
    fullScreen,
    onLoadEnd,
    onLoadStart,
    throwError,
    onChange,
    onSubmit,
    onMount,
    onUnmount,
    onClose,
    submitLabel,
    title,
    hidden,
    pickDataSubject: upperPickDataSubject,
    ...outletProps
  }: IParams<Data, Payload, Params>) => {
    readonly open: typeof open;
    readonly render: () => JSX.Element;
    readonly pickData: (id: Id) => void;
    readonly close: () => Promise<boolean>;
  };
  export default useOutletModal;
}

declare module "react-declarative/components/AlertView/AlertView" {
  import { StackProps } from "@mui/material/Stack";
  interface IAlert {
    color: "success" | "info" | "warning" | "error";
    content: string;
  }
  interface IAlertViewProps extends StackProps {
    items?: IAlert[];
    variant?: "standard" | "filled" | "outlined";
  }
  /**
   * Represents an AlertView component that displays a stack of alerts.
   *
   * @param props - The properties used to configure the AlertView component.
   * @param props.className - The CSS class name for the AlertView component.
   * @param props.items - An array of items to display as alerts.
   * @param props.variant - The variant of the alerts. Default is "outlined".
   * @param props.otherProps - Additional props to be spread to the Stack component.
   * @returns - The rendered JSX element for the AlertView component.
   */
  export const AlertView: ({
    className,
    items,
    variant,
    ...otherProps
  }: IAlertViewProps) => JSX.Element;
  export default AlertView;
}

declare module "react-declarative/components/PaperView/PaperView" {
  import * as React from "react";
  import { PaperProps } from "@mui/material/Paper";
  export const PAPERVIEW_ROOT = "react-declatative__PaperView-root";
  interface IPaperViewProps
    extends Omit<
      PaperProps,
      keyof {
        component: never;
      }
    > {
    outlinePaper?: boolean;
    transparentPaper?: boolean;
  }
  /**
   * React component for rendering a customizable paper view.
   *
   * @component
   * @param  props - The component props.
   * @param props.className - The CSS class name for the paper view.
   * @param props.outlinePaper - Specifies whether the paper view should have an outline.
   * @param props.transparentPaper - Specifies whether the paper view should be transparent.
   * @param {React.Ref} ref - The ref to be forwarded to the underlying HTML element.
   * @returns {React.Element} The rendered paper view component.
   */
  export const PaperView: React.ForwardRefExoticComponent<
    Pick<
      IPaperViewProps,
      | "key"
      | "onChange"
      | "className"
      | "style"
      | "sx"
      | "onClick"
      | "classes"
      | "children"
      | "color"
      | "variant"
      | "slot"
      | "title"
      | "defaultChecked"
      | "defaultValue"
      | "suppressContentEditableWarning"
      | "suppressHydrationWarning"
      | "accessKey"
      | "contentEditable"
      | "contextMenu"
      | "dir"
      | "draggable"
      | "hidden"
      | "id"
      | "lang"
      | "placeholder"
      | "spellCheck"
      | "tabIndex"
      | "translate"
      | "radioGroup"
      | "role"
      | "about"
      | "datatype"
      | "inlist"
      | "prefix"
      | "property"
      | "resource"
      | "typeof"
      | "vocab"
      | "autoCapitalize"
      | "autoCorrect"
      | "autoSave"
      | "itemProp"
      | "itemScope"
      | "itemType"
      | "itemID"
      | "itemRef"
      | "results"
      | "security"
      | "unselectable"
      | "inputMode"
      | "is"
      | "aria-activedescendant"
      | "aria-atomic"
      | "aria-autocomplete"
      | "aria-busy"
      | "aria-checked"
      | "aria-colcount"
      | "aria-colindex"
      | "aria-colspan"
      | "aria-controls"
      | "aria-current"
      | "aria-describedby"
      | "aria-details"
      | "aria-disabled"
      | "aria-dropeffect"
      | "aria-errormessage"
      | "aria-expanded"
      | "aria-flowto"
      | "aria-grabbed"
      | "aria-haspopup"
      | "aria-hidden"
      | "aria-invalid"
      | "aria-keyshortcuts"
      | "aria-label"
      | "aria-labelledby"
      | "aria-level"
      | "aria-live"
      | "aria-modal"
      | "aria-multiline"
      | "aria-multiselectable"
      | "aria-orientation"
      | "aria-owns"
      | "aria-placeholder"
      | "aria-posinset"
      | "aria-pressed"
      | "aria-readonly"
      | "aria-relevant"
      | "aria-required"
      | "aria-roledescription"
      | "aria-rowcount"
      | "aria-rowindex"
      | "aria-rowspan"
      | "aria-selected"
      | "aria-setsize"
      | "aria-sort"
      | "aria-valuemax"
      | "aria-valuemin"
      | "aria-valuenow"
      | "aria-valuetext"
      | "dangerouslySetInnerHTML"
      | "onCopy"
      | "onCopyCapture"
      | "onCut"
      | "onCutCapture"
      | "onPaste"
      | "onPasteCapture"
      | "onCompositionEnd"
      | "onCompositionEndCapture"
      | "onCompositionStart"
      | "onCompositionStartCapture"
      | "onCompositionUpdate"
      | "onCompositionUpdateCapture"
      | "onFocus"
      | "onFocusCapture"
      | "onBlur"
      | "onBlurCapture"
      | "onChangeCapture"
      | "onBeforeInput"
      | "onBeforeInputCapture"
      | "onInput"
      | "onInputCapture"
      | "onReset"
      | "onResetCapture"
      | "onSubmit"
      | "onSubmitCapture"
      | "onInvalid"
      | "onInvalidCapture"
      | "onLoad"
      | "onLoadCapture"
      | "onError"
      | "onErrorCapture"
      | "onKeyDown"
      | "onKeyDownCapture"
      | "onKeyPress"
      | "onKeyPressCapture"
      | "onKeyUp"
      | "onKeyUpCapture"
      | "onAbort"
      | "onAbortCapture"
      | "onCanPlay"
      | "onCanPlayCapture"
      | "onCanPlayThrough"
      | "onCanPlayThroughCapture"
      | "onDurationChange"
      | "onDurationChangeCapture"
      | "onEmptied"
      | "onEmptiedCapture"
      | "onEncrypted"
      | "onEncryptedCapture"
      | "onEnded"
      | "onEndedCapture"
      | "onLoadedData"
      | "onLoadedDataCapture"
      | "onLoadedMetadata"
      | "onLoadedMetadataCapture"
      | "onLoadStart"
      | "onLoadStartCapture"
      | "onPause"
      | "onPauseCapture"
      | "onPlay"
      | "onPlayCapture"
      | "onPlaying"
      | "onPlayingCapture"
      | "onProgress"
      | "onProgressCapture"
      | "onRateChange"
      | "onRateChangeCapture"
      | "onSeeked"
      | "onSeekedCapture"
      | "onSeeking"
      | "onSeekingCapture"
      | "onStalled"
      | "onStalledCapture"
      | "onSuspend"
      | "onSuspendCapture"
      | "onTimeUpdate"
      | "onTimeUpdateCapture"
      | "onVolumeChange"
      | "onVolumeChangeCapture"
      | "onWaiting"
      | "onWaitingCapture"
      | "onAuxClick"
      | "onAuxClickCapture"
      | "onClickCapture"
      | "onContextMenu"
      | "onContextMenuCapture"
      | "onDoubleClick"
      | "onDoubleClickCapture"
      | "onDrag"
      | "onDragCapture"
      | "onDragEnd"
      | "onDragEndCapture"
      | "onDragEnter"
      | "onDragEnterCapture"
      | "onDragExit"
      | "onDragExitCapture"
      | "onDragLeave"
      | "onDragLeaveCapture"
      | "onDragOver"
      | "onDragOverCapture"
      | "onDragStart"
      | "onDragStartCapture"
      | "onDrop"
      | "onDropCapture"
      | "onMouseDown"
      | "onMouseDownCapture"
      | "onMouseEnter"
      | "onMouseLeave"
      | "onMouseMove"
      | "onMouseMoveCapture"
      | "onMouseOut"
      | "onMouseOutCapture"
      | "onMouseOver"
      | "onMouseOverCapture"
      | "onMouseUp"
      | "onMouseUpCapture"
      | "onSelect"
      | "onSelectCapture"
      | "onTouchCancel"
      | "onTouchCancelCapture"
      | "onTouchEnd"
      | "onTouchEndCapture"
      | "onTouchMove"
      | "onTouchMoveCapture"
      | "onTouchStart"
      | "onTouchStartCapture"
      | "onPointerDown"
      | "onPointerDownCapture"
      | "onPointerMove"
      | "onPointerMoveCapture"
      | "onPointerUp"
      | "onPointerUpCapture"
      | "onPointerCancel"
      | "onPointerCancelCapture"
      | "onPointerEnter"
      | "onPointerEnterCapture"
      | "onPointerLeave"
      | "onPointerLeaveCapture"
      | "onPointerOver"
      | "onPointerOverCapture"
      | "onPointerOut"
      | "onPointerOutCapture"
      | "onGotPointerCapture"
      | "onGotPointerCaptureCapture"
      | "onLostPointerCapture"
      | "onLostPointerCaptureCapture"
      | "onScroll"
      | "onScrollCapture"
      | "onWheel"
      | "onWheelCapture"
      | "onAnimationStart"
      | "onAnimationStartCapture"
      | "onAnimationEnd"
      | "onAnimationEndCapture"
      | "onAnimationIteration"
      | "onAnimationIterationCapture"
      | "onTransitionEnd"
      | "onTransitionEndCapture"
      | "outlinePaper"
      | "transparentPaper"
      | "elevation"
      | "square"
    > &
      React.RefAttributes<HTMLDivElement>
  >;
  export default PaperView;
}

declare module "react-declarative/components/DragDropView/DragDropView" {
  import * as React from "react";
  import { SxProps } from "@mui/material/styles";
  interface IDragDropViewProps {
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    disabled?: boolean;
    multiple?: boolean;
    accept?: string;
    onData?: (files: File[]) => void;
    onReject?: (files: File[]) => void;
  }
  export const ACCEPT_DEFAULT =
    ".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel";
  /**
   * Represents a drag and drop view component.
   * @typedef DragDropView
   * @property className - The class name for the component.
   * @property style - The inline style for the component.
   * @property sx - The style object for sx prop.
   * @property disabled - Indicates whether the drag and drop functionality is disabled.
   * @property multiple - Indicates whether multiple files can be selected.
   * @property accept - The file types that are accepted for upload.
   * @property onData - The callback function called when files are dropped or selected.
   * @property onReject - The callback function called when files are rejected.
   */
  export const DragDropView: ({
    className,
    style,
    sx,
    disabled,
    multiple,
    accept,
    onData,
    onReject,
  }: IDragDropViewProps) => JSX.Element;
  export default DragDropView;
}

declare module "react-declarative/components/FilesView/FilesView" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  export interface IFilesViewProps {
    items?: string[];
    disabled?: boolean;
    onUpload?: (file: File) => string | Promise<string>;
    onRemove?: (item: string) => void | Promise<void>;
    onChange?: (items: string[]) => void | Promise<void>;
    onClick?: (item: string) => void | Promise<void>;
    tr?: (item: string) => string | Promise<string>;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    accept?: string;
    multiple?: boolean;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
  }
  /**
   * A component for displaying a list of files with upload, remove, and click functionalities.
   *
   * @param items - The list of file names to display.
   * @param className - Additional CSS class names for the root element.
   * @param style - Additional inline styles for the root element.
   * @param sx - Additional theme styles for the root element.
   * @param disabled - Flag to disable the component.
   * @param onUpload - The callback function when a file is uploaded. It accepts the uploaded file as an argument and should return the name of the uploaded file.
   * @param onRemove - The callback function when a file is removed. It accepts the file name as an argument.
   * @param onChange - The callback function when the file list changes. It does not accept any arguments.
   * @param onClick - The callback function when a file is clicked. It accepts the file name as an argument.
   * @param tr - The translation function for translating labels. It accepts a label as an argument and should return the translated label.
   * @param accept - The file types that can be uploaded. Defaults to ACCEPT_DEFAULT.
   * @param multiple - Flag to allow multiple file uploads. Defaults to false.
   * @param onLoadStart - The callback function when file loading starts.
   * @param onLoadEnd - The callback function when file loading ends. It accepts a boolean flag indicating if the loading was successful or not.
   * @param fallback - The fallback function to handle errors. It accepts an Error object as an argument.
   * @param throwError - Flag to throw error instead of handling it with the fallback function.
   *
   * @returns The FilesView component.
   */
  export const FilesView: ({
    items,
    className,
    style,
    sx,
    disabled: upperDisabled,
    onUpload,
    onRemove,
    onChange,
    onClick,
    tr,
    accept,
    multiple,
    onLoadStart,
    onLoadEnd,
    fallback,
    throwError,
  }: IFilesViewProps) => JSX.Element;
  export default FilesView;
}

declare module "react-declarative/components/FilesView/api/usePreventNavigate" {
  import { MemoryHistory, BrowserHistory, HashHistory } from "history";
  interface IParams {
    history: MemoryHistory | BrowserHistory | HashHistory;
    withConfirm?: boolean;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
  }
  /**
   * Prevents navigation, displays confirmation prompt if specified,
   * and handles loading state changes.
   *
   * @param history - The history object from react-router-dom.
   * @param withConfirm - Determines if a confirmation prompt should be displayed before navigating.
   * @param onLoadStart - Callback function invoked when loading starts.
   * @param onLoadEnd - Callback function invoked when loading ends.
   * @returns
   *
   *
   *
   *
   *
   *  - Object containing methods and state for preventing navigation and handling loading state.
   */
  export const usePreventNavigate: ({
    history,
    withConfirm,
    onLoadStart,
    onLoadEnd,
  }: IParams) => {
    readonly handleLoadStart: () => void;
    readonly handleLoadEnd: (isOk: boolean) => void;
    readonly unblock: () => void;
    readonly block: () => void;
    readonly loading: boolean;
  };
  export default usePreventNavigate;
}

declare module "react-declarative/components/FilesView/useFilesView" {
  import { SxProps } from "@mui/material";
  import { IFilesViewProps } from "react-declarative/components/FilesView/FilesView";
  import IAnything from "react-declarative/model/IAnything";
  import ISize from "react-declarative/model/ISize";
  interface IParams<Payload extends IAnything = IAnything> {
    sizeRequest?: (size: ISize) => {
      height: number;
      width: number;
      sx?: SxProps;
    };
    data?: string[] | null;
    fullScreen?: boolean;
    readonly?: boolean;
    submitLabel?: string;
    withActionButton?: boolean;
    withStaticAction?: boolean;
    payload?: Payload | (() => Payload);
    onSubmit?: (data: string[], payload: Payload) => void;
    onChange?: (data: string[], payload: Payload) => void;
    tr?: IFilesViewProps["tr"];
    fallback?: IFilesViewProps["fallback"];
    onLoadStart?: IFilesViewProps["onLoadStart"];
    onLoadEnd?: IFilesViewProps["onLoadEnd"];
    onClick?: IFilesViewProps["onClick"];
    onUpload?: IFilesViewProps["onUpload"];
  }
  /**
   * Represents a reusable component for displaying and managing files.
   * @template Payload - The payload type (optional)
   * @param params - The parameters for the component.
   * @param params.data - The initial data for the files (optional).
   * @param params.withActionButton - Determines if the submit button is displayed (default: true).
   * @param params.withStaticAction - Determines if the submit button should fail silently when clicked (default: false).
   * @param params.readonly - Determines if the files are readonly (optional).
   * @param params.submitLabel - The label for the submit button (default: "Save").
   * @param params.payload - The payload for the component (optional).
   * @param params.fullScreen - Determines if the component should be displayed in full screen mode (default: false).
   * @param params.sizeRequest - A function that computes the size request for the component (optional).
   * @param params.onChange - A callback function for changes in the files (optional).
   * @param params.onSubmit - A callback function for submitting the files (optional).
   * @param params.tr - The translations for the component (optional).
   * @param params.fallback - The fallback component for unsupported file types (optional).
   * @param params.onLoadStart - A callback function for when loading starts (optional).
   * @param params.onLoadEnd - A callback function for when loading ends (optional).
   * @param params.onClick - A callback function for clicking on a file (optional).
   * @param params.onUpload - A callback function for uploading a file (optional).
   * @returns - An object with the render function for the component and the pickFiles function to open the file picker.
   */
  export const useFilesView: <Payload extends unknown = any>({
    data,
    withActionButton,
    withStaticAction,
    readonly,
    submitLabel,
    payload: upperPayload,
    fullScreen,
    sizeRequest,
    onChange,
    onSubmit,
    tr,
    fallback,
    onLoadStart,
    onLoadEnd,
    onClick,
    onUpload,
  }: IParams<Payload>) => {
    render: () => JSX.Element;
    pickFiles: () => void;
  };
  export default useFilesView;
}

declare module "react-declarative/components/ScrollView/ScrollView" {
  import * as React from "react";
  import { BoxProps } from "@mui/material";
  export const SCROLL_VIEW_TARGER = "react-declarative__scrollViewTarget";
  interface IScrollViewProps extends BoxProps {
    withScrollbar?: boolean;
    hideOverflowX?: boolean;
    hideOverflowY?: boolean;
    children: React.ReactNode;
    className?: string;
    style?: React.CSSProperties;
    center?: boolean;
  }
  /**
   * This component allows to create a scrollable view container with optional scrollbar.
   *
   * @param props - The props object.
   * @param props.children - The content to be rendered inside the ScrollView.
   * @param [props.className] - Optional class name to be added to the root element.
   * @param [props.style] - Optional inline styles for the root element.
   * @param [props.center=false] - Whether to horizontally center the content within the ScrollView.
   * @param [props.withScrollbar=false] - Whether to show a scrollbar within the ScrollView.
   * @param [props.hideOverflowX=false] - Whether to hide overflow in the X axis.
   * @param [props.hideOverflowY=false] - Whether to hide overflow in the Y axis.
   * @param [otherProps] - Other props to be spread on the root element.
   * @returns - The rendered ScrollView component.
   */
  export const ScrollView: ({
    children,
    className,
    style,
    center,
    withScrollbar,
    hideOverflowX,
    hideOverflowY,
    ...otherProps
  }: IScrollViewProps) => JSX.Element;
  export default ScrollView;
}

declare module "react-declarative/components/ScaleView/ScaleView" {
  import * as React from "react";
  interface IScaleViewProps {
    className?: string;
    style?: React.CSSProperties;
    children?: React.ReactNode;
    stretch?: boolean;
    center?: boolean;
  }
  /**
   * Represents a component that scales its children based on its size.
   * @typedef IScaleViewProps
   * @property children - The children elements to be scaled.
   * @property className - The class name of the root div element.
   * @property style - The custom style of the root div element.
   * @property stretch - Determines whether to stretch the scaled children to fit the container.
   * @property center - Determines whether to center the scaled children within the container.
   */
  export const ScaleView: ({
    children,
    className,
    style,
    stretch,
    center,
  }: IScaleViewProps) => JSX.Element;
  export default ScaleView;
}

declare module "react-declarative/components/AutoSizer/AutoSizer" {
  import * as React from "react";
  import ISize from "react-declarative/model/ISize";
  export interface IChildParams<T extends any = unknown> extends ISize {
    payload?: T;
  }
  export interface IAutoSizerProps<T extends any = unknown> {
    children: (s: IChildParams<T>) => any;
    className?: string;
    defaultHeight?: number;
    defaultWidth?: number;
    withContainerHeight?: boolean;
    withContainerWidth?: boolean;
    heightRequest?: (h: number) => number;
    widthRequest?: (w: number) => number;
    onResize?: (s: ISize) => void;
    style?: React.CSSProperties;
    payload?: T;
    target?: HTMLElement;
    closest?: string;
    selector?: string;
  }
  type State = {
    height: number;
    width: number;
    childHeight: number;
    childWidth: number;
  };
  type ResizeHandler = (element: HTMLElement, onResize: () => void) => void;
  type DetectElementResize = {
    addResizeListener: ResizeHandler;
    removeResizeListener: ResizeHandler;
  };
  /**
   * A component that automatically resizes its children based on its parent element's size.
   */
  export class AutoSizer<T extends unknown = object> extends React.Component<
    IAutoSizerProps<T>,
    State
  > {
    static defaultProps: Partial<IAutoSizerProps<any>>;
    lastHeightRequest: (h: number) => number;
    lastWidthRequest: (w: number) => number;
    state: {
      height: number;
      width: number;
      childHeight: number;
      childWidth: number;
    };
    _parentNode?: HTMLElement;
    _autoSizer?: HTMLElement | null;
    _detectElementResize?: DetectElementResize;
    shouldComponentUpdate(
      nextProps: IAutoSizerProps<T>,
      nextState: State,
    ): boolean;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    _onResize: () => void;
    _setRef: (autoSizer: HTMLElement | null) => void;
  }
  export default AutoSizer;
}

declare module "react-declarative/components/FadeView/FadeView" {
  import * as React from "react";
  import { IFadeContainerProps } from "react-declarative/components/FadeView/components/FadeContainer";
  type FadeContainerT = Pick<
    IFadeContainerProps,
    keyof {
      Fade: never;
      color: never;
      zIndex: never;
      disableBottom: never;
      disableRight: never;
    }
  >;
  interface IFadeViewProps extends FadeContainerT {
    className?: string;
    style?: React.CSSProperties;
    children: React.ReactNode;
  }
  /**
   * Represents a fade view component with various customizable options.
   * @param props - The properties for the FadeView component.
   * @param props.className - The CSS class name for the FadeView component.
   * @param props.style - The inline style object for the FadeView component.
   * @param props.children - The child elements of the FadeView component.
   * @param props.Fade - The fade effect component to be used.
   * @param props.color - The color of the fade effect.
   * @param props.zIndex - The z-index of the fade effect.
   * @param props.disableBottom - Determines if the fade effect should be disabled at the bottom.
   * @param props.disableRight - Determines if the fade effect should be disabled at the right side.
   * @returns - The rendered FadeView component.
   */
  export const FadeView: ({
    className,
    style,
    children,
    Fade,
    color,
    zIndex,
    disableBottom,
    disableRight,
  }: IFadeViewProps) => JSX.Element;
  export default FadeView;
}

declare module "react-declarative/components/TabsView/TabsView" {
  import ITabsViewProps from "react-declarative/components/TabsView/model/ITabsViewProps";
  /**
   * Represents a view component for rendering tabs and associated content.
   *
   * @template Data - The type of data associated with the tabs.
   * @template Payload - The type of payload associated with the tabs.
   * @param props - The props for the TabsView component.
   * @param [props.className] - The CSS class name.
   * @param [props.style] - The inline style object.
   * @param [props.sx] - The theme styling object.
   * @param [props.outlinePaper=false] - Whether to use outline paper.
   * @param [props.transparentPaper=false] - Whether the paper is transparent.
   * @param [props.transparentHeader=false] - Whether the header is transparent.
   * @param [props.history=upperHistory] - The history object for navigation.
   * @param [props.payload=upperPayload] - The payload associated with the tabs.
   * @param [props.pathname="/"] - The current pathname.
   * @param [props.tabs=upperTabs] - The array of tabs to render.
   * @param routes - The array of routes associated with the tabs.
   * @param onTabChange - The callback function fired when a tab is changed.
   * @param onLoadStart - The callback function fired when the loading starts.
   * @param onLoadEnd - The callback function fired when the loading ends.
   * @param BeforeTabs - The component to render before the tabs.
   * @param AfterTabs - The component to render after the tabs.
   * @param [props.otherProps=upperOtherProps] - The other props to pass to sub-components.
   * @returns - The rendered TabsView component.
   */
  export const TabsView: <Data extends {} = any, Payload = any>({
    className,
    style,
    sx,
    outlinePaper,
    transparentPaper,
    transparentHeader,
    history: upperHistory,
    payload: upperPayload,
    pathname,
    tabs: upperTabs,
    routes,
    onTabChange,
    onLoadStart,
    onLoadEnd,
    BeforeTabs,
    AfterTabs,
    otherProps: upperOtherProps,
    ...outletProps
  }: ITabsViewProps<Data, Payload>) => JSX.Element;
  export default TabsView;
}

declare module "react-declarative/components/TabsView/model/ITabsOutlet" {
  import IAnything from "react-declarative/model/IAnything";
  import ISize from "react-declarative/model/ISize";
  import { IOutlet } from "react-declarative/components/OutletView";
  import ITabsOutletProps from "react-declarative/components/TabsView/model/ITabsOutletProps";
  export type OtherProps = {
    size: ISize;
    loading: boolean;
    progress: number;
    setLoading: (loading: boolean) => void;
    setProgress: (progress: number) => void;
  };
  export interface ITabsOutlet<Data = IAnything, Payload = IAnything>
    extends Omit<
      IOutlet<Data, Payload>,
      keyof {
        element: never;
      }
    > {
    element: (props: ITabsOutletProps<Data, Payload>) => React.ReactElement;
  }
  export default ITabsOutlet;
}

declare module "react-declarative/components/TabsView/model/ITabsOutletProps" {
  import IAnything from "react-declarative/model/IAnything";
  import { IOutletProps } from "react-declarative/components/OutletView";
  import { OtherProps } from "react-declarative/components/TabsView/model/ITabsOutlet";
  export type ITabsOutletProps<
    Data = IAnything,
    Payload = IAnything,
    Other = {},
  > = IOutletProps<Data, Payload, OtherProps & Other> & OtherProps & Other;
  export default ITabsOutletProps;
}

declare module "react-declarative/components/TabsView/model/ITabsStep" {
  import IAnything from "react-declarative/model/IAnything";
  export interface ITabsStep<Payload extends IAnything = IAnything> {
    id?: string;
    isMatch?: (id: string) => boolean;
    isVisible?: (payload: Payload) => boolean;
    label: string;
    icon?: React.ComponentType<any>;
  }
  export default ITabsStep;
}

declare module "react-declarative/components/TabsView/model/ITabsModal" {
  import IAnything from "react-declarative/model/IAnything";
  import ITabsOutlet from "react-declarative/components/TabsView/model/ITabsOutlet";
  import ITabsModalProps from "react-declarative/components/TabsView/model/ITabsModalProps";
  export type ITabsModal<Data = IAnything, Payload = IAnything> = Omit<
    ITabsOutlet<Data, Payload>,
    keyof {
      element: never;
    }
  > & {
    element: (props: ITabsModalProps<Data, Payload>) => React.ReactElement;
  };
  export default ITabsModal;
}

declare module "react-declarative/components/TabsView/model/ITabsModalProps" {
  import IAnything from "react-declarative/model/IAnything";
  import ITabsOutletProps from "react-declarative/components/TabsView/model/ITabsOutletProps";
  import { OtherProps } from "react-declarative/components/TabsView/model/ITabsOutlet";
  type ModalOtherProps = {
    onClose: () => void;
  };
  export type ITabsModalProps<
    Data = IAnything,
    Payload = IAnything,
  > = ITabsOutletProps<Data, Payload, ModalOtherProps> &
    ModalOtherProps &
    OtherProps;
  export default ITabsModalProps;
}

declare module "react-declarative/components/FetchView/FetchView" {
  import * as React from "react";
  import { IAsyncProps } from "react-declarative/components/Async";
  import { IRevealProps } from "react-declarative/components/FetchView/components/Reveal";
  type Result = React.ReactNode | void;
  type ObjectState<P extends any = object, A = any> =
    | ((payload: P) => Promise<A>)
    | ((payload: P) => A);
  type TupleState<
    P extends any = object,
    A = any,
    B = any,
    C = any,
    D = any,
    E = any,
    F = any,
    G = any,
    H = any,
    I = any,
    J = any,
  > =
    | ((
        payload: P,
      ) => readonly [
        Promise<A>?,
        Promise<B>?,
        Promise<C>?,
        Promise<D>?,
        Promise<E>?,
        Promise<F>?,
        Promise<G>?,
        Promise<H>?,
        Promise<I>?,
        Promise<J>?,
      ])
    | ((payload: P) => readonly [A?, B?, C?, D?, E?, F?, G?, H?, I?, J?])
    | ((
        payload: P,
      ) => [
        Promise<A>?,
        Promise<B>?,
        Promise<C>?,
        Promise<D>?,
        Promise<E>?,
        Promise<F>?,
        Promise<G>?,
        Promise<H>?,
        Promise<I>?,
        Promise<J>?,
      ])
    | ((payload: P) => [A?, B?, C?, D?, E?, F?, G?, H?, I?, J?]);
  export interface IFetchViewBaseProps<
    P extends any = object,
    A = any,
    B = any,
    C = any,
    D = any,
    E = any,
    F = any,
    G = any,
    H = any,
    I = any,
    J = any,
  > extends Omit<
      IAsyncProps<P>,
      keyof {
        children: never;
      }
    > {
    animation?: IRevealProps["animation"];
    className?: string;
    style?: React.CSSProperties;
    children: (
      a: A,
      b: B,
      c: C,
      d: D,
      e: E,
      f: F,
      g: G,
      h: H,
      i: I,
      j: J,
    ) => Promise<Result> | Result;
  }
  export type IFetchViewObjectProps<
    P extends any = object,
    A = any,
    B = any,
    C = any,
    D = any,
    E = any,
    F = any,
    G = any,
    H = any,
    I = any,
    J = any,
  > = IFetchViewBaseProps<P, A, B, C, D, E, F, G, H, I, J> & {
    state: ObjectState<P, A>;
  };
  export type IFetchViewTupleProps<
    P extends any = object,
    A = any,
    B = any,
    C = any,
    D = any,
    E = any,
    F = any,
    G = any,
    H = any,
    I = any,
    J = any,
  > = IFetchViewBaseProps<P, A, B, C, D, E, F, G, H, I, J> & {
    state: TupleState<P, A, B, C, D, E, F, G, H, I, J>;
  };
  export type IFetchViewProps<
    P extends any = object,
    A = any,
    B = any,
    C = any,
    D = any,
    E = any,
    F = any,
    G = any,
    H = any,
    I = any,
    J = any,
  > =
    | IFetchViewTupleProps<P, A, B, C, D, E, F, G, H, I, J>
    | IFetchViewObjectProps<P, A, B, C, D, E, F, G, H, I, J>;
  /**
   * FetchView is a React component that provides a convenient way to handle asynchronous data fetching and rendering.
   *
   * @template P - The type of the payload for the data fetching.
   * @template A - The type of the first element in the array of data returned by the state function.
   * @template B - The type of the second element in the array of data returned by the state function.
   * @template C - The type of the third element in the array of data returned by the state function.
   * @template D - The type of the fourth element in the array of data returned by the state function.
   * @template E - The type of the fifth element in the array of data returned by the state function.
   * @template F - The type of the sixth element in the array of data returned by the state function.
   * @template G - The type of the seventh element in the array of data returned by the state function.
   * @template H - The type of the eighth element in the array of data returned by the state function.
   * @template I - The type of the ninth element in the array of data returned by the state function.
   * @template J - The type of the tenth element in the array of data returned by the state function.
   *
   * @param props - The props object containing the following properties:
   *  - animation: The animation type for the component.
   *  - className: The CSS class name(s) for the component.
   *  - style: The inline style object for the component.
   *  - Loader: The component to render while data is being fetched.
   *  - Error: The component to render if an error occurs during data fetching.
   *  - onLoadEnd: A callback function to be called when data loading ends.
   *  - onLoadStart: A callback function to be called when data loading starts.
   *  - children: A function that receives the fetched data as arguments and returns the JSX to be rendered.
   *  - state: The function to transform the payload into an array of data.
   *  - payload: The payload for the data fetching.
   *  - otherProps: Any additional props to be passed to the underlying components.
   *
   * @returns - The rendered JSX for the FetchView component.
   */
  export const FetchView: <
    P extends unknown = object,
    A = any,
    B = any,
    C = any,
    D = any,
    E = any,
    F = any,
    G = any,
    H = any,
    I = any,
    J = any,
  >({
    animation,
    className,
    style,
    Loader,
    Error,
    onLoadEnd,
    onLoadStart,
    children,
    state,
    payload,
    ...otherProps
  }: IFetchViewProps<P, A, B, C, D, E, F, G, H, I, J>) => JSX.Element;
  export default FetchView;
}

declare module "react-declarative/components/FetchView/components/Reveal" {
  import { BoxProps } from "@mui/material/Box";
  export interface IRevealProps extends BoxProps {
    animation?: "slideDown" | "fadeIn" | "scale" | "none";
    appear?: boolean;
  }
  export const Reveal: ({
    children,
    className,
    animation,
    appear,
    ...otherProps
  }: IRevealProps) => JSX.Element;
  export default Reveal;
}

declare module "react-declarative/components/WaitView/WaitView" {
  import * as React from "react";
  import { IAsyncProps } from "react-declarative/components/Async";
  interface IWaitViewProps<P extends any = object, T extends any = object>
    extends Omit<
      IAsyncProps<P>,
      keyof {
        children: never;
      }
    > {
    Content: React.ComponentType<any>;
    condition: () =>
      | Promise<boolean>
      | boolean
      | Promise<T>
      | T
      | Promise<null>
      | null;
    conditionMap?: (result: T) => boolean;
    onDone?: (attempts: number) => void;
    totalAttempts?: number;
    delay?: number;
  }
  /**
   * Renders a component with loading, content, and error states based on a condition.
   *
   * @template P - The type of the payload.
   * @template T - The type of the condition result.
   *
   * @param props - The component props.
   * @param props.onDone - A callback function to be executed when the condition is met.
   * @param props.condition - A function that returns a condition.
   * @param [props.Loader=Fragment] - The loading component.
   * @param [props.Content=Fragment] - The content component.
   * @param [props.Error=Fragment] - The error component.
   * @param [props.delay=1000] - The delay in milliseconds before retrying the condition.
   * @param [props.totalAttempts=Infinity] - The maximum number of attempts before showing the error state.
   * @param [props.conditionMap=(result) => !!result] - A function to map the condition result to a boolean value.
   * @param props.payload - The payload to be passed to the components.
   * @param otherProps - Other props to be passed to the Async component.
   *
   * @returns The rendered component.
   */
  export const WaitView: <
    P extends unknown = object,
    T extends unknown = object,
  >({
    onDone,
    condition,
    Loader,
    Content,
    Error,
    delay,
    totalAttempts,
    conditionMap,
    payload,
    ...otherProps
  }: IWaitViewProps<P, T>) => JSX.Element | null;
  export default WaitView;
}

declare module "react-declarative/components/PingView/PingView" {
  import * as React from "react";
  interface IPingViewProps<P extends any = object> {
    children?: React.ReactNode;
    Offline?: React.ComponentType<any>;
    ping: (payload?: P) => boolean | Promise<boolean>;
    fallback?: (e: Error) => void;
    throwError?: boolean;
    delay?: 5000;
    payload?: P;
    onOnline?: () => void;
    onOffline?: () => void;
  }
  /**
   * PingView component for checking online status using a ping function.
   * Renders children when online, displays offline component when offline.
   *
   * @template P - Type parameter for the payload object passed to the ping function
   *
   * @param props - The component props
   * @param props.ping - The ping function to check online status
   * @param props.children - The child components to render when online
   * @param [props.onOnline=() => null] - Callback function to be called when online
   * @param [props.onOffline=() => null] - Callback function to be called when offline
   * @param [props.Offline=Fragment] - The component to render when offline
   * @param [props.fallback] - The fallback component to render when an error occurs
   * @param [props.throwError] - Indicates if an error should be thrown when an error occurs during ping
   * @param [props.delay=5000] - The delay between consecutive pings (in milliseconds)
   * @param [props.payload] - The payload object to be passed to the ping function
   *
   * @returns - The rendered component or null if initialization is in progress
   */
  export const PingView: <P extends unknown = object>({
    ping,
    children,
    onOnline,
    onOffline,
    Offline,
    fallback,
    throwError,
    delay,
    payload,
  }: IPingViewProps<P>) => JSX.Element | null;
  export default PingView;
}

declare module "react-declarative/components/HtmlView/HtmlView" {
  import * as React from "react";
  import { BoxProps } from "@mui/material/Box";
  interface IConfig {
    allowElements: string[];
    blockElements: string[];
    dropElements: string[];
    allowAttributes: Record<string, string[]>;
    dropAttributes: Record<string, string[]>;
    allowCustomElements: boolean;
    allowComments: boolean;
  }
  class Sanitizer {
    constructor(config?: Partial<IConfig>);
  }
  global {
    interface Window {
      Sanitizer: new (
        ...params: ConstructorParameters<typeof Sanitizer>
      ) => Sanitizer;
    }
  }
  interface IHtmlViewProps<T extends any = object> extends BoxProps {
    children?: React.ReactNode;
    config?: Partial<IConfig>;
    handler: (p: T) => string | Promise<string>;
    fallback?: (e: Error) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    payload?: T;
    deps?: any[];
    throwError?: boolean;
  }
  /**
   * Represents an HTML view component.
   * @typedef HtmlView
   * @param children - The children elements.
   * @param config - The configuration object.
   * @param handler - The handler function.
   * @param fallback - The fallback function.
   * @param onLoadStart - The onLoadStart callback function.
   * @param onLoadEnd - The onLoadEnd callback function.
   * @param payload - The payload.
   * @param deps - The dependencies.
   * @param throwError - Indicates whether to throw an error if encountered.
   * @param otherProps - Other additional props.
   * @returns The HTML view component.
   */
  export const HtmlView: {
    ({
      children,
      config,
      handler,
      fallback,
      onLoadStart,
      onLoadEnd,
      payload,
      deps,
      throwError,
      ...otherProps
    }: IHtmlViewProps): JSX.Element;
    sanitize: (html: string, config?: Partial<IConfig> | undefined) => string;
  };
  export default HtmlView;
}

declare module "react-declarative/components/OfflineView/OfflineView" {
  import * as React from "react";
  interface IOfflineViewProps {
    children?: React.ReactNode;
    onOnline?: () => void;
    onOffline?: () => void;
    withPolling?: boolean;
    config?: IConfig;
    Offline?: React.ComponentType<any>;
  }
  interface IConfig {
    url: string;
    method?: string;
    interval?: number;
    timeout?: number;
  }
  export const OfflineView: ({
    children,
    onOnline,
    onOffline,
    config,
    withPolling,
    Offline,
  }: IOfflineViewProps) => JSX.Element | null;
  export default OfflineView;
}

declare module "react-declarative/components/RevealView/RevealView" {
  import * as React from "react";
  import { IRevealProps } from "react-declarative/components/FetchView/components/Reveal";
  interface IRevealViewProps {
    className?: string;
    style?: React.CSSProperties;
    animation?: IRevealProps["animation"];
    delay?: number;
    appear?: boolean;
    children: React.ReactNode;
  }
  /**
   * Render a RevealView component that animates the appearance of its children.
   *
   * @param props - The component props.
   * @param props.children - The children to be revealed.
   * @param [props.className] - The additional CSS class names for the component.
   * @param [props.style] - The inline CSS styles for the component.
   * @param [props.animation] - The animation to use for revealing the children.
   * @param [props.delay=REVEAL_DELAY] - The delay in milliseconds before the children start to appear.
   * @param [props.appear=true] - Determines whether the children should appear.
   */
  export const RevealView: ({
    children,
    className,
    style,
    animation,
    delay,
    appear: upperAppear,
  }: IRevealViewProps) => JSX.Element;
  export default RevealView;
}

declare module "react-declarative/components/SecretView/SecretView" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  interface ISecretViewProps {
    children?: React.ReactNode;
    onCode?: (code: number) => void;
    enabled?: boolean;
    title?: string;
    description?: string;
    digits?: number;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
  }
  /**
   * Represents a component that displays a secret view with an input for entering a code.
   *
   * @param className - The class name for the component.
   * @param style - The inline styles for the component.
   * @param sx - The sx styles for the component.
   * @param children - The child components to be rendered.
   * @param enabled - Whether the secret view is enabled or disabled. Default is true.
   * @param title - The title for the secret view. Default is "Service menu".
   * @param description - The description for the secret view. Default is "Please type a secret\ncode to continue".
   * @param digits - The total number of digits for the code. Default is DEFAULT_TOTAL_DIGITS.
   * @param onCode - The callback function to be called when the code is entered.
   * @returns - The rendered secret view component.
   */
  export const SecretView: ({
    className,
    style,
    sx,
    children,
    enabled,
    title,
    description,
    digits,
    onCode,
  }: ISecretViewProps) => JSX.Element;
  export default SecretView;
}

declare module "react-declarative/components/WizardView/WizardView" {
  import IWizardViewProps from "react-declarative/components/WizardView/model/IWizardViewProps";
  /**
   * WizardView component.
   *
   * @template Data - The type of data object passed to the WizardView.
   * @template Payload - The type of payload object passed to the WizardView.
   *
   * @param props - The props object.
   * @param props.className - The class name of the WizardView.
   * @param props.style - The inline styles of the WizardView.
   * @param props.sx - The sx prop for custom styling.
   * @param props.payload - The payload object for the WizardView.
   * @param props.outlinePaper - If true, the PaperView displays an outline.
   * @param props.transparentPaper - If true, the PaperView displays as transparent.
   * @param props.history - The history object for the WizardView.
   * @param props.pathname - The pathname for the WizardView.
   * @param props.steps - The steps array for the WizardView.
   * @param props.routes - The routes array for the WizardView.
   * @param props.onLoadStart - The function to be called when loading starts.
   * @param props.onLoadEnd - The function to be called when loading ends.
   * @param props.otherProps - The other props object for the WizardView.
   * @param outletProps - The outlet props object for the WizardView.
   *
   * @returns The rendered WizardView component.
   */
  export const WizardView: <Data extends {} = any, Payload = any>({
    className,
    style,
    sx,
    payload: upperPayload,
    outlinePaper,
    transparentPaper,
    history: upperHistory,
    pathname,
    steps: upperSteps,
    routes,
    onLoadStart,
    onLoadEnd,
    otherProps: upperOtherProps,
    ...outletProps
  }: IWizardViewProps<Data, Payload>) => JSX.Element;
  export default WizardView;
}

declare module "react-declarative/components/WizardView/components/WizardNavigation" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import { BoxProps } from "@mui/material/Box";
  interface IWizardNavigationProps extends BoxProps {
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    disabled?: boolean;
    AfterPrev?: React.ComponentType<any>;
    BeforeNext?: React.ComponentType<any>;
    fallback?: (e: Error) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    hasPrev?: boolean;
    hasNext?: boolean;
    labelPrev?: string;
    labelNext?: string;
    onPrev?: () => void | Promise<void>;
    onNext?: () => void | Promise<void>;
    throwError?: boolean;
  }
  export const WizardNavigation: ({
    className,
    style,
    sx,
    disabled,
    fallback,
    onLoadStart,
    onLoadEnd,
    onPrev,
    onNext,
    AfterPrev,
    BeforeNext,
    hasPrev,
    hasNext,
    labelPrev,
    labelNext,
    throwError,
    ...otherProps
  }: IWizardNavigationProps) => JSX.Element;
  export default WizardNavigation;
}

declare module "react-declarative/components/WizardView/components/WizardContainer" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import { BoxProps } from "@mui/material/Box";
  interface IWizardContainerProps extends BoxProps {
    ref?: React.Ref<HTMLDivElement | undefined>;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    Navigation?: React.ReactNode;
  }
  export const WizardContainer: React.FC<IWizardContainerProps>;
  export default WizardContainer;
}

declare module "react-declarative/components/WizardView/model/IWizardOutlet" {
  import IAnything from "react-declarative/model/IAnything";
  import ISize from "react-declarative/model/ISize";
  import { IOutlet } from "react-declarative/components/OutletView";
  import IWizardOutletProps from "react-declarative/components/WizardView/model/IWizardOutletProps";
  export type OtherProps = {
    size: ISize;
    loading: boolean;
    setLoading: (loading: boolean) => void;
    progress: number;
    setProgress: (progress: number) => void;
  };
  export interface IWizardOutlet<Data = IAnything, Payload = IAnything>
    extends Omit<
      IOutlet<Data, Payload>,
      keyof {
        element: never;
      }
    > {
    element: (props: IWizardOutletProps<Data, Payload>) => React.ReactElement;
  }
  export default IWizardOutlet;
}

declare module "react-declarative/components/WizardView/model/IWizardOutletProps" {
  import IAnything from "react-declarative/model/IAnything";
  import { IOutletProps } from "react-declarative/components/OutletView";
  import { OtherProps } from "react-declarative/components/WizardView/model/IWizardOutlet";
  export type IWizardOutletProps<
    Data = IAnything,
    Payload = IAnything,
    Props = {},
  > = IOutletProps<Data, Payload, Props> & OtherProps;
  export default IWizardOutletProps;
}

declare module "react-declarative/components/WizardView/model/IWizardStep" {
  import IAnything from "react-declarative/model/IAnything";
  export interface IWizardStep<Payload extends IAnything = IAnything> {
    id?: string;
    isMatch?: (id: string) => boolean;
    isVisible?: (payload: Payload) => boolean;
    label: string;
    icon?: React.ComponentType<any>;
  }
  export default IWizardStep;
}

declare module "react-declarative/components/WizardView/model/IWizardModal" {
  import IAnything from "react-declarative/model/IAnything";
  import IWizardOutlet from "react-declarative/components/WizardView/model/IWizardOutlet";
  import IWizardModalProps from "react-declarative/components/WizardView/model/IWizardModalProps";
  export type IWizardModal<Data = IAnything, Payload = IAnything> = Omit<
    IWizardOutlet<Data, Payload>,
    keyof {
      element: never;
    }
  > & {
    element: (props: IWizardModalProps<Data, Payload>) => React.ReactElement;
  };
  export default IWizardModal;
}

declare module "react-declarative/components/WizardView/model/IWizardModalProps" {
  import IAnything from "react-declarative/model/IAnything";
  import IWizardOutletProps from "react-declarative/components/WizardView/model/IWizardOutletProps";
  type ModalOtherProps = {
    onClose: () => void;
  };
  export type IWizardModalProps<
    Data = IAnything,
    Payload = IAnything,
  > = IWizardOutletProps<Data, Payload, ModalOtherProps> & ModalOtherProps;
  export default IWizardModalProps;
}

declare module "react-declarative/components/WizardView/hooks/useWizardModal" {
  import { IWizardModalProps } from "react-declarative/components/WizardView/components/WizardOutletModal";
  import IAnything from "react-declarative/model/IAnything";
  import History from "react-declarative/model/History";
  interface IParams<Data extends {} = Record<string, any>, Payload = IAnything>
    extends Omit<
      IWizardModalProps<Data, Payload>,
      keyof {
        openSubject: never;
        history: never;
        onSubmit: never;
        className: never;
      }
    > {
    onSubmit?: (
      data: Data | null,
      payload: Payload,
    ) => Promise<boolean> | boolean;
    fullScreen?: boolean;
    history?: History;
    pathname?: string;
  }
  /**
   * useWizardModal is a custom hook that provides a modal component for wizards.
   * It accepts various parameters and returns an object with functions and properties
   * related to the wizard modal.
   *
   * @param params - The parameters for the useWizardModal hook.
   * @param params.fallback - The fallback function to be called when an error occurs during rendering.
   * @param params.pathname - The pathname for the history object. Defaults to "/".
   * @param params.history - The history object. If not provided, a new memory history object will be created.
   * @param params.fullScreen - Determines whether the modal should be displayed in full screen. Defaults to true.
   * @param params.onLoadEnd - The function to be called when the wizard finishes loading.
   * @param params.onLoadStart - The function to be called when the wizard starts loading.
   * @param params.throwError - Determines whether an error should be thrown when an error occurs during submission. Defaults to false.
   * @param params.onChange - The function to be called when the wizard state changes.
   * @param params.onSubmit - The function to be called when the wizard is submitted. Defaults to a function that returns true.
   * @param params.onMount - The function to be called when the wizard component is mounted.
   * @param params.onUnmount - The function to be called when the wizard component is unmounted.
   * @param params.onClose - The function to be called when the modal is closed.
   * @param params.submitLabel - The label for the submit button.
   * @param params.title - The title of the wizard modal.
   * @param params.hidden - Determines whether the modal should be hidden. Defaults to false.
   * @param params.outletProps - Additional props to pass to the WizardOutletModal component.
   *
   * @returns - An object with functions and properties related to the wizard modal.
   * @returns return.open - A boolean value indicating whether the modal is open.
   * @returns return.render - A function that renders the wizard modal.
   * @returns return.pickData - A function that triggers the modal to open.
   * @returns return.close - A function that closes the modal and submits an empty payload.
   */
  export const useWizardModal: <
    Data extends {} = Record<string, any>,
    Payload = any,
  >({
    fallback,
    pathname,
    history: upperHistory,
    fullScreen,
    onLoadEnd,
    onLoadStart,
    throwError,
    onChange,
    onSubmit,
    onMount,
    onUnmount,
    onClose,
    submitLabel,
    title,
    hidden,
    ...outletProps
  }: IParams<Data, Payload>) => {
    readonly open: typeof open;
    readonly render: () => JSX.Element;
    readonly pickData: () => void;
    readonly close: () => Promise<boolean>;
  };
  export default useWizardModal;
}

declare module "react-declarative/components/PortalView/PortalView" {
  import * as React from "react";
  interface IPortalViewProps {
    children: React.ReactNode;
  }
  export class PortalView extends React.Component<IPortalViewProps> {
    element: HTMLDivElement | null;
    componentWillUnmount(): void;
    render(): React.ReactPortal;
  }
  export default PortalView;
}

declare module "react-declarative/components/ErrorView/ErrorView" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  interface IErrorViewProps {
    appName?: string;
    Logo?: React.ComponentType<any>;
    buttonLabel?: React.ReactNode;
    contentLabel?: React.ReactNode;
    onButtonClick?: () => void;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
  }
  /**
   * Represents an ErrorView component.
   *
   * @typedef ErrorView
   * @property appName - The name of the application to be displayed on the ErrorView.
   * @property Logo - The logo component to be displayed on the ErrorView.
   * @property [className] - The additional class name to be applied to the ErrorView container.
   * @property [style] - The custom CSS styles to be applied to the ErrorView container.
   * @property [sx] - The custom sx styles to be applied to the ErrorView container (used in Theme UI library).
   * @property [buttonLabel="Reload page"] - The label text for the button displayed on the ErrorView.
   * @property [contentLabel] - The content text to be displayed on the ErrorView.
   * @property [onButtonClick=handleReload] - The click event handler for the button displayed on the ErrorView.
   */
  export const ErrorView: ({
    appName,
    Logo,
    className,
    style,
    sx,
    buttonLabel,
    contentLabel,
    onButtonClick,
  }: IErrorViewProps) => JSX.Element;
  export default ErrorView;
}

declare module "react-declarative/components/AuthView/AuthView" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import { OneHandler } from "react-declarative/model/IOneProps";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  interface IAuthViewProps<
    Data extends IAnything = IAnything,
    Payload = IAnything,
    Field = IField<Data, Payload>,
  > {
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    appName?: string;
    fields?: Field[];
    handler?: OneHandler<Data, Payload>;
    Logo?: React.ComponentType<any>;
    onAuth?: (data: Data) => void | Promise<void>;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
    BeforeSubmit?: React.ComponentType<any>;
    AfterSubmit?: React.ComponentType<any>;
  }
  /**
   * Represents the authentication view component.
   *
   * @template Data - The type of data.
   * @template Payload - The type of payload.
   * @template Field - The type of field.
   *
   * @param props - The props object.
   * @param props.className - The class name for the component.
   * @param props.style - The inline styles for the component.
   * @param props.sx - The sx prop for the component.
   * @param props.appName - The name of the app.
   * @param props.Logo - The component for the logo.
   * @param props.fields - The array of input fields.
   * @param [props.onLoadStart] - The callback function when the loading starts.
   * @param [props.onLoadEnd] - The callback function when the loading ends.
   * @param [props.throwError] - A boolean indicating whether to throw an error.
   * @param [props.handler] - The handler function.
   * @param [props.fallback] - The fallback function.
   * @param [props.onAuth] - The callback function for authentication.
   * @param [props.BeforeSubmit] - The component to render before submitting the form.
   * @param [props.AfterSubmit] - The component to render after submitting the form.
   *
   * @returns The AuthView component.
   */
  export const AuthView: <
    Data extends unknown = any,
    Payload = any,
    Field = IField<Data, Payload>,
  >({
    className,
    style,
    sx,
    appName,
    Logo,
    fields,
    onLoadStart,
    onLoadEnd,
    throwError,
    handler,
    fallback,
    onAuth,
    BeforeSubmit,
    AfterSubmit,
  }: IAuthViewProps<Data, Payload, Field>) => JSX.Element;
  export default AuthView;
}

declare module "react-declarative/components/KanbanView/KanbanView" {
  import * as React from "react";
  import IKanbanViewProps from "react-declarative/components/KanbanView/model/IKanbanViewProps";
  /**
   * @template Data, Payload, ColumnType
   * @typedef IKanbanViewProps - Props for KanbanViewInternal component
   * @property reloadSubject - Subject that triggers data reload
   * @property withUpdateOrder - Determines whether items should be sorted by update date
   * @property columns - Array of columns with corresponding rows, label and color
   * @property className - CSS class name for the component
   * @property payload - Payload object for custom data
   * @property disabled - Determines whether the component is disabled
   * @property items - Array of kanban items
   * @property style - Inline styles for the component
   * @property sx - Material-UI system styles
   * @property deps - Array of dependencies
   * @property withGoBack - Determines whether to allow going back to previous columns when dragging an item
   * @property withHeaderTooltip - Determines whether to show tooltip on column headers
   * @property filterFn - Function to filter kanban items
   * @property cardLabel - Function to generate card label from item ID
   * @property bufferSize - The number of card items to render in the virtual view
   * @property minRowHeight - Minimum height of each row in the virtual view
   * @property rowTtl - Time-to-live in milliseconds for each row cache
   * @property AfterCardContent - Custom component to render after card content
   * @property AfterColumnTitle - Custom component to render after column title
   * @property BeforeColumnTitle - Custom component to render before column title
   * @property onDataRequest - Function called when data is requested
   * @property onChangeColumn - Function called when an item is dragged to a new column
   * @property onCardLabelClick - Function called when the card label is clicked
   * @property onLoadStart - Function called when data loading starts
   * @property onLoadEnd - Function called when data loading ends
   * @property fallback - Function or React node to render when an error occurs
   * @property throwError - Function called when an error occurs
   * @property ref - Ref object for the root element of the component
   */
  export const KanbanView: {
    <
      Data extends unknown = any,
      Payload extends unknown = any,
      ColumnType = any,
    >(
      {
        reloadSubject: upperReloadSubject,
        withUpdateOrder,
        columns: upperColumns,
        className,
        payload: upperPayload,
        disabled,
        items,
        style,
        sx,
        deps,
        withGoBack,
        withHeaderTooltip,
        filterFn,
        cardLabel,
        bufferSize,
        minRowHeight,
        rowTtl,
        AfterCardContent,
        AfterColumnTitle,
        BeforeColumnTitle,
        onDataRequest,
        onChangeColumn,
        onCardLabelClick,
        onLoadStart,
        onLoadEnd,
        fallback,
        throwError,
      }: IKanbanViewProps<Data, Payload, ColumnType>,
      ref: React.Ref<HTMLDivElement>,
    ): JSX.Element;
    /**
     * @example useEffect(KanbanViewInternal.enableScrollOnDrag(ref), [])
     */
    enableScrollOnDrag(
      ref: React.MutableRefObject<HTMLDivElement | undefined>,
      {
        threshold,
        speed,
      }?: {
        threshold?: number | undefined;
        speed?: number | undefined;
      },
    ): () => import("../../utils/compose").Function;
  };
  export default KanbanView;
}

declare module "react-declarative/components/KanbanView/model/IBoard" {
  import IAnything from "react-declarative/model/IAnything";
  import IBoardColumn from "react-declarative/components/KanbanView/model/IBoardColumn";
  export interface IBoard<
    Data = IAnything,
    Payload = IAnything,
    ColumnType = IAnything,
  > {
    id: string;
    label: React.ReactNode;
    columns: IBoardColumn<Data, Payload, ColumnType>[];
  }
  export default IBoard;
}

declare module "react-declarative/components/KanbanView/model/IBoardColumn" {
  import IAnything from "react-declarative/model/IAnything";
  import IBoardRow from "react-declarative/components/KanbanView/model/IBoardRow";
  export interface IBoardColumn<
    Data = IAnything,
    Payload = IAnything,
    ColumnType = IAnything,
  > {
    column: ColumnType;
    color?: string;
    label?: string;
    rows: IBoardRow<Data, Payload>[];
  }
  export default IBoardColumn;
}

declare module "react-declarative/components/KanbanView/model/IBoardItem" {
  import IAnything from "react-declarative/model/IAnything";
  export interface IBoardItem<
    Data = IAnything,
    Payload = IAnything,
    ColumnType = IAnything,
  > {
    id: string;
    label?:
      | React.ReactNode
      | ((
          id: string,
          data: Data,
          payload: Payload,
        ) => React.ReactNode | Promise<React.ReactNode>);
    column: ColumnType;
    data: Data;
    updatedAt?: string;
  }
  export default IBoardItem;
}

declare module "react-declarative/components/KanbanView/model/IBoardRow" {
  import IAnything from "react-declarative/model/IAnything";
  export interface IBoardRow<Data = IAnything, Payload = IAnything> {
    label: React.ReactNode;
    value: (
      id: string,
      data: Data,
      payload: Payload,
    ) => React.ReactNode | Promise<React.ReactNode>;
    visible?:
      | boolean
      | ((
          id: string,
          data: Data,
          payload: Payload,
        ) => boolean | Promise<boolean>);
    click?: (id: string, data: Data, payload: Payload) => void | Promise<void>;
  }
  export default IBoardRow;
}

declare module "react-declarative/components/ReloadView/ReloadView" {
  import * as React from "react";
  import TSubject from "react-declarative/model/TSubject";
  interface IReloadViewProps {
    reloadTrigger: TSubject<any>;
    children?: React.ReactNode;
  }
  export class ReloadView extends React.Component<IReloadViewProps> {
    _disconnectListener: (() => void) | undefined;
    doSubscribe: () => void;
    componentDidMount: () => void;
    componentDidUpdate: () => void;
    componentWillUnmount: () => void;
    render: () => JSX.Element;
  }
  export default ReloadView;
}

declare module "react-declarative/components/InfiniteView/InfiniteView" {
  import * as React from "react";
  import { BoxProps } from "@mui/material/Box";
  import { SxProps } from "@mui/material";
  import TSubject from "react-declarative/model/TSubject";
  interface IInfiniteViewProps extends BoxProps {
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    children?: React.ReactNode;
    hasMore?: boolean;
    loading?: boolean;
    scrollXSubject?: TSubject<number>;
    scrollYSubject?: TSubject<number>;
    onDataRequest?: (initial: boolean) => Promise<void> | void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
  }
  /**
   * InfiniteView component
   * @param props - Component props
   * @param props.className - Custom CSS class name
   * @param props.style - Custom inline styles
   * @param props.sx - SX prop from theme-ui
   * @param [props.loading=false] - Loading state of the component
   * @param [props.throwError=false] - Whether or not to throw errors
   * @param [props.hasMore=true] - Whether there is more data to load
   * @param props.children - Child components to render
   * @param props.scrollXSubject - Subject for horizontal scroll position
   * @param props.scrollYSubject - Subject for vertical scroll position
   * @param props.onDataRequest - Callback function to request data
   * @param props.onLoadStart - Callback function called when data loading starts
   * @param props.onLoadEnd - Callback function called when data loading ends
   * @param props.fallback - Fallback component to render in case of error
   * @returns Rendered component
   */
  export const InfiniteView: ({
    className,
    style,
    sx,
    loading: upperLoading,
    throwError,
    hasMore,
    children: upperChildren,
    scrollXSubject: upperScrollXSubject,
    scrollYSubject: upperScrollYSubject,
    onDataRequest,
    onLoadStart,
    onLoadEnd,
    fallback,
    ...otherProps
  }: IInfiniteViewProps) => JSX.Element;
  export default InfiniteView;
}

declare module "react-declarative/components/VirtualView/VirtualView" {
  import * as React from "react";
  import { BoxProps } from "@mui/material/Box";
  import { TSubject } from "react-declarative/utils/rx/Subject";
  export const ROOT_ELEMENT = "virtual-view-root";
  export const CHILD_ELEMENT = "virtual-view-child";
  export interface IVirtualViewProps
    extends Omit<
      BoxProps,
      keyof {
        ref: never;
      }
    > {
    withScrollbar?: boolean;
    loading?: boolean;
    hasMore?: boolean;
    minRowHeight?: number;
    bufferSize?: number;
    children: React.ReactNode;
    scrollXSubject?: TSubject<number>;
    scrollYSubject?: TSubject<number>;
    onDataRequest?: (initial: boolean) => Promise<void> | void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
  }
  /**
   * VirtualView component
   *
   * @typedef IVirtualViewProps - virtual view props
   * @property className - CSS class name
   * @property sx - custom styles
   * @property withScrollbar - flag indicating if scrollbar is visible
   * @property minRowHeight - minimum row height (default: DEFAULT_MIN_HEIGHT)
   * @property bufferSize - number of additional rows to render (default: DEFAULT_BUFFER_SIZE)
   * @property children - child elements
   * @property hasMore - flag indicating if there is more data to load (default: true)
   * @property loading - flag indicating if data is currently being loaded (default: false)
   * @property onDataRequest - function to request more data
   * @property onLoadStart - function called when data loading starts
   * @property onLoadEnd - function called when data loading ends
   * @property fallback - function called when an error occurs during data loading
   * @property scrollXSubject - scroll x subject
   * @property scrollYSubject - scroll y subject
   * @property throwError - flag indicating if errors should be thrown (default: false)
   * @property otherProps - other props
   */
  export const VirtualView: ({
    className,
    sx,
    withScrollbar,
    minRowHeight,
    bufferSize: upperBufferSize,
    children: upperChildren,
    hasMore,
    loading: upperLoading,
    onDataRequest,
    onLoadStart,
    onLoadEnd,
    fallback,
    scrollXSubject: upperScrollXSubject,
    scrollYSubject: upperScrollYSubject,
    throwError,
    ...otherProps
  }: IVirtualViewProps) => JSX.Element;
  export default VirtualView;
}

declare module "react-declarative/components/LoaderView/LoaderView" {
  import { BoxProps } from "@mui/material/Box";
  interface ILoaderViewProps
    extends Omit<
      BoxProps,
      keyof {
        children: never;
      }
    > {
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    handler?: () => Promise<void> | void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
    size?: number | string;
  }
  /**
   * Represents a loader view component.
   *
   * @param ILoaderViewProps - The props for the LoaderView component.
   * @param ILoaderViewProps.className - The class name for the component.
   * @param ILoaderViewProps.onLoadStart - The callback function to be called when loading starts.
   * @param ILoaderViewProps.onLoadEnd - The callback function to be called when loading ends.
   * @param ILoaderViewProps.handler - The asynchronous function to handle the loading logic.
   * @param ILoaderViewProps.fallback - The fallback function to handle errors in loading.
   * @param ILoaderViewProps.throwError - Indicates if the error should be thrown or handled by the fallback function.
   * @param ILoaderViewProps.size - The size of the circular progress spinner.
   * @param ILoaderViewProps.sx - Custom styling for the component.
   * @param otherProps - Any additional props to be passed to the component.
   *
   * @returns The rendered LoaderView component.
   */
  export const LoaderView: {
    ({
      className,
      onLoadStart,
      onLoadEnd,
      handler,
      fallback,
      throwError,
      size,
      sx,
      ...otherProps
    }: ILoaderViewProps): JSX.Element;
    createLoader(size: number): () => JSX.Element;
  };
  export default LoaderView;
}

declare module "react-declarative/components/DocumentView/DocumentView" {
  import * as React from "react";
  import { BoxProps } from "@mui/material/Box";
  import { IActionMenuProps } from "react-declarative/components/ActionMenu";
  interface IDocumentViewProps<T extends any = object>
    extends BoxProps,
      Omit<
        IActionMenuProps<T>,
        keyof {
          className: never;
          style: never;
          sx: never;
          transparent: never;
          onToggle: never;
        }
      > {
    withFullScreen?: boolean;
    withDelete?: boolean;
    className?: string;
    style?: React.CSSProperties;
    src: string;
    onFullScreenClick?: () => Promise<void> | void;
    onDeleteClick?: () => Promise<void> | void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
  }
  /**
   * Renders a document view component with optional full screen and delete functionality.
   *
   * @param withFullScreen - Determines if the full screen functionality is enabled. Default: false.
   * @param withDelete - Determines if the delete functionality is enabled. Default: false.
   * @param className - Additional CSS class name(s) for the root element.
   * @param style - Additional inline styles for the root element.
   * @param src - The source URL for the document.
   * @param onFullScreenClick - The callback function when the full screen button is clicked. Default: openBlank(src).
   * @param onDeleteClick - The callback function when the delete button is clicked. Default: () => undefined.
   * @param onLoadStart - The callback function when the document starts loading.
   * @param onLoadEnd - The callback function when the document finishes loading.
   * @param fallback - The fallback element to render if the document is not supported.
   * @param throwError - Determines if an error should be thrown if the document is not supported. Default: false.
   * @param disabled - Determines if the component is disabled. Default: false.
   * @param options - The action menu options to display.
   * @param onAction - The callback function when an action is selected from the action menu. Default: () => undefined.
   * @param payload - Additional payload data for the callback functions.
   * @param deps - Dependency array for the callback functions of the action menu.
   * @param keepMounted - Determines if the action menu should stay mounted when closed. Default: false.
   * @param BeforeContent - The content to display before the action menu.
   * @param AfterContent - The content to display after the action menu.
   * @param otherProps - Other additional props for the root element.
   * @returns The rendered document view component.
   */
  export const DocumentView: ({
    withFullScreen,
    withDelete,
    className,
    style,
    src,
    onFullScreenClick,
    onDeleteClick,
    onLoadStart,
    onLoadEnd,
    fallback,
    throwError,
    disabled,
    options,
    onAction,
    payload,
    deps,
    keepMounted,
    BeforeContent,
    AfterContent,
    ...otherProps
  }: IDocumentViewProps) => JSX.Element;
  export default DocumentView;
}

declare module "react-declarative/components/ImageView/ImageView" {
  import { BoxProps } from "@mui/material/Box";
  import { IActionMenuProps } from "react-declarative/components/ActionMenu";
  interface IImageViewProps<T extends any = object>
    extends BoxProps,
      Omit<
        IActionMenuProps<T>,
        keyof {
          className: never;
          style: never;
          sx: never;
          transparent: never;
          onToggle: never;
        }
      > {
    withFullScreen?: boolean;
    withDelete?: boolean;
    src: string;
    onFullScreenClick?: () => Promise<void> | void;
    onDeleteClick?: () => Promise<void> | void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
  }
  /**
   * @typedef IImageViewProps
   * @property [withFullScreen=false] - Indicates whether the ImageView should have a full-screen option.
   * @property [withDelete=false] - Indicates whether the ImageView should have a delete option.
   * @property [className] - Additional class name for the ImageView component.
   * @property src - The source URL of the image to be displayed.
   * @property [onFullScreenClick] - Event handler for the full-screen click action. Defaults to opening a blank page with the source URL of the image.
   * @property [onDeleteClick] - Event handler for the delete click action. Defaults to an empty function.
   * @property [onLoadStart] - Event handler for the image loading start event.
   * @property [onLoadEnd] - Event handler for the image loading end event.
   * @property [fallback] - Custom fallback component to be displayed when the image fails to load.
   * @property [throwError=false] - Indicates whether an error should be thrown when the image fails to load.
   * @property [disabled=false] - Indicates whether the ImageView is disabled.
   * @property [options] - Array of options for the action menu.
   * @property [onAction] - Event handler for the action menu click action. Defaults to an empty function.
   * @property [payload] - Additional payload to be passed to the action menu click handler.
   * @property [deps] - Additional dependencies for the action menu.
   * @property [keepMounted] - Indicates whether the action menu should remain mounted when closed.
   * @property [BeforeContent] - Custom component to be displayed before the image content.
   * @property [AfterContent] - Custom component to be displayed after the image content.
   * @property [...otherProps] - Additional props to be spread onto the Box component.
   */
  export const ImageView: ({
    withFullScreen,
    withDelete,
    className,
    src,
    onFullScreenClick,
    onDeleteClick,
    onLoadStart,
    onLoadEnd,
    fallback,
    throwError,
    disabled,
    options,
    onAction,
    payload,
    deps,
    keepMounted,
    BeforeContent,
    AfterContent,
    ...otherProps
  }: IImageViewProps) => JSX.Element;
  export default ImageView;
}

declare module "react-declarative/components/TreeView/TreeView" {
  import { TextFieldProps } from "@mui/material/TextField";
  import INode from "react-declarative/components/TreeView/model/INode";
  type ITreeViewProps = {
    value?: string[] | null;
    readOnly?: boolean;
    loading?: boolean;
    items: INode[];
    onChange?: (value: string[] | null) => void;
  } & Omit<
    TextFieldProps,
    keyof {
      onChange: never;
    }
  >;
  /**
   * Represents a TreeView component.
   *
   * @param className - The class name of the component.
   * @param style - The style object of the component.
   * @param sx - The sx object of the component.
   * @param loading - Indicates whether the component is in a loading state.
   * @param items - The items to be displayed in the TreeView.
   * @param value - The selected values in the TreeView.
   * @param onChange - The function to be called when the value of the TreeView changes.
   * @param textFieldProps - Additional props to be passed to the underlying TextField component.
   */
  export const TreeView: ({
    className,
    style,
    sx,
    loading,
    items: upperItems,
    value: upperValue,
    onChange,
    ...textFieldProps
  }: ITreeViewProps) => JSX.Element;
  export default TreeView;
}

declare module "react-declarative/components/GridView/GridView" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import { ICardProps } from "react-declarative/components/GridView/components/Card";
  import { IGridProps, RowData } from "react-declarative/components/Grid";
  import { ITileProps } from "react-declarative/components/Tile";
  import IAnything from "react-declarative/model/IAnything";
  interface IGridViewProps<T = RowData, P = IAnything>
    extends IGridProps<T, P> {
    className?: string;
    style?: React.CSSProperties;
    outlinePaper?: boolean;
    transparentPaper?: boolean;
    sx?: SxProps<any>;
    label?: ICardProps["label"];
    mobileItem?: ITileProps<T>["children"];
    BeforeLabel?: ICardProps["BeforeLabel"];
    AfterLabel?: ICardProps["AfterLabel"];
  }
  /**
   * Represents a GridView component.
   *
   * @template T - The type of RowData.
   * @template P - The type of IAnything.
   *
   * @param props - The component props.
   * @returns - The GridView component.
   */
  export const GridView: <T extends unknown = any, P extends unknown = any>({
    className,
    style,
    sx,
    label,
    BeforeLabel,
    AfterLabel,
    payload: upperPayload,
    mobileItem: MobileItem,
    outlinePaper,
    transparentPaper,
    loading,
    ...otherProps
  }: IGridViewProps<T, P>) => JSX.Element;
  export default GridView;
}

declare module "react-declarative/components/Grid/Grid" {
  import IGridProps from "react-declarative/components/Grid/model/IGridProps";
  /**
   * Represents a grid component with customizable features.
   * @template T - The type of row data in the grid.
   * @param props - The properties for the grid.
   * @returns - The grid component.
   */
  export const Grid: <T extends unknown>(
    props: IGridProps<T, any>,
  ) => JSX.Element;
  export default Grid;
}

declare module "react-declarative/components/Grid/api/useOffsetPaginator" {
  import TSubject from "react-declarative/model/TSubject";
  import RowData from "react-declarative/components/Grid/model/RowData";
  interface IParams<Data = RowData> {
    reloadSubject?: TSubject<void>;
    initialData?: Data[];
    handler: (
      limit: number,
      offset: number,
      initial: boolean,
      currentRows: Data[],
    ) => Data[] | Promise<Data[]>;
    limit?: number;
    delay?: number;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (error: Error) => void;
    throwError?: boolean;
  }
  /**
   * Implements an offset-based pagination logic for fetching and managing data.
   *
   * @template Data - The type of the data to be paginated, extending RowData.
   *
   * @param params - The parameters for configuring the pagination logic.
   * @param params.reloadSubject - The reload subject used to trigger a data reload.
   * @param params.initialData - The initial data to be displayed.
   * @param params.handler - The function for fetching more data.
   * @param params.limit - The maximum number of items to be fetched per request.
   * @param params.delay - The delay (in milliseconds) between requests.
   * @param queryProps - Additional query properties to be passed to the handler function.
   *
   * @returns - An object containing the paginated data and various utility functions.
   * @returns data - The paginated data.
   * @returns setData - A function to update the paginated data.
   * @returns offset - The offset of the current page.
   * @returns hasMore - A flag indicating if there are more items to load.
   * @returns loading - A flag indicating if a request is currently loading.
   * @returns error - The error object, if an error occurred during the request.
   * @returns onSkip - A function to skip to the next page.
   * @returns reloadSubject - The reload subject used to trigger a data reload.
   * @returns clear - A function to clear the paginated data and reset the pagination state.
   */
  export const useOffsetPaginator: <Data extends unknown = any>({
    reloadSubject: upperReloadSubject,
    initialData: upperInitialData,
    handler,
    limit,
    delay,
    ...queryProps
  }: IParams<Data>) => {
    data: Data[];
    setData: (data: Data[] | ((prevData: Data[]) => Data[])) => void;
    offset: number;
    hasMore: boolean;
    loading: boolean;
    error: boolean;
    onSkip: import("../../../hooks/useSinglerunAction").IExecute<void, boolean>;
    reloadSubject: import("../../..").Subject<void>;
    clear: () => void;
  };
  export default useOffsetPaginator;
}

declare module "react-declarative/components/Grid/api/useCursorPaginator" {
  import TSubject from "react-declarative/model/TSubject";
  import RowData from "react-declarative/components/Grid/model/RowData";
  interface IParams<Data = RowData> {
    reloadSubject?: TSubject<void>;
    initialData?: Data[];
    handler: (
      cursor: string | null,
      initial: boolean,
      limit: number,
      currentRows: Data[],
    ) => Data[] | Promise<Data[]>;
    limit?: number;
    delay?: number;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (error: Error) => void;
    throwError?: boolean;
  }
  /**
   * A function that handles pagination using cursor-based pagination technique.
   *
   * @template Data The type of data in each row.
   * @param params - The input parameters.
   * @param params.reloadSubject - The reload subject used to trigger a reload.
   * @param [params.initialData=[]] - The initial data for the paginator.
   * @param params.handler - The handler function for fetching more data.
   * @param [params.delay=SCROLL_REQUEST_DELAY] - The delay between each scroll request.
   * @param [params.limit=DEFAULT_LIMIT] - The maximum number of rows to fetch at a time.
   * @param queryProps - Additional properties to be passed to the query.
   * @returns - An object containing the paginator data and functions.
   */
  export const useCursorPaginator: <Data extends unknown = any>({
    reloadSubject: upperReloadSubject,
    initialData: upperInitialData,
    handler,
    delay,
    limit,
    ...queryProps
  }: IParams<Data>) => {
    data: Data[];
    setData: (data: Data[] | ((prevData: Data[]) => Data[])) => void;
    hasMore: boolean;
    lastCursor: any;
    loading: boolean;
    error: boolean;
    onSkip: import("../../../hooks/useSinglerunAction").IExecute<void, boolean>;
    reloadSubject: import("../../..").Subject<void>;
  };
  export default useCursorPaginator;
}

declare module "react-declarative/components/Grid/api/useGridAction" {
  import IAnything from "react-declarative/model/IAnything";
  interface IParams<Data extends IAnything = IAnything> {
    fetchRow: (id: string) => Data | Promise<Data>;
    onAction?: (
      action: string,
      rows: Data[],
      deselectAll: () => void,
    ) => Promise<void> | void;
    onRowAction?: (
      action: string,
      row: Data,
      deselectAll: () => void,
    ) => Promise<void> | void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
    fallback?: (e: Error) => void;
  }
  /**
   * Executes grid actions and row actions.
   *
   * @template Data - The type of data in the grid rows.
   * @param Object - The parameters for the useGridAction function.
   * @param Object.onLoadStart - A callback function executed when a grid action or row action is started.
   * @param Object.onLoadEnd - A callback function executed when a grid action or row action is completed or failed.
   * @param Object.throwError - A flag indicating whether to throw an error if a grid action or row action fails.
   * @param Object.fallback - A flag indicating whether to use a fallback solution if a grid action or row action fails.
   * @param Object.fetchRow - A function that fetches a row.
   * @param Object.onAction - A callback function executed when a grid action is performed. This function receives the action name, the rows to perform the action on, and a
   * deselectAll function to deselect all rows.
   * @param Object.onRowAction - A callback function executed when a row action is performed. This function receives the action name, the row to perform the action on, and a
   * deselectAll function to deselect all rows.
   * @returns An object containing the following properties:
   *   - deselectAll - A function that deselects all rows in the grid.
   *   - selectedRows - An array of selected rows in the grid.
   *   - gridProps - The grid properties.
   *   - commitAction - A function that commits a grid action. This function receives the action name and calls the onAction callback function with the selected rows.
   *   - commitRowAction - A function that commits a row action. This function receives the action name and the row and calls the onRowAction callback function.
   */
  export const useGridAction: <Data extends unknown = any>({
    onLoadStart,
    onLoadEnd,
    throwError,
    fallback,
    fetchRow,
    onAction,
    onRowAction,
  }: IParams<Data>) => {
    readonly deselectAll: () => void;
    readonly selectedRows: string[];
    readonly gridProps: {
      readonly selectedRows: string[];
      readonly onSelectedRows: (rowIds: string[]) => void;
    };
    readonly commitAction: (p?: string | undefined) => Promise<void | null>;
    readonly commitRowAction: (
      action: string,
      row: Data,
    ) => Promise<void | null>;
  };
  export default useGridAction;
}

declare module "react-declarative/components/Grid/api/useGridSelection" {
  /**
   * Hook for managing grid selection.
   *
   * @returns - An object containing the following properties:
   *  - selectedRows: Array of selected row IDs.
   *  - gridProps: Object with properties for grid selection:
   *    - selectedRows: Array of selected row IDs.
   *    - onSelectedRows: Function to handle selected row IDs.
   *  - deselectAll: Function to clear all selected rows.
   */
  export const useGridSelection: () => {
    readonly selectedRows: string[];
    readonly gridProps: {
      readonly selectedRows: string[];
      readonly onSelectedRows: (rowIds: string[]) => void;
    };
    readonly deselectAll: () => void;
  };
  export default useGridSelection;
}

declare module "react-declarative/components/Grid/model/IGridProps" {
  import React from "react";
  import { SxProps } from "@mui/material";
  import IColumn from "react-declarative/components/Grid/model/IColumn";
  import RowData from "react-declarative/components/Grid/model/RowData";
  import IGridAction from "react-declarative/components/Grid/model/IGridAction";
  import IAnything from "react-declarative/model/IAnything";
  import TSort from "react-declarative/components/Grid/model/TSort";
  import { IVirtualViewProps } from "react-declarative/components/VirtualView";
  import { TSubject } from "react-declarative/utils/rx/Subject";
  import SelectionMode from "react-declarative/model/SelectionMode";
  export interface IGridProps<T = RowData, P = IAnything> {
    outlinePaper?: boolean;
    transparentPaper?: boolean;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    header?: React.ReactNode;
    data: Array<T>;
    columns: Array<IColumn<T>>;
    scrollXSubject?: TSubject<number>;
    scrollYSubject?: TSubject<number>;
    onTableRowClick?: (evt: React.MouseEvent, row: T) => void;
    onRowClick?: (row: T) => void;
    rowActions?: Array<IGridAction<T>>;
    payload?: P | (() => P);
    onRowAction?: (action: string, row: T) => void;
    recomputeSubject?: TSubject<void>;
    loading?: boolean;
    hasMore?: boolean;
    rowMark?: ((row: RowData) => string) | ((row: RowData) => Promise<string>);
    rowColor?: (row: RowData) => string;
    onSkip?: (initial: boolean) => void;
    onButtonSkip?: () => void;
    rowKey?: keyof T;
    sort?: TSort<T>;
    errorMessage?: string | null;
    selectionMode?: SelectionMode;
    onClickHeaderColumn?: (value: keyof T) => void;
    onSelectedRows?: (rowIds: string[], initialChange: boolean) => void;
    selectedRows?: string[];
    minRowHeight?: IVirtualViewProps["minRowHeight"];
    bufferSize?: IVirtualViewProps["bufferSize"];
  }
  export default IGridProps;
}

declare module "react-declarative/components/Grid/model/RowData" {
  export type RowData = any;
  export default RowData;
}

declare module "react-declarative/components/Grid/model/IColumn" {
  import Dimension from "react-declarative/components/Grid/model/Dimension";
  import RowData from "react-declarative/components/Grid/model/RowData";
  export interface IColumn<T = RowData> {
    field?: keyof T;
    label: string;
    align?: "center" | "left" | "right" | "stretch";
    format?: (row: T) => React.ReactElement | string;
    minWidth?: number;
    width?: Dimension | ((containerWidth: number) => Dimension);
  }
  export default IColumn;
}

declare module "react-declarative/components/Grid/model/IGridAction" {
  import { IActionMenuProps } from "react-declarative/components/ActionMenu";
  import IOption from "react-declarative/model/IOption";
  export interface IGridAction<T>
    extends Omit<
      IOption,
      keyof {
        isVisible: never;
        isDisabled: never;
      }
    > {
    isVisible?: (
      row: T,
      payload: IActionMenuProps["payload"],
    ) => boolean | Promise<boolean>;
    isDisabled?: (
      row: T,
      payload: IActionMenuProps["payload"],
    ) => boolean | Promise<boolean>;
  }
  export default IGridAction;
}

declare module "react-declarative/components/Grid/model/TSort" {
  import { IColumn } from "react-declarative/components/Grid/model/IColumn";
  export type TSort<T> = {
    sortDirection: "ASC" | "DESC";
    value: IColumn<T>["field"];
  };
  export default TSort;
}

declare module "react-declarative/components/Tile/Tile" {
  import ITileProps from "react-declarative/components/Tile/model/ITileProps";
  /**
   * Tile component for displaying a list of items in a virtual view.
   *
   * @template Data - The type of data in each tile item.
   * @template Payload - The type of additional payload data.
   * @param props - The props for the Tile component.
   * @param [props.className] - The CSS class name for the Tile component.
   * @param [props.style] - The inline style for the Tile component.
   * @param [props.sx] - The sx prop for the Tile component (System UI).
   * @param props.data - The array of data items to be rendered.
   * @param props.loading - Indicates if the tile list is currently loading data.
   * @param props.hasMore - Indicates if there are more items to load.
   * @param [props.bufferSize=10] - The number of items to render outside the visible area.
   * @param [props.minRowHeight=48] - The minimum height of each row item.
   * @param [props.payload={}] - Additional payload data to be passed to the TileItem component.
   * @param [props.rowColor=() => 'inherit'] - A function that returns the background color for each row item.
   * @param [props.rowKey="id"] - The key to use for identifying each row item.
   * @param [props.errorMessage] - The error message to display if there was an error loading data.
   * @param [props.children] - The child elements to be rendered within each TileItem component.
   * @param [props.onSkip] - A callback function to handle skipping to the next page of data.
   * @param [props.onButtonSkip] - A callback function to handle skipping to the next page of data when a button is clicked.
   * @param [props.onItemClick] - A callback function to handle when a row item is clicked.
   * @param [props.onSelectedRows] - A callback function to handle when a row item is selected.
   * @param [props.selectedRows] - The array of data items that are currently selected.
   * @param [props.selectionMode] - The selection mode for the Tile component (e.g., "single", "multiple").
   * @param [props.recomputeSubject] - The subject(s) to trigger recomputation of row heights.
   * @param [props.rowMark] - The key to use for identifying each row mark.
   * @returns The Tile component.
   */
  export const Tile: <Data extends unknown = any, Payload = any>({
    className,
    style,
    sx,
    data,
    loading,
    hasMore,
    bufferSize,
    minRowHeight,
    payload: upperPayload,
    rowColor,
    rowKey,
    errorMessage,
    children,
    onSkip,
    onButtonSkip,
    onItemClick,
    onSelectedRows,
    selectedRows,
    selectionMode,
    recomputeSubject,
    rowMark,
  }: ITileProps<Data, Payload>) => JSX.Element;
  export default Tile;
}

declare module "react-declarative/components/Tile/model/ITile" {
  import IAnything from "react-declarative/model/IAnything";
  export interface ITile<Data = IAnything, Payload = IAnything> {
    data: Data;
    payload: Payload;
    isSelected: boolean;
    rowMark: string;
    toggleSelection: () => void;
  }
  export default ITile;
}

declare module "react-declarative/components/Tile/model/ITileProps" {
  import { SxProps } from "@mui/material";
  import IAnything from "react-declarative/model/IAnything";
  import SelectionMode from "react-declarative/model/SelectionMode";
  import TSubject from "react-declarative/model/TSubject";
  import ITile from "react-declarative/components/Tile/model/ITile";
  export interface ITileProps<Data = IAnything, Payload = IAnything> {
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    loading?: boolean;
    hasMore?: boolean;
    errorMessage?: string | null;
    bufferSize?: number;
    minRowHeight?: number;
    children: React.ComponentType<ITile<Data, Payload>>;
    rowKey?: string | number | symbol;
    payload?: Payload | (() => Payload);
    data: Data[];
    onSkip?: (initial: boolean) => void;
    onButtonSkip?: () => void;
    onItemClick?: (item: { data: Data; payload: Payload }) => void;
    selectionMode?: SelectionMode;
    recomputeSubject?: TSubject<void>;
    rowMark?: ((row: Data) => string) | ((row: Data) => Promise<string>);
    rowColor?: (row: Data) => string;
    onSelectedRows?: (rowIds: string[], initialChange: boolean) => void;
    selectedRows?: string[];
  }
  export default ITileProps;
}

declare module "react-declarative/components/Spinner/Spinner" {
  import { BoxProps } from "@mui/material/Box";
  interface ISpinnerProps
    extends Omit<
      BoxProps,
      keyof {
        children: never;
      }
    > {}
  /**
   * Represents a spinner component that displays a loading animation.
   * @component
   *
   * @param props - The props object for the spinner component.
   * @param props.className - The custom CSS class name for the spinner component.
   * @param props.otherProps - The additional props to be spread on the root Box element.
   *
   * @returns The spinner component.
   */
  export const Spinner: ({
    className,
    ...otherProps
  }: ISpinnerProps) => JSX.Element;
  export default Spinner;
}

declare module "react-declarative/components/Copy/Copy" {
  import * as React from "react";
  import { BoxProps } from "@mui/material/Box";
  interface ICopyProps extends BoxProps {
    fullWidth?: boolean;
    transparent?: boolean;
    content: string;
    children?: React.ReactNode;
    onCopy?: () => void;
    onCopyClick?: () => void;
    fallback?: (e: Error) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
  }
  /**
   * Copy Component
   * @param className - Additional class name for the root element.
   * @param content - The text content to be copied.
   * @param fullWidth - If true, the component spans the full width of its container.
   * @param transparent - If true, the button appears without a border.
   * @param children - The content of the component.
   * @param onCopy - Callback function to be called when copying is triggered.
   * @param onCopyClick - Callback function to be called when the copy button is clicked.
   * @param onLoadStart - Callback function to be called when copying starts.
   * @param onLoadEnd - Callback function to be called when copying ends.
   * @param fallback - Callback function to be called when an error occurs during copying.
   * @param throwError - If true, an error during copying will cause an exception to be thrown.
   * @param otherProps - Additional props to be spread to the root element.
   * @returns
   */
  export const Copy: ({
    className,
    content,
    fullWidth,
    transparent,
    children,
    onCopy,
    onCopyClick,
    onLoadStart,
    onLoadEnd,
    fallback,
    throwError,
    ...otherProps
  }: ICopyProps) => JSX.Element;
  export default Copy;
}

declare module "react-declarative/components/If/If" {
  import * as React from "react";
  export interface IIfProps<T extends any = object> {
    Else?: React.ReactNode;
    Loading?: React.ReactNode;
    condition: boolean | ((payload: T) => boolean | Promise<boolean>);
    children: React.ReactNode;
    fallback?: (e: Error) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    payload?: T;
    deps?: any[];
    throwError?: boolean;
  }
  /**
   * A conditional rendering component with asynchronous support.
   *
   * @template T - The type of payload passed to the condition.
   * @param props - The props object.
   * @param props.Else - The content to render if the condition is false and not loading.
   * @param [props.Loading=props.Else] - The content to render while loading.
   * @param props.children - The content to render if the condition is true.
   * @param props.condition - The condition to evaluate. Can be a function that accepts the payload or a static value.
   * @param [props.fallback] - The function to call if an error occurs and `throwError` is false.
   * @param [props.onLoadStart] - The function to call when loading starts.
   * @param [props.onLoadEnd] - The function to call when loading ends. Receives a boolean indicating if the operation was successful.
   * @param [props.payload] - The payload to pass to the condition function.
   * @param [props.deps=[]] - The dependencies to include in the useEffect hook.
   * @param [props.throwError=false] - Whether to throw an error or call the fallback function if an error occurs.
   * @returns - The rendered content based on the condition and loading state.
   */
  export const If: <T extends unknown = object>({
    Else,
    Loading,
    children,
    condition,
    fallback,
    onLoadStart,
    onLoadEnd,
    payload,
    deps,
    throwError,
  }: IIfProps<T>) => JSX.Element;
  export default If;
}

declare module "react-declarative/components/CopyButton/CopyButton" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  interface ICopyButtonProps {
    disabled?: boolean;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    delay?: number;
    onClick?: (
      e: React.MouseEvent<HTMLButtonElement>,
      doCopy: () => void,
    ) => void;
    startIcon?: React.ReactNode;
    variant?: "text" | "outlined" | "contained";
    size?: "small" | "medium" | "large";
    color?:
      | "inherit"
      | "primary"
      | "secondary"
      | "success"
      | "error"
      | "info"
      | "warning";
    content: string | number;
    label?: string | number;
  }
  /**
   * Represents a copy button component.
   *
   * @typedef ICopyButtonProps
   * @property disabled - Determines if the button is disabled.
   * @property className - The class name for the button.
   * @property style - The inline style for the button.
   * @property sx - The custom style for the button using the sx prop from the Material-UI theme.
   * @property onClick - The click event handler for the button.
   * @property delay - The delay before the tooltip closes.
   * @property variant - The variant type of the button.
   * @property size - The size of the button.
   * @property color - The color of the button.
   * @property startIcon - The start icon component of the button.
   * @property content - The content of the button.
   * @property label - The label text of the button.
   */
  export const CopyButton: ({
    disabled,
    className,
    style,
    sx,
    onClick,
    delay,
    variant,
    size,
    color,
    startIcon,
    content,
    label,
  }: ICopyButtonProps) => JSX.Element;
  export default CopyButton;
}

declare module "react-declarative/components/SubjectBinding/SubjectBinding" {
  import * as React from "react";
  import TSubject from "react-declarative/model/TSubject";
  interface ISubjectBindingProps {
    target?: TSubject<any>;
    children: React.ReactNode;
  }
  export class SubjectBinding extends React.Component<ISubjectBindingProps> {
    componentDidMount: () => void;
    componentWillUnmount: () => void;
    render: () => JSX.Element;
  }
  export default SubjectBinding;
}

declare module "react-declarative/components/Countdown/Countdown" {
  import * as React from "react";
  import { BoxProps } from "@mui/material/Box";
  export interface ICountdownProps extends BoxProps {
    children?: React.ReactNode;
    expireAt: string | number | Date;
    onExpire?: () => void;
  }
  /**
   * Countdown component displays a countdown timer that expires at a given time.
   *
   * @typedef  ICountdownProps
   * @property className - The CSS class name for styling the component.
   * @} children - The content to be displayed inside the countdown component.
   * @property expireAt - The time at which the countdown expires.
   * @property onExpire - The callback function to be called when the countdown expires.
   * @property otherProps - Additional props to be spread onto the root element.
   *
   * @param props - The countdown component props.
   * @returns - The countdown component.
   */
  export const Countdown: ({
    className,
    children,
    expireAt,
    onExpire,
    ...otherProps
  }: ICountdownProps) => JSX.Element;
  export default Countdown;
}

declare module "react-declarative/components/Chip/Chip" {
  import { ChipProps } from "@mui/material/Chip";
  interface IChipProps
    extends Omit<
      ChipProps,
      keyof {
        color: never;
      }
    > {
    color?: string;
  }
  /**
   * Represents a Chip component with customized color.
   *
   * @param props - The props passed to the Chip component.
   * @param props.color - The color of the chip. Overrides the primary color of the theme.
   * @param props.otherProps - Additional props passed to the underlying MatChip component.
   * @param props.otherProps - Additional props passed to the underlying MatChip component.
   *
   * @returns The rendered Chip component.
   */
  export const Chip: ({ color, ...otherProps }: IChipProps) => JSX.Element;
  export default Chip;
}

declare module "react-declarative/components/ScrollAdjust/ScrollAdjust" {
  import React from "react";
  type Height = Exclude<React.CSSProperties["height"], undefined>;
  /**
   * Represents a component that adjusts the scroll behavior based on certain conditions.
   *
   * @returns - The adjusted scroll component.
   */
  export const ScrollAdjust: {
    (): JSX.Element;
    setAdjustForce(force: boolean): void;
    setAdjustHeight(height: Height): void;
    setAdjustFiller(element: React.ComponentType<any>): void;
  };
  export default ScrollAdjust;
}

declare module "react-declarative/components/MasterDetail/MasterDetail" {
  import IMasterDetailProps from "react-declarative/components/MasterDetail/model/IMasterDetailProps";
  /**
   * Represents a master-detail component with various modes and customizations.
   * @template Payload - The payload type for the component.
   * @param props - The component props.
   * @param props.mode - The mode of the component. Default is MasterDetailMode.Card.
   * @param props.withTransparentTabs - Specifies whether to use transparent tabs. Default is false.
   * @param props.withMenuCollapse - Specifies whether to enable menu collapse. Default is false.
   * @param props.withFixedPos - Specifies whether to fix the position. Default is false.
   * @param props.fixedPosHeaderAdjust - The adjustment value for the fixed position header. Default is 0.
   * @param props.title - The title of the component.
   * @param props.className - The class name for the component.
   * @param props.style - The inline style object for the component.
   * @param props.sx - The theme-ui styles for the component.
   * @param props.activeOption - The initially active option ID.
   * @param props.payload - The payload for the component.
   * @param props.deps - The dependencies array for the component.
   * @param props.options - The options array for generating master-detail items.
   * @param props.children - The child components.
   * @param props.Loader - The loader component to show during async actions. Default is LoaderDefault.
   * @param props.Error - The error component to show when an error occurs during async actions. Default is ErrorDefault.
   * @param props.onActiveOptionChange - The callback function to handle active option change.
   * @param props.fallback - The fallback component to show when there are no items available.
   * @param props.onLoadStart - The callback function to execute when the async action starts.
   * @param props.onLoadEnd - The callback function to execute when the async action ends.
   * @param props.throwError - Specifies whether to throw an error during async actions.
   * @returns - The rendered component.
   */
  export const MasterDetail: <Payload extends unknown = any>({
    mode,
    withTransparentTabs,
    withMenuCollapse,
    withFixedPos,
    fixedPosHeaderAdjust,
    title,
    className,
    style,
    sx,
    activeOption: upperActiveOption,
    payload,
    deps,
    options,
    children,
    Loader,
    Error,
    onActiveOptionChange,
    fallback,
    onLoadStart,
    onLoadEnd,
    throwError,
  }: IMasterDetailProps<Payload>) => JSX.Element;
  export default MasterDetail;
}

declare module "react-declarative/components/MasterDetail/config" {
  export const MASTER_DETAIL_ROOT = "react-declatative__master-detail-root";
  export const MASTER_DETAIL_HEADER = "react-declatative__master-detail-header";
}

declare module "react-declarative/components/MasterDetail/model/IMasterDetailOption" {
  import React from "react";
  /**
   * Represents a configuration option for a master-detail component.
   * @template Payload - The type of payload that the option functions will receive.
   */
  export interface IMasterDetailOption<Payload = any> {
    id: string;
    icon?: React.ComponentType<any>;
    label?: string;
    isVisible?: (payload: Payload) => boolean | Promise<boolean>;
    isDisabled?: (payload: Payload) => boolean | Promise<boolean>;
    isActive?: (payload: Payload) => boolean | Promise<boolean>;
  }
  /**
   * Represents an internal interface for a master-detail option.
   *
   * @template Payload - The type of payload associated with the option.
   */
  export interface IMasterDetailOptionInternal<Payload = any>
    extends Omit<
      IMasterDetailOption<Payload>,
      keyof {
        isVisible: never;
        isDisabled: never;
        isActive: never;
      }
    > {
    visible: boolean;
    disabled: boolean;
    active: boolean;
  }
  export default IMasterDetailOption;
}

declare module "react-declarative/components/MasterDetail/model/MasterDetailMode" {
  /**
   * Represents the available modes for a master-detail view.
   */
  export enum MasterDetailMode {
    Paper = "paper",
    Outline = "outline",
    Card = "card",
    Tabs = "tabs",
  }
  export default MasterDetailMode;
}

declare module "react-declarative/components/common/ListPicker/ListPicker" {
  import IRowData, { RowId } from "react-declarative/model/IRowData";
  import IListProps from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  import IColumn from "react-declarative/model/IColumn";
  import SelectionMode from "react-declarative/model/SelectionMode";
  import IListRowAction from "react-declarative/model/IListRowAction";
  export interface IListPickerProps<RowData extends IRowData = IAnything> {
    onChange: (data: RowId[] | null) => void;
    handler: IListProps<RowData>["handler"];
    selectionMode: SelectionMode.Single | SelectionMode.Multiple;
    columns: Omit<
      IColumn<RowData>,
      keyof {
        headerName: never;
        width: never;
      }
    >[];
    selectedRows: NonNullable<IListProps<RowData>["selectedRows"]> | null;
    payload?: IListProps<RowData>["payload"];
    features?: IListProps<RowData>["features"];
    minHeight: number;
    minWidth: number;
    title: string;
    open: boolean;
    rowActions?: IListRowAction[];
  }
  export const ListPicker: <RowData extends IRowData = any>({
    onChange,
    handler,
    title,
    columns,
    open,
    selectionMode,
    selectedRows: upperSelectedRows,
    minHeight,
    minWidth,
    rowActions,
  }: IListPickerProps<RowData>) => JSX.Element;
  export default ListPicker;
}

declare module "react-declarative/components/CardView/model/ICardViewProps" {
  import React from "react";
  import { BoxProps } from "@mui/material";
  import TSubject from "react-declarative/model/TSubject";
  import ICardViewOperation from "react-declarative/components/CardView/model/ICardViewOperation";
  import ICardViewAction from "react-declarative/components/CardView/model/ICardViewAction";
  import IItemData from "react-declarative/components/CardView/model/IItemData";
  /**
   * Represents the properties for the CardView component.
   *
   * @template ItemData - The type of data for each item in the CardView.
   * @template Payload - The type of payload.
   *
   * @interface ICardViewProps
   * @extends {BoxProps}
   */
  export interface ICardViewProps<
    ItemData extends IItemData = any,
    Payload extends any = any,
  > extends BoxProps {
    handler:
      | ItemData[]
      | ((search: string, skip: number) => ItemData[] | Promise<ItemData[]>);
    scrollXSubject?: TSubject<number>;
    scrollYSubject?: TSubject<number>;
    reloadSubject?: TSubject<void>;
    cardActions?: ICardViewAction<ItemData, Payload>[];
    operations?: ICardViewOperation<ItemData, Payload>[];
    payload?: (() => Payload) | Payload;
    formatMedia?: (item: ItemData) => React.ReactNode;
    formatCardLabel?: (item: ItemData) => React.ReactNode;
    formatKey?: (key: keyof ItemData) => React.ReactNode;
    formatValue?: (
      key: keyof ItemData,
      value: ItemData[keyof ItemData],
    ) => React.ReactNode;
    onOperation?: (
      operation: string,
      selectedItems: ItemData[],
      isAllSelected: boolean,
    ) => void | Promise<void>;
    onAction?: (action: string, item: ItemData) => void;
    onCardClick?: (item: ItemData) => void;
    onLoadStart?: () => void;
    pickFields?: (keyof ItemData)[];
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    skipStep?: number;
    throwError?: boolean;
    noSearch?: boolean;
    noFooter?: boolean;
  }
  export default ICardViewProps;
}

declare module "react-declarative/components/CalendarView/model/ICalendarViewProps" {
  import dayjs from "dayjs";
  import { SxProps } from "@mui/material";
  import ICalendarRequest from "react-declarative/components/CalendarView/model/ICalendarRequest";
  import ICalendarItem from "react-declarative/components/CalendarView/model/ICalendarItem";
  import ICalendarTile from "react-declarative/components/CalendarView/model/ICalendarTile";
  import { stamp } from "react-declarative/utils/getMomentStamp";
  import IAnything from "react-declarative/model/IAnything";
  import TSubject from "react-declarative/model/TSubject";
  /**
   * Interface representing the props for the CalendarView component.
   *
   * @template Data The type of data associated with each calendar item.
   * @template Payload The type of payload associated with each calendar item.
   */
  export interface ICalendarViewProps<
    Data extends IAnything = IAnything,
    Payload extends IAnything = IAnything,
  > {
    reloadSubject?: TSubject<void>;
    dotSide?: number;
    outlinePaper?: boolean;
    transparentPaper?: boolean;
    BeforeCalendarHeader?: React.ComponentType<{
      fromStamp: stamp;
      toStamp: stamp;
      payload: Payload;
    }>;
    AfterCalendarHeader?: React.ComponentType<{
      fromStamp: stamp;
      toStamp: stamp;
      payload: Payload;
    }>;
    BeforeDayHeader?: React.ComponentType<{
      stamp: stamp;
      items: ICalendarItem<Data, Payload>[];
      payload: Payload;
    }>;
    AfterDayHeader?: React.ComponentType<{
      stamp: stamp;
      items: ICalendarItem<Data, Payload>[];
      payload: Payload;
    }>;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    fallback?: (e: Error) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
    handler:
      | ((
          req: ICalendarRequest<Payload>,
        ) => Omit<ICalendarItem<Data, Payload>, "payload">[])
      | ((
          req: ICalendarRequest<Payload>,
        ) => Promise<Omit<ICalendarItem<Data, Payload>, "payload">[]>);
    payload?: Payload | (() => Payload);
    date?: dayjs.Dayjs;
    minDate?: dayjs.Dayjs;
    maxDate?: dayjs.Dayjs;
    onChange?: (date: dayjs.Dayjs | null) => void;
    renderItem: React.ComponentType<ICalendarTile<Data, Payload>>;
    onItemClick: (item: { data: Data; payload: Payload }) => void;
    rowMark?: ((row: Data) => string) | ((row: Data) => Promise<string>);
    rowColor?: (row: Data) => string;
  }
  export default ICalendarViewProps;
}

declare module "react-declarative/components/FeatureView/model/IFeatureViewProps" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import IFeatureGroup from "react-declarative/components/FeatureView/model/IFeatureGroup";
  import TSubject from "react-declarative/model/TSubject";
  export interface IFeatureViewProps {
    changeSubject?: TSubject<any>;
    data?: string[] | null;
    outlinePaper?: boolean;
    transparentPaper?: boolean;
    onChange?: (data: string[]) => void;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    readonly?: boolean;
    features: IFeatureGroup[];
    expandAll?: boolean;
  }
  export default IFeatureViewProps;
}

declare module "react-declarative/components/VisibilityView/model/IVisibilityViewProps" {
  import { SxProps } from "@mui/material";
  import IVisibilityGroup from "react-declarative/components/VisibilityView/model/IVisibilityGroup";
  import TSubject from "react-declarative/model/TSubject";
  export interface IVisibilityViewProps {
    changeSubject?: TSubject<any>;
    outlinePaper?: boolean;
    transparentPaper?: boolean;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    expandAll?: boolean;
    readonly?: boolean;
    data?: Record<string, string[]> | null;
    onChange?: (data: Record<string, string[]>) => void;
    groups: IVisibilityGroup[];
    keyToTitle?: (name: string) => string;
  }
  export default IVisibilityViewProps;
}

declare module "react-declarative/components/RecordView/model/IData" {
  export type Value = boolean | number | string;
  /**
   * Represents a data structure that can hold various types of data.
   */
  export interface IData {
    [key: string]: IData[] | Value[] | IData | Value;
  }
  export default IData;
}

declare module "react-declarative/components/RecordView/model/IRecordViewProps" {
  import * as React from "react";
  import { GridSize, BoxProps } from "@mui/material";
  import IData from "react-declarative/components/RecordView/model/IData";
  import IAnything from "react-declarative/model/IAnything";
  /**
   * Interface for the props of the RecordView component.
   *
   * @template Data - The type of the data.
   * @template Payload - The type of the payload.
   * @extends BoxProps - Props for the Box component.
   */
  export interface IRecordViewProps<Data = IData, Payload = IAnything>
    extends BoxProps {
    background?: string;
    data: Data;
    search?: string;
    keyWidth?: GridSize;
    valueWidth?: GridSize;
    totalWidth?: number;
    withExpandAll?: boolean;
    withExpandRoot?: boolean;
    expandList?: Array<string>;
    withExpandLevel?: number;
    formatValue?: (
      key: string,
      value: boolean | number | string | null,
      path: string,
    ) => React.ReactNode;
    formatKey?: (key: string, path: string) => React.ReactNode;
    onSearchChanged?: (search: string) => void;
    BeforeSearch?: React.ComponentType<any>;
    AfterSearch?: React.ComponentType<any>;
    payload?: Payload;
  }
  export default IRecordViewProps;
}

declare module "react-declarative/components/Scaffold2/model/IScaffold2Props" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import IScaffold2Group, {
    IScaffold2GroupInternal,
  } from "react-declarative/components/Scaffold2/model/IScaffold2Group";
  import IScaffold2Action from "react-declarative/components/Scaffold2/model/IScaffold2Action";
  import Payload from "react-declarative/components/Scaffold2/model/Payload";
  export interface IScaffold2Props<T = Payload> {
    noOptionHover?: boolean;
    noContent?: boolean;
    noAppName?: boolean;
    fixedHeader?: boolean;
    noSearch?: boolean;
    dense?: boolean;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    appName?: string;
    options: IScaffold2Group<T>[];
    actions?: IScaffold2Action<T>[];
    loading?: boolean | number;
    payload?: T;
    deps?: any[];
    activeOptionPath: string;
    activeTabPath?: string;
    AfterAppName?: React.ComponentType<any>;
    BeforeActionMenu?: React.ComponentType<any>;
    BeforeSearch?: React.ComponentType<any>;
    AfterSearch?: React.ComponentType<any>;
    BeforeMenuContent?: React.ComponentType<any>;
    AfterMenuContent?: React.ComponentType<any>;
    BeforeContent?: React.ComponentType<any>;
    AfterContent?: React.ComponentType<any>;
    Copyright?: React.ComponentType<any>;
    onAction?: (name: string) => void;
    onOptionClick?: (path: string, id: string) => void;
    onOptionGroupClick?: (path: string, id: string) => void;
    onTabChange?: (path: string, tab: string, id: string) => void;
    children: React.ReactNode;
    onInit?: () => void | Promise<void>;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
  }
  export interface IScaffold2InternalProps<T = Payload>
    extends Omit<
      IScaffold2Props<T>,
      keyof {
        options: never;
      }
    > {
    options: IScaffold2GroupInternal<T>[];
  }
  export default IScaffold2Props;
}

declare module "react-declarative/components/Scaffold2/model/Payload" {
  export type Payload = any;
  export default Payload;
}

declare module "react-declarative/components/common/Group/Group" {
  import * as React from "react";
  import { IManagedLayout, PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IGroupProps<Data = IAnything, Payload = IAnything>
    extends IManagedLayout<Data, Payload> {
    style?: PickProp<IField<Data, Payload>, "style">;
    className?: PickProp<IField<Data, Payload>, "className">;
  }
  interface IGroupPrivate {
    children: React.ReactNode;
    isItem?: boolean;
    isBaselineAlign?: boolean;
    onClick?: React.MouseEventHandler<HTMLDivElement>;
    onFocus?: () => void;
    onContextMenu?: React.MouseEventHandler<HTMLDivElement>;
  }
  export const Group: {
    (
      {
        className,
        columns,
        phoneColumns,
        tabletColumns,
        desktopColumns,
        children,
        isItem,
        isBaselineAlign,
        style,
        columnsOverride,
        sx,
        fieldRightMargin,
        fieldBottomMargin,
        onClick,
        onFocus,
        onContextMenu,
        ...otherProps
      }: IGroupProps & IGroupPrivate,
      ref: React.Ref<HTMLDivElement>,
    ): JSX.Element;
    displayName: string;
  };
  const _default: React.ForwardRefExoticComponent<
    IGroupProps<any, any> & IGroupPrivate & React.RefAttributes<HTMLDivElement>
  >;
  export default _default;
}

declare module "react-declarative/components/common/Outline/Outline" {
  import * as React from "react";
  import { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IOutlineProps<Data = IAnything, Payload = IAnything> {
    className?: PickProp<IField<Data, Payload>, "className">;
    style?: PickProp<IField<Data, Payload>, "style">;
  }
  interface IOutlinePrivate<Data = IAnything, Payload = IAnything> {
    children: React.ReactNode;
    columnsOverride?: PickProp<IField<Data, Payload>, "columnsOverride">;
    sx?: PickProp<IField<Data, Payload>, "sx">;
    isBaselineAlign: boolean;
  }
  export const Outline: {
    ({
      className,
      columnsOverride,
      style,
      children,
      isBaselineAlign,
      sx,
    }: IOutlineProps & IOutlinePrivate): JSX.Element;
    displayName: string;
  };
  export default Outline;
}

declare module "react-declarative/components/common/Paper/Paper" {
  import * as React from "react";
  import { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IPaperProps<Data = IAnything, Payload = IAnything> {
    className?: PickProp<IField<Data, Payload>, "className">;
    style?: PickProp<IField<Data, Payload>, "style">;
  }
  interface IPaperPrivate<Data = IAnything, Payload = IAnything> {
    children: React.ReactNode;
    isBaselineAlign: boolean;
    columnsOverride?: PickProp<IField<Data, Payload>, "columnsOverride">;
    sx?: PickProp<IField<Data, Payload>, "sx">;
  }
  export const Paper: {
    ({
      className,
      style,
      children,
      columnsOverride,
      isBaselineAlign,
      sx,
    }: IPaperProps & IPaperPrivate): JSX.Element;
    displayName: string;
  };
  export default Paper;
}

declare module "react-declarative/components/common/Expansion/Expansion" {
  import * as React from "react";
  import { PickProp } from "react-declarative/model/IManaged";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IExpansionProps<Data = IAnything, Payload = IAnything> {
    title?: PickProp<IField<Data, Payload>, "title">;
    style?: PickProp<IField<Data, Payload>, "style">;
    description?: PickProp<IField<Data, Payload>, "description">;
    className?: PickProp<IField<Data, Payload>, "className">;
    expansionOpened?: PickProp<IField<Data, Payload>, "expansionOpened">;
  }
  interface IExpansionPrivate<Data = IAnything, Payload = IAnything> {
    children: React.ReactNode;
    columnsOverride?: PickProp<IField<Data, Payload>, "columnsOverride">;
    sx?: PickProp<IField<Data, Payload>, "sx">;
    isBaselineAlign: boolean;
  }
  export const Expansion: {
    ({
      title,
      description,
      className,
      columnsOverride,
      isBaselineAlign,
      sx,
      style,
      children,
      expansionOpened,
    }: IExpansionProps & IExpansionPrivate): JSX.Element;
    displayName: string;
  };
  export default Expansion;
}

declare module "react-declarative/components/List/slots/ActionAddSlot/IActionAddSlot" {
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  export interface IActionAddSlot<
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
  > {
    action?: string;
    label?: string;
    height: number;
    width: number;
    isVisible?: (
      selectedRows: RowData[],
      payload: Payload,
    ) => Promise<boolean> | boolean;
    isDisabled?: (
      selectedRows: RowData[],
      payload: Payload,
    ) => Promise<boolean> | boolean;
  }
  export default IActionAddSlot;
}

declare module "react-declarative/components/List/slots/ActionAddSlot/ActionAddSlot" {
  import IActionAddSlot from "react-declarative/components/List/slots/ActionAddSlot/IActionAddSlot";
  export const ActionAddSlot: (props: IActionAddSlot) => JSX.Element;
  export default ActionAddSlot;
}

declare module "react-declarative/components/List/slots/ActionFabSlot/IActionFabSlot" {
  import React from "react";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  export interface IActionFabSlot<
    RowData extends IRowData = IAnything,
    Payload extends IAnything = IAnything,
  > {
    action?: string;
    label?: string;
    icon?: React.ComponentType<any>;
    height: number;
    width: number;
    isVisible?: (
      selectedRows: RowData[],
      payload: Payload,
    ) => Promise<boolean> | boolean;
    isDisabled?: (
      selectedRows: RowData[],
      payload: Payload,
    ) => Promise<boolean> | boolean;
  }
  export default IActionFabSlot;
}

declare module "react-declarative/components/List/slots/ActionFabSlot/ActionFabSlot" {
  import IActionFabSlot from "react-declarative/components/List/slots/ActionFabSlot/IActionFabSlot";
  export const ActionFabSlot: (props: IActionFabSlot) => JSX.Element;
  export default ActionFabSlot;
}

declare module "react-declarative/components/List/slots/ActionMenuSlot/IActionMenuSlot" {
  import IAnything from "react-declarative/model/IAnything";
  import { IListActionOption } from "react-declarative/model/IListProps";
  export interface IActionMenuSlot {
    options?: Partial<IListActionOption>[];
    deps?: IAnything[];
  }
  export default IActionMenuSlot;
}

declare module "react-declarative/components/List/slots/ActionMenuSlot/ActionMenuSlot" {
  import IActionMenuSlot from "react-declarative/components/List/slots/ActionMenuSlot/IActionMenuSlot";
  export const ActionMenuSlot: (props: IActionMenuSlot) => JSX.Element;
  export default ActionMenuSlot;
}

declare module "react-declarative/components/List/slots/BodyRowSlot/IBodyRowSlot" {
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  import IColumn from "react-declarative/model/IColumn";
  import DisplayMode from "react-declarative/model/DisplayMode";
  export type BodyColumn<RowData extends IRowData = IAnything> = Omit<
    IColumn<RowData>,
    keyof {
      width: never;
    }
  > & {
    width: string;
  };
  export interface IBodyRowSlot<RowData extends IRowData = IAnything> {
    fullWidth: number;
    row: RowData;
    disabled: boolean;
    columns: BodyColumn<RowData>[];
    mode: DisplayMode;
  }
  export default IBodyRowSlot;
}

declare module "react-declarative/components/List/slots/BodyRowSlot/BodyRowSlot" {
  import IBodyRowSlot from "react-declarative/components/List/slots/BodyRowSlot/IBodyRowSlot";
  export const BodyRowSlot: (props: IBodyRowSlot) => JSX.Element;
  export default BodyRowSlot;
}

declare module "react-declarative/components/List/slots/CheckboxCellSlot/ICheckboxCellSlot" {
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  import { ICheckboxCellProps } from "react-declarative/components/List/components/SlotFactory/components/CheckboxCell/CheckboxCell";
  export interface ICheckboxCellSlot<RowData extends IRowData = IAnything>
    extends ICheckboxCellProps<RowData> {}
  export default ICheckboxCellSlot;
}

declare module "react-declarative/components/List/slots/CheckboxCellSlot/CheckboxCellSlot" {
  import ICheckboxCellSlot from "react-declarative/components/List/slots/CheckboxCellSlot/ICheckboxCellSlot";
  export const CheckboxCellSlot: (props: ICheckboxCellSlot) => JSX.Element;
  export default CheckboxCellSlot;
}

declare module "react-declarative/components/List/slots/CommonCellSlot/ICommonCellSlot" {
  import { IActionMenuProps } from "react-declarative/components/ActionMenu";
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  import IColumn from "react-declarative/model/IColumn";
  import DisplayMode from "react-declarative/model/DisplayMode";
  export type CommonCellColumn<RowData extends IRowData = IAnything> = Omit<
    IColumn<RowData>,
    keyof {
      width: never;
    }
  > & {
    width: string;
  };
  export interface ICommonCellSlot<RowData extends IRowData = IAnything> {
    column: CommonCellColumn<RowData>;
    row: RowData;
    idx: number;
    fullWidth: number;
    disabled: boolean;
    mode: DisplayMode;
    onMenuToggle: IActionMenuProps["onToggle"];
    onAction: IActionMenuProps["onAction"];
  }
  export default ICommonCellSlot;
}

declare module "react-declarative/components/List/slots/CommonCellSlot/CommonCellSlot" {
  import ICommonCellSlot from "react-declarative/components/List/slots/CommonCellSlot/ICommonCellSlot";
  export const CommonCellSlot: (props: ICommonCellSlot) => JSX.Element;
  export default CommonCellSlot;
}

declare module "react-declarative/components/List/slots/HeadRowSlot/IHeadRowSlot" {
  import IAnything from "react-declarative/model/IAnything";
  import IRowData from "react-declarative/model/IRowData";
  import IColumn from "react-declarative/model/IColumn";
  import DisplayMode from "react-declarative/model/DisplayMode";
  export type HeadColumn<RowData extends IRowData = IAnything> = Omit<
    IColumn<RowData>,
    keyof {
      width: never;
    }
  > & {
    width: string;
  };
  export interface IHeadRowSlot<RowData extends IRowData = IAnything> {
    columns: HeadColumn<RowData>[];
    fullWidth: number;
    mode: DisplayMode;
  }
  export default IHeadRowSlot;
}

declare module "react-declarative/components/List/slots/HeadRowSlot/HeadRowSlot" {
  import IHeadRowSlot from "react-declarative/components/List/slots/HeadRowSlot/IHeadRowSlot";
  export const HeadRowSlot: (props: IHeadRowSlot) => JSX.Element;
  export default HeadRowSlot;
}

declare module "react-declarative/components/List/slots/ActionListSlot/IActionListSlot" {
  import { IListAction } from "react-declarative/model/IListProps";
  import IAnything from "react-declarative/model/IAnything";
  export interface IActionListSlot<FilterData extends {} = IAnything> {
    className?: string;
    style?: React.CSSProperties;
    filterData: FilterData;
    actions: IListAction[];
    deps?: any[];
    height: number;
    width: number;
    title?: string;
  }
  export default IActionListSlot;
}

declare module "react-declarative/components/List/slots/ActionListSlot/ActionListSlot" {
  import IActionListSlot from "react-declarative/components/List/slots/ActionListSlot/IActionListSlot";
  export const ActionListSlot: (props: IActionListSlot) => JSX.Element;
  export default ActionListSlot;
}

declare module "react-declarative/components/List/slots/ChipListSlot/IChipListSlot" {
  import IAnything from "react-declarative/model/IAnything";
  import IListProps from "react-declarative/model/IListProps";
  import IRowData from "react-declarative/model/IRowData";
  export interface IChipListSlot<RowData extends IRowData = IAnything> {
    listChips: IListProps<RowData>["chips"];
    loading: boolean;
  }
  export default IChipListSlot;
}

declare module "react-declarative/components/List/slots/ChipListSlot/ChipListSlot" {
  import IChipListSlot from "react-declarative/components/List/slots/ChipListSlot/IChipListSlot";
  export const ChipListSlot: (props: IChipListSlot) => JSX.Element;
  export default ChipListSlot;
}

declare module "react-declarative/components/List/slots/FilterListSlot/IFilterListSlot" {
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  export interface IFilterListSlot<FilterData extends {} = IAnything> {
    className?: string;
    filterData: FilterData;
    style?: React.CSSProperties;
    filters: IField<FilterData>[];
    change: (data: FilterData) => void;
    onSearchChange?: (search: string) => void;
    onFilterChange?: (data: FilterData) => void;
    onCollapsedChange?: (collapsed: boolean) => void;
    withToggledFilters?: boolean;
    ready: () => void;
    clean: () => void;
    loading: boolean;
    label: string;
    search: string;
    withSearch: boolean;
    height: number;
    width: number;
  }
  export default IFilterListSlot;
}

declare module "react-declarative/components/List/slots/FilterListSlot/FilterListSlot" {
  import IFilterListSlot from "react-declarative/components/List/slots/FilterListSlot/IFilterListSlot";
  export const FilterListSlot: (props: IFilterListSlot) => JSX.Element;
  export default FilterListSlot;
}

declare module "react-declarative/components/List/slots/OperationListSlot/IOperationListSlot" {
  import IListOperation from "react-declarative/model/IListOperation";
  export interface IOperationListSlot {
    className?: string;
    style?: React.CSSProperties;
    operations: IListOperation[];
    width: number;
  }
  export default IOperationListSlot;
}

declare module "react-declarative/components/List/slots/OperationListSlot/OperationListSlot" {
  import IOperationListSlot from "react-declarative/components/List/slots/OperationListSlot/IOperationListSlot";
  export const OperationListSlot: (props: IOperationListSlot) => JSX.Element;
  export default OperationListSlot;
}

declare module "react-declarative/components/List/slots/SearchSlot/ISearchSlot" {
  export interface ISearchSlot {
    className?: string;
    style?: React.CSSProperties;
    onSearchChange?: (search: string) => void;
    clean: () => void;
    loading: boolean;
    label: string;
    search: string;
    height: number;
    width: number;
  }
  export default ISearchSlot;
}

declare module "react-declarative/components/List/slots/SearchSlot/SearchSlot" {
  import ISearchSlot from "react-declarative/components/List/slots/SearchSlot/ISearchSlot";
  export const SearchSlot: (props: ISearchSlot) => JSX.Element;
  export default SearchSlot;
}

declare module "react-declarative/components/One/slots/ProgressSlot" {
  export * from "react-declarative/components/One/slots/ProgressSlot/IProgressSlot";
  export * from "react-declarative/components/One/slots/ProgressSlot/ProgressSlot";
  export { default } from "react-declarative/components/One/slots/ProgressSlot/ProgressSlot";
}

declare module "react-declarative/components/One/slots/CheckBoxSlot" {
  export * from "react-declarative/components/One/slots/CheckBoxSlot/ICheckBoxSlot";
  export * from "react-declarative/components/One/slots/CheckBoxSlot/CheckBoxSlot";
  export { default } from "react-declarative/components/One/slots/CheckBoxSlot/CheckBoxSlot";
}

declare module "react-declarative/components/One/slots/ItemsSlot" {
  export * from "react-declarative/components/One/slots/ItemsSlot/IItemsSlot";
  export * from "react-declarative/components/One/slots/ItemsSlot/ItemsSlot";
  export { default } from "react-declarative/components/One/slots/ItemsSlot/ItemsSlot";
}

declare module "react-declarative/components/One/slots/ComboSlot" {
  export * from "react-declarative/components/One/slots/ComboSlot/IComboSlot";
  export * from "react-declarative/components/One/slots/ComboSlot/ComboSlot";
  export { default } from "react-declarative/components/One/slots/ComboSlot/ComboSlot";
}

declare module "react-declarative/components/One/slots/LineSlot" {
  export * from "react-declarative/components/One/slots/LineSlot/ILineSlot";
  export * from "react-declarative/components/One/slots/LineSlot/LineSlot";
  export { default } from "react-declarative/components/One/slots/LineSlot/LineSlot";
}

declare module "react-declarative/components/One/slots/RadioSlot" {
  export * from "react-declarative/components/One/slots/RadioSlot/IRadioSlot";
  export * from "react-declarative/components/One/slots/RadioSlot/RadioSlot";
  export { default } from "react-declarative/components/One/slots/RadioSlot/RadioSlot";
}

declare module "react-declarative/components/One/slots/RatingSlot" {
  export * from "react-declarative/components/One/slots/RatingSlot/IRatingSlot";
  export * from "react-declarative/components/One/slots/RatingSlot/RatingSlot";
  export { default } from "react-declarative/components/One/slots/RatingSlot/RatingSlot";
}

declare module "react-declarative/components/One/slots/TypographySlot" {
  export * from "react-declarative/components/One/slots/TypographySlot/ITypographySlot";
  export * from "react-declarative/components/One/slots/TypographySlot/TypographySlot";
  export { default } from "react-declarative/components/One/slots/TypographySlot/TypographySlot";
}

declare module "react-declarative/components/One/slots/TextSlot" {
  export * from "react-declarative/components/One/slots/TextSlot/ITextSlot";
  export * from "react-declarative/components/One/slots/TextSlot/TextSlot";
  export { default } from "react-declarative/components/One/slots/TextSlot/TextSlot";
}

declare module "react-declarative/components/One/slots/DateSlot" {
  export * from "react-declarative/components/One/slots/DateSlot/IDateSlot";
  export * from "react-declarative/components/One/slots/DateSlot/DateSlot";
  export { default } from "react-declarative/components/One/slots/DateSlot/DateSlot";
}

declare module "react-declarative/components/One/slots/TimeSlot" {
  export * from "react-declarative/components/One/slots/TimeSlot/ITimeSlot";
  export * from "react-declarative/components/One/slots/TimeSlot/TimeSlot";
  export { default } from "react-declarative/components/One/slots/TimeSlot/TimeSlot";
}

declare module "react-declarative/components/One/slots/SwitchSlot" {
  export * from "react-declarative/components/One/slots/SwitchSlot/ISwitchSlot";
  export * from "react-declarative/components/One/slots/SwitchSlot/SwitchSlot";
  export { default } from "react-declarative/components/One/slots/SwitchSlot/SwitchSlot";
}

declare module "react-declarative/components/One/slots/SliderSlot" {
  export * from "react-declarative/components/One/slots/SliderSlot/ISliderSlot";
  export * from "react-declarative/components/One/slots/SliderSlot/SliderSlot";
  export { default } from "react-declarative/components/One/slots/SliderSlot/SliderSlot";
}

declare module "react-declarative/components/One/slots/FileSlot/IFileSlot" {
  import {
    IFileFieldProps,
    IFileFieldPrivate,
  } from "react-declarative/components/One/fields/FileField";
  type IFileBase = IFileFieldProps & IFileFieldPrivate;
  /**
   * Represents a file slot interface that extends the IFileBase interface.
   *
   * @interface
   * @extends {IFileBase}
   */
  export interface IFileSlot extends IFileBase {}
  export default IFileSlot;
}

declare module "react-declarative/components/One/slots/ChooseSlot" {
  export * from "react-declarative/components/One/slots/ChooseSlot/IChooseSlot";
  export * from "react-declarative/components/One/slots/ChooseSlot/ChooseSlot";
  export { default } from "react-declarative/components/One/slots/ChooseSlot/ChooseSlot";
}

declare module "react-declarative/components/One/slots/CompleteSlot" {
  export * from "react-declarative/components/One/slots/CompleteSlot/ICompleteSlot";
  export * from "react-declarative/components/One/slots/CompleteSlot/CompleteSlot";
  export { default } from "react-declarative/components/One/slots/CompleteSlot/CompleteSlot";
}

declare module "react-declarative/components/One/slots/YesNoSlot" {
  export * from "react-declarative/components/One/slots/YesNoSlot/IYesNoSlot";
  export * from "react-declarative/components/One/slots/YesNoSlot/YesNoSlot";
  export { default } from "react-declarative/components/One/slots/YesNoSlot/YesNoSlot";
}

declare module "react-declarative/components/One/slots/DictSlot" {
  export * from "react-declarative/components/One/slots/DictSlot/IDictSlot";
  export * from "react-declarative/components/One/slots/DictSlot/DictSlot";
  export { default } from "react-declarative/components/One/slots/DictSlot/DictSlot";
}

declare module "react-declarative/components/One/slots/TreeSlot" {
  export * from "react-declarative/components/One/slots/TreeSlot/ITreeSlot";
  export * from "react-declarative/components/One/slots/TreeSlot/TreeSlot";
  export { default } from "react-declarative/components/One/slots/TreeSlot/TreeSlot";
}

declare module "react-declarative/components/One/slots/FileSlot" {
  export * from "react-declarative/components/One/slots/FileSlot/IFileSlot";
  export * from "react-declarative/components/One/slots/FileSlot/FileSlot";
  export { default } from "react-declarative/components/One/slots/FileSlot/FileSlot";
}

declare module "react-declarative/components/One/components/OneConfig/OneConfig" {
  import { IConfig } from "react-declarative/components/One/components/OneConfig/OneConfigInstance";
  export const GET_REF_SYMBOL: unique symbol;
  export class OneConfig {
    static [GET_REF_SYMBOL]: () => IConfig;
    static setValue: (config: Partial<IConfig>) => void;
  }
  export { IConfig };
  export default OneConfig;
}

declare module "react-declarative/components/One/components/makeField/makeField" {
  import * as React from "react";
  import IAnything from "react-declarative/model/IAnything";
  import IManaged from "react-declarative/model/IManaged";
  import IEntity from "react-declarative/model/IEntity";
  import IField from "react-declarative/model/IField";
  interface IConfig<Data = IAnything> {
    withApplyQueue?: boolean;
    skipDebounce?: boolean;
    skipDirtyClickListener?: boolean;
    skipFocusReadonly?: boolean;
    defaultProps?: Partial<
      Omit<
        IField<Data>,
        keyof {
          fields: never;
          child: never;
        }
      >
    >;
  }
  /**
   * - Оборачивает IEntity в удобную абстракцию IManaged, где сразу
   *   представлены invalid, disabled, visible и можно задваивать вызов onChange
   * - Управляет фокусировкой, мануально ожидая потерю фокуса, эмулируя onBlur
   */
  export function makeField(
    originalComponent: React.FC<IManaged>,
    fieldConfig?: IConfig,
  ): {
    <Data extends unknown = any>({
      className,
      sx,
      columns,
      phoneColumns,
      tabletColumns,
      desktopColumns,
      isDisabled: isDisabledUpper,
      isVisible: isVisibleUpper,
      isInvalid: isInvalidUpper,
      isIncorrect: isIncorrectUpper,
      isReadonly: isReadonlyUpper,
      change,
      fallback,
      ready,
      compute: upperCompute,
      shouldRecompute,
      click,
      map,
      object: upperObject,
      name,
      title,
      menu,
      debug,
      focus,
      blur,
      invalidity,
      prefix,
      dirty: upperDirty,
      disabled: fieldDisabled,
      readonly: upperReadonly,
      autoFocus,
      style,
      menuItems,
      groupRef: ref,
      fieldRightMargin,
      fieldBottomMargin,
      outlinePaper,
      transparentPaper,
      ...otherProps
    }: IEntity<Data, any>): JSX.Element | null;
    displayName: string;
  };
  export default makeField;
}

declare module "react-declarative/components/One/components/makeLayout/makeLayout" {
  import * as React from "react";
  import IAnything from "react-declarative/model/IAnything";
  import IEntity from "react-declarative/model/IEntity";
  export interface ILayout<Data extends IAnything = IAnything>
    extends IEntity<Data> {
    children: React.ReactNode;
  }
  export function makeLayout<T extends ILayout<any>>(
    originalComponent: React.FC<T>,
  ): React.FC<T>;
  export default makeLayout;
}

declare module "react-declarative/components/One/components/common/MenuItems" {
  import * as React from "react";
  import IField, { Value } from "react-declarative/model/IField";
  import TSubject from "react-declarative/model/TSubject";
  export interface IParams {
    name: Exclude<IField["name"], undefined>;
    menuItems: Exclude<IField["menuItems"], undefined>;
    onValueChange: (value: Value) => void;
    menu: Exclude<IField["menu"], undefined>;
  }
  export interface IRequest extends IParams {
    event: React.MouseEvent<HTMLDivElement>;
  }
  interface IMenuItemsProps {
    requestSubject: TSubject<IRequest>;
  }
  /**
   * Renders a menu with a list of options based on the provided props.
   *
   * @param props - The menu items props.
   * @param props.requestSubject - An observer subject to listen for menu requests.
   *
   * @returns The rendered menu.
   */
  export const MenuItems: ({ requestSubject }: IMenuItemsProps) => JSX.Element;
  export default MenuItems;
}

declare module "react-declarative/components/OneIcon/model/IOneIconProps" {
  import { SxProps } from "@mui/material";
  import IOneProps, { OneHandler } from "react-declarative/model/IOneProps";
  import { IconButtonProps } from "@mui/material/IconButton";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  /**
   * Represents the properties of a context menu button component.
   *
   * @template Data - The type of data associated with the button.
   * @template Payload - The type of payload associated with the button.
   */
  export interface IOneButtonProps<
    Data extends {} = IAnything,
    Payload extends IAnything = IAnything,
  > extends Omit<
      IconButtonProps,
      keyof {
        onChange: never;
        onClick: never;
        onInvalid: never;
        onFocus: never;
        onBlur: never;
        color: never;
      }
    > {
    noBadge?: boolean;
    fieldDebounce?: number;
    waitForChangesDelay?: number;
    fields: IField<Data, Payload>[];
    payload?: Payload | (() => Payload);
    handler: OneHandler<Data, Payload>;
    onChange?: IOneProps<Data, Payload>["change"];
    onInvalid?: IOneProps<Data, Payload>["invalidity"];
    onFocus?: IOneProps<Data, Payload>["focus"];
    onBlur?: IOneProps<Data, Payload>["blur"];
    badgeColor?:
      | "primary"
      | "secondary"
      | "default"
      | "error"
      | "info"
      | "success"
      | "warning";
    badgeOverlap?: "rectangular" | "circular";
    badgeSx?: SxProps<any>;
    oneSx?: SxProps<any>;
    color?:
      | "inherit"
      | "default"
      | "primary"
      | "secondary"
      | "error"
      | "info"
      | "success"
      | "warning";
  }
  export default IOneButtonProps;
}

declare module "react-declarative/components/OneButton/model/IOneButtonProps" {
  import { SxProps } from "@mui/material";
  import IOneProps, { OneHandler } from "react-declarative/model/IOneProps";
  import { ButtonProps } from "@mui/material/Button";
  import IAnything from "react-declarative/model/IAnything";
  import IField from "react-declarative/model/IField";
  /**
   * @interface IOneButtonProps
   * @template Data - The data type of the IField object's data property
   * @template Payload - The payload type of the IField object
   * @property [noBadge] - Determines whether to display a badge on the button. Default is false.
   * @property [fieldDebounce] - The debounce time in milliseconds for field changes. Default is null.
   * @property [waitForChangesDelay] - The delay time in milliseconds to wait for changes before invoking the handler. Default is null.
   * @property fields - An array of IField objects representing the fields associated with the button.
   * @property [payload] - The payload to be passed to the handler when the button is clicked.
   * @property handler - The handler function to be invoked when the button is clicked.
   * @property [onChange] - The change callback function for the button. Default is null.
   * @property [onInvalid] - The invalidity callback function for the button. Default is null.
   * @property [onFocus] - The focus callback function for the button. Default is null.
   * @property [onBlur] - The blur callback function for the button. Default is null.
   * @property [badgeColor] - The color of the badge. Default is 'primary'.
   * @property [badgeOverlap] - The overlap type for the badge. Default is 'rectangular'.
   * @property [badgeSx] - The style for the badge. Default is null.
   * @property [oneSx] - The style for the button. Default is null.
   * @property [color] - The color of the button. Default is 'inherit'.
   */
  export interface IOneButtonProps<
    Data extends {} = IAnything,
    Payload extends IAnything = IAnything,
  > extends Omit<
      ButtonProps,
      keyof {
        onChange: never;
        onClick: never;
        onInvalid: never;
        onFocus: never;
        onBlur: never;
        color: never;
      }
    > {
    noBadge?: boolean;
    fieldDebounce?: number;
    waitForChangesDelay?: number;
    fields: IField<Data, Payload>[];
    payload?: Payload | (() => Payload);
    handler: OneHandler<Data, Payload>;
    onChange?: IOneProps<Data, Payload>["change"];
    onInvalid?: IOneProps<Data, Payload>["invalidity"];
    onFocus?: IOneProps<Data, Payload>["focus"];
    onBlur?: IOneProps<Data, Payload>["blur"];
    badgeColor?:
      | "primary"
      | "secondary"
      | "default"
      | "error"
      | "info"
      | "success"
      | "warning";
    badgeOverlap?: "rectangular" | "circular";
    badgeSx?: SxProps<any>;
    oneSx?: SxProps<any>;
    color?:
      | "inherit"
      | "primary"
      | "secondary"
      | "success"
      | "error"
      | "info"
      | "warning";
  }
  export default IOneButtonProps;
}

declare module "react-declarative/components/ActionFilter/model/IActionFilterProps" {
  import React from "react";
  import IActionFilter from "react-declarative/components/ActionFilter/model/IActionFilter";
  /**
   * Represents the properties for the ActionFilter component.
   */
  export interface IActionFilterProps {
    actions: IActionFilter[];
    label?: React.ReactNode;
    addLabel?: React.ReactNode;
    data?: Record<string, string>;
    onChange?: (data: Record<string, string>) => void;
  }
  export default IActionFilterProps;
}

declare module "react-declarative/components/ActionTrigger/model/IActionTriggerProps" {
  import IActionTrigger from "react-declarative/components/ActionTrigger/model/IActionTrigger";
  import { ButtonProps } from "@mui/material/Button";
  import { BoxProps } from "@mui/material/Box";
  import { IAsyncProps } from "react-declarative/components/Async";
  /**
   * Interface representing the properties of an action trigger component.
   * @template T - The type of data being passed to the component, defaults to object.
   */
  export interface IActionTriggerProps<T extends any = object>
    extends Omit<
        IAsyncProps<T>,
        keyof {
          Loader: never;
          Error: never;
          children: never;
        }
      >,
      Omit<
        BoxProps,
        keyof {
          onChange: never;
          onLoadStart: never;
          children: never;
        }
      > {
    actions: IActionTrigger[];
    onAction?: (action: string) => void | Promise<void>;
    variant?: ButtonProps["variant"];
    size?: ButtonProps["size"];
  }
  export default IActionTriggerProps;
}

declare module "react-declarative/components/OutletView/model/IOutletViewProps" {
  import { IRevealProps } from "react-declarative/components/FetchView";
  import { BoxProps } from "@mui/material";
  import IAnything from "react-declarative/model/IAnything";
  import TSubject from "react-declarative/model/TSubject";
  import History from "react-declarative/model/History";
  import IOutlet from "react-declarative/components/OutletView/model/IOutlet";
  import IOtherProps from "react-declarative/components/OutletView/model/IOtherProps";
  export interface IOutletViewProps<
    Data extends {} = Record<string, any>,
    Payload = IAnything,
    Params = IAnything,
    OtherProps = IOtherProps,
  > extends Omit<
      BoxProps,
      keyof {
        onChange: never;
        onSubmit: never;
      }
    > {
    waitForChangesDelay?: number;
    history: History;
    readonly?: boolean;
    animation?: IRevealProps["animation"];
    payload?: Payload | (() => Payload);
    params?: Params;
    routes: IOutlet<Data, Payload, Params, OtherProps>[];
    initialData?: Data | (() => Data);
    onChange?: (
      data: Data,
      initial: boolean,
      payload: Payload,
      source: string,
    ) => void;
    onSubmit?: (
      data: Data,
      payload: Payload,
      config: {
        afterSave: () => Promise<void>;
      },
    ) => boolean | Promise<boolean>;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (error: Error) => void;
    changeSubject?: TSubject<[keyof Data, Data]>;
    otherProps?: OtherProps;
  }
  export default IOutletViewProps;
}

declare module "react-declarative/components/OutletView/model/IOtherProps" {
  export interface IOtherProps {}
  export default IOtherProps;
}

declare module "react-declarative/components/OutletView/components/OutletModal" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import { IFetchViewProps } from "react-declarative/components/FetchView";
  import IOutletModal, {
    ModalOtherProps,
  } from "react-declarative/components/OutletView/model/IOutletModal";
  import IOutletViewProps from "react-declarative/components/OutletView/model/IOutletViewProps";
  import TBehaviorSubject from "react-declarative/model/TBehaviorSubject";
  import IAnything from "react-declarative/model/IAnything";
  import TSubject from "react-declarative/model/TSubject";
  import ISize from "react-declarative/model/ISize";
  import Id from "react-declarative/components/OutletView/model/Id";
  export interface IOutletModalProps<
    Data extends {} = Record<string, any>,
    Payload = IAnything,
    Params = IAnything,
  > extends Omit<
      IOutletViewProps<Data, Payload, Params, ModalOtherProps>,
      keyof {
        otherProps: never;
        onSubmit: never;
        initialData: never;
        payload: never;
        params: never;
        routes: never;
        data: never;
        id: never;
      }
    > {
    sizeRequest?: (size: ISize) => {
      height: number;
      width: number;
      sx?: SxProps;
    };
    fullScreen?: boolean;
    withActionButton?: boolean;
    withStaticAction?: boolean;
    outletIdSubject: TBehaviorSubject<Id | null>;
    title?: string;
    fetchState?: IFetchViewProps<Id>["state"];
    reloadSubject?: TSubject<void>;
    onSubmit?: (
      id: Id,
      data: Data | null,
      payload: Payload,
    ) => Promise<boolean> | boolean;
    AfterTitle?: React.ComponentType<{
      onClose: () => void;
      data: Data | null;
      id: string;
    }>;
    BeforeTitle?: React.ComponentType<{
      onClose: () => void;
      data: Data | null;
      id: string;
    }>;
    routes: IOutletModal<Data, Payload, Params>[];
    data?: Data | null;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
    hidden?: boolean;
    submitLabel?: string;
    mapPayload?: (
      id: Id,
      data: Record<string, any>[],
    ) => Payload | Promise<Payload>;
    mapParams?: (
      id: Id,
      data: Record<string, any>[],
    ) => Params | Promise<Params>;
    mapInitialData?: (
      id: Id,
      data: Record<string, any>[],
    ) => Data | Promise<Data>;
    onMount?: () => void;
    onUnmount?: () => void;
    onClose?: () => void;
  }
  export const OutletModal: <
    Data extends {} = Record<string, any>,
    Payload = any,
    Params = any,
  >({
    withActionButton,
    hidden,
    onSubmit,
    onChange,
    mapParams,
    mapInitialData,
    mapPayload,
    fullScreen,
    sizeRequest,
    onLoadStart,
    onLoadEnd,
    fallback,
    reloadSubject,
    outletIdSubject,
    fetchState,
    AfterTitle,
    BeforeTitle,
    title,
    data: upperData,
    withStaticAction,
    throwError,
    submitLabel,
    waitForChangesDelay,
    readonly,
    onMount,
    onUnmount,
    onClose,
    ...outletProps
  }: IOutletModalProps<Data, Payload, Params>) => JSX.Element;
  export default OutletModal;
}

declare module "react-declarative/components/OutletView/model/Id" {
  export type Id = string;
  export default Id;
}

declare module "react-declarative/components/FadeView/components/FadeContainer" {
  import * as React from "react";
  import DefaultFade from "react-declarative/components/FadeView/components/DefaultFade";
  export const SCROLL_VIEW_TARGER = "react-declarative__scrollViewTarget";
  export interface IFadeContainerProps {
    className?: string;
    Fade?: typeof DefaultFade;
    style?: React.CSSProperties;
    children: React.ReactNode;
    color?: string;
    selector?: string;
    zIndex?: number;
    disableBottom?: boolean;
    disableRight?: boolean;
  }
  export const FadeContainer: ({
    className,
    style,
    color,
    children,
    disableBottom,
    disableRight,
    zIndex,
    Fade,
    selector,
  }: IFadeContainerProps) => JSX.Element;
  export default FadeContainer;
}

declare module "react-declarative/components/TabsView/model/ITabsViewProps" {
  import React from "react";
  import { SxProps } from "@mui/material";
  import History from "react-declarative/model/History";
  import IAnything from "react-declarative/model/IAnything";
  import IOutletViewProps from "react-declarative/components/OutletView/model/IOutletViewProps";
  import ITabsOutlet, {
    OtherProps,
  } from "react-declarative/components/TabsView/model/ITabsOutlet";
  import ITabsStep from "react-declarative/components/TabsView/model/ITabsStep";
  import { MemoryHistory } from "history";
  export interface ITabsViewProps<
    Data extends {} = IAnything,
    Payload = IAnything,
  > extends Omit<
      IOutletViewProps<Data, Payload, OtherProps>,
      keyof {
        history: never;
        routes: never;
      }
    > {
    transparentHeader?: boolean;
    BeforeTabs?: React.ComponentType<any>;
    AfterTabs?: React.ComponentType<any>;
    className?: string;
    outlinePaper?: boolean;
    transparentPaper?: boolean;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    onTabChange: (id: string, history: MemoryHistory, payload: Payload) => void;
    routes: ITabsOutlet<Data, Payload>[];
    tabs: ITabsStep<Payload>[];
    history?: History;
    pathname?: string;
  }
  export default ITabsViewProps;
}

declare module "react-declarative/components/WizardView/model/IWizardViewProps" {
  import { SxProps } from "@mui/material";
  import History from "react-declarative/model/History";
  import IAnything from "react-declarative/model/IAnything";
  import IOutletViewProps from "react-declarative/components/OutletView/model/IOutletViewProps";
  import IWizardOutlet, {
    OtherProps,
  } from "react-declarative/components/WizardView/model/IWizardOutlet";
  import IWizardStep from "react-declarative/components/WizardView/model/IWizardStep";
  export interface IWizardViewProps<
    Data extends {} = IAnything,
    Payload = IAnything,
  > extends Omit<
      IOutletViewProps<Data, Payload, OtherProps>,
      keyof {
        history: never;
        routes: never;
      }
    > {
    className?: string;
    outlinePaper?: boolean;
    transparentPaper?: boolean;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    routes: IWizardOutlet<Data, Payload>[];
    steps: IWizardStep<Payload>[];
    history?: History;
    pathname?: string;
  }
  export default IWizardViewProps;
}

declare module "react-declarative/components/WizardView/components/WizardOutletModal" {
  import * as React from "react";
  import { SxProps } from "@mui/material";
  import { IFetchViewProps } from "react-declarative/components/FetchView";
  import IWizardModal from "react-declarative/components/WizardView/model/IWizardModal";
  import TBehaviorSubject from "react-declarative/model/TBehaviorSubject";
  import IWizardViewProps from "react-declarative/components/WizardView/model/IWizardViewProps";
  import IAnything from "react-declarative/model/IAnything";
  import TSubject from "react-declarative/model/TSubject";
  import ISize from "react-declarative/model/ISize";
  export interface IWizardModalProps<
    Data extends {} = Record<string, any>,
    Payload = IAnything,
  > extends Omit<
      IWizardViewProps<Data, Payload>,
      keyof {
        otherProps: never;
        onSubmit: never;
        initialData: never;
        payload: never;
        params: never;
        routes: never;
        data: never;
        id: never;
        outlinePaper: never;
        transparentPaper: never;
      }
    > {
    sizeRequest?: (size: ISize) => {
      height: number;
      width: number;
      sx?: SxProps;
    };
    openSubject: TBehaviorSubject<boolean>;
    fullScreen?: boolean;
    withActionButton?: boolean;
    withStaticAction?: boolean;
    title?: string;
    fetchState?: IFetchViewProps["state"];
    reloadSubject?: TSubject<void>;
    onSubmit?: (
      data: Data | null,
      payload: Payload,
    ) => Promise<boolean> | boolean;
    AfterTitle?: React.ComponentType<{
      onClose: () => void;
      data: Data | null;
    }>;
    BeforeTitle?: React.ComponentType<{
      onClose: () => void;
      data: Data | null;
    }>;
    routes: IWizardModal<Data, Payload>[];
    data?: Data | null;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    throwError?: boolean;
    hidden?: boolean;
    submitLabel?: string;
    mapPayload?: (data: Record<string, any>[]) => Payload | Promise<Payload>;
    mapInitialData?: (data: Record<string, any>[]) => Data | Promise<Data>;
    onMount?: () => void;
    onUnmount?: () => void;
    onClose?: () => void;
  }
  export const OutletModal: <
    Data extends {} = Record<string, any>,
    Payload = any,
  >({
    withActionButton,
    hidden,
    onSubmit,
    onChange,
    mapInitialData,
    mapPayload,
    onLoadStart,
    onLoadEnd,
    fallback,
    fullScreen,
    sizeRequest,
    reloadSubject,
    fetchState,
    AfterTitle,
    BeforeTitle,
    title,
    data: upperData,
    throwError,
    withStaticAction,
    waitForChangesDelay,
    submitLabel,
    openSubject,
    readonly,
    routes,
    onMount,
    onUnmount,
    onClose,
    ...outletProps
  }: IWizardModalProps<Data, Payload>) => JSX.Element;
  export default OutletModal;
}

declare module "react-declarative/components/KanbanView/model/IKanbanViewProps" {
  import { SxProps } from "@mui/material";
  import IAnything from "react-declarative/model/IAnything";
  import IBoardColumn from "react-declarative/components/KanbanView/model/IBoardColumn";
  import IBoardItem from "react-declarative/components/KanbanView/model/IBoardItem";
  import TSubject from "react-declarative/model/TSubject";
  export interface IKanbanViewProps<
    Data = IAnything,
    Payload = IAnything,
    ColumnType = IAnything,
  > {
    reloadSubject?: TSubject<void>;
    ref?: React.Ref<HTMLDivElement | undefined>;
    deps?: any[];
    withUpdateOrder?: boolean;
    withGoBack?: boolean;
    withHeaderTooltip?: boolean;
    className?: string;
    rowTtl?: number;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    payload?: (() => Payload) | Payload;
    disabled?: boolean;
    items: IBoardItem<Data, Payload, ColumnType>[];
    columns: IBoardColumn<Data, Payload, ColumnType>[];
    bufferSize?: number;
    minRowHeight?: number;
    cardLabel?:
      | React.ReactNode
      | ((
          id: string,
          data: Data,
          payload: Payload,
        ) => React.ReactNode | Promise<React.ReactNode>);
    onChangeColumn?: (
      id: string,
      column: ColumnType,
      data: Data,
      payload: IAnything,
    ) => void | Promise<void>;
    onCardLabelClick?: (id: string, data: Data, payload: IAnything) => void;
    onDataRequest?: (initial: boolean) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    fallback?: (e: Error) => void;
    filterFn?: (item: IBoardItem<Data, Payload, ColumnType>) => boolean;
    throwError?: boolean;
    AfterCardContent?: React.ComponentType<{
      id: string;
      data: Data;
      payload: IAnything;
    }>;
    BeforeColumnTitle?: React.ComponentType<{
      column: ColumnType;
      payload: IAnything;
    }>;
    AfterColumnTitle?: React.ComponentType<{
      column: ColumnType;
      payload: IAnything;
    }>;
  }
  export default IKanbanViewProps;
}

declare module "react-declarative/components/GridView/components/Card" {
  import * as React from "react";
  import { SxProps } from "@mui/material/styles";
  import IAnything from "react-declarative/model/IAnything";
  export interface ICardProps<P = IAnything> {
    label?: React.ReactNode;
    outlinePaper?: boolean;
    transparentPaper?: boolean;
    sx?: SxProps<any>;
    children?: React.ReactNode;
    className?: string;
    payload?: P;
    loading: boolean;
    style?: React.CSSProperties;
    BeforeLabel?: React.ComponentType<{
      payload: P;
      loading: boolean;
    }>;
    AfterLabel?: React.ComponentType<{
      payload: P;
      loading: boolean;
    }>;
  }
  export const Card: ({
    children,
    outlinePaper,
    transparentPaper,
    className,
    style,
    sx,
    label,
    payload,
    loading,
    BeforeLabel,
    AfterLabel,
  }: ICardProps) => JSX.Element;
  export default Card;
}

declare module "react-declarative/components/Grid/model/Dimension" {
  export type Dimension = number | string;
  export default Dimension;
}

declare module "react-declarative/components/MasterDetail/model/IMasterDetailProps" {
  import IMasterDetailOption from "react-declarative/components/MasterDetail/model/IMasterDetailOption";
  import MasterDetailMode from "react-declarative/components/MasterDetail/model/MasterDetailMode";
  import React from "react";
  import { SxProps } from "@mui/material";
  /**
   * Props interface for the IMasterDetail component.
   *
   * @template Payload - The type of the payload data.
   *
   * @property [withTransparentTabs=false] - Determines if the tabs should have a transparent background.
   * @property [withMenuCollapse=false] - Determines if the menu should collapse when the detail view is open.
   * @property [withFixedPos=false] - Determines if the component should have a fixed position.
   * @property [fixedPosHeaderAdjust] - The number of pixels to adjust the header when the component has a fixed position.
   * @property [mode] - The mode of the master detail component.
   * @property [title] - The title of the component.
   * @property children - The child components of the master detail component.
   * @property [Loader] - The loader component to use.
   * @property [Error] - The error component to use.
   * @property [activeOption] - The currently active option.
   * @property [onActiveOptionChange] - Callback function called when the active option is changed.
   * @property [className] - The CSS class name for the component.
   * @property [style] - The inline style for the component.
   * @property [sx] - The custom styling props for the component.
   * @property [payload] - The payload data.
   * @property [deps] - The dependencies for the component.
   * @property options - The options for the component.
   * @property [fallback] - The fallback function in case of an error.
   * @property [onLoadStart] - Callback function called when the data loading starts.
   * @property [onLoadEnd] - Callback function called when the data loading ends.
   * @property [throwError=false] - Determines if an error should be thrown.
   */
  export interface IMasterDetailProps<Payload = any> {
    withTransparentTabs?: boolean;
    withMenuCollapse?: boolean;
    withFixedPos?: boolean;
    fixedPosHeaderAdjust?: number;
    mode?: MasterDetailMode;
    title?: string;
    children: React.ReactNode;
    Loader?: React.ComponentType<any>;
    Error?: React.ComponentType<any>;
    activeOption?: string;
    onActiveOptionChange?: (activeOption: string, initial: boolean) => void;
    className?: string;
    style?: React.CSSProperties;
    sx?: SxProps<any>;
    payload?: Payload;
    deps?: any[];
    options: IMasterDetailOption<Payload>[];
    fallback?: (e: Error) => void;
    onLoadStart?: () => void;
    onLoadEnd?: (isOk: boolean) => void;
    throwError?: boolean;
  }
  export default IMasterDetailProps;
}

declare module "react-declarative/model/DisplayMode" {
  export enum DisplayMode {
    Phone = "phone",
    Tablet = "tablet",
    Desktop = "desktop",
  }
  export default DisplayMode;
}

declare module "react-declarative/components/List/components/SlotFactory/components/CheckboxCell/CheckboxCell" {
  import IRowData from "react-declarative/model/IRowData";
  import IAnything from "react-declarative/model/IAnything";
  export interface ICheckboxCellProps<RowData extends IRowData = IAnything> {
    row: RowData;
    disabled: boolean;
  }
  export const CheckboxCell: <RowData extends IRowData = any>({
    row,
    disabled,
  }: ICheckboxCellProps<RowData>) => JSX.Element;
  export default CheckboxCell;
}

declare module "react-declarative/components/One/slots/ProgressSlot/IProgressSlot" {
  import {
    IProgressFieldProps,
    IProgressFieldPrivate,
  } from "react-declarative/components/One/fields/ProgressField";
  /**
   * @interface
   * Interface for IProgressSlot.
   * Represents a progress slot that implements IProgressFieldProps and IProgressFieldPrivate interfaces.
   */
  export interface IProgressSlot
    extends IProgressFieldProps,
      IProgressFieldPrivate {}
  export default IProgressSlot;
}

declare module "react-declarative/components/One/slots/ProgressSlot/ProgressSlot" {
  import IProgressSlot from "react-declarative/components/One/slots/ProgressSlot/IProgressSlot";
  /**
   * Represents a Progress Slot component.
   *
   * @param props - The props passed to the component.
   * @returns - The rendered Progress component.
   */
  export const ProgressSlot: (props: IProgressSlot) => JSX.Element;
  export default ProgressSlot;
}

declare module "react-declarative/components/One/slots/CheckBoxSlot/ICheckBoxSlot" {
  import {
    ICheckboxFieldPrivate,
    ICheckboxFieldProps,
  } from "react-declarative/components/One/fields/CheckboxField";
  /**
   * Represents a checkbox slot for a checkbox field.
   *
   * @interface ICheckBoxSlot
   * @extends ICheckboxFieldProps
   * @extends ICheckboxFieldPrivate
   */
  export interface ICheckBoxSlot
    extends ICheckboxFieldProps,
      ICheckboxFieldPrivate {}
  export default ICheckBoxSlot;
}

declare module "react-declarative/components/One/slots/CheckBoxSlot/CheckBoxSlot" {
  import ICheckBoxSlot from "react-declarative/components/One/slots/CheckBoxSlot/ICheckBoxSlot";
  /**
   * Represents a checkbox slot component.
   *
   * @param props - The props for the checkbox slot component.
   * @returns - The rendered checkbox element.
   */
  export const CheckBoxSlot: (props: ICheckBoxSlot) => JSX.Element;
  export default CheckBoxSlot;
}

declare module "react-declarative/components/One/slots/ItemsSlot/IItemsSlot" {
  import {
    IItemsFieldPrivate,
    IItemsFieldProps,
  } from "react-declarative/components/One/fields/ItemsField";
  /**
   * Represents an interface for an ItemsSlot in a field.
   * Extends the IItemsFieldProps and IItemsFieldPrivate interfaces.
   *
   * @interface IItemsSlot
   * @extends {IItemsFieldProps}
   * @extends {IItemsFieldPrivate}
   */
  export interface IItemsSlot extends IItemsFieldProps, IItemsFieldPrivate {}
  export default IItemsSlot;
}

declare module "react-declarative/components/One/slots/ItemsSlot/ItemsSlot" {
  import IItemsSlot from "react-declarative/components/One/slots/ItemsSlot/IItemsSlot";
  /**
   * Represents a component that provides a slot for items.
   * @param props - The component's properties.
   * @return The rendered component.
   */
  export const ItemsSlot: (props: IItemsSlot) => JSX.Element;
  export default ItemsSlot;
}

declare module "react-declarative/components/One/slots/ComboSlot/IComboSlot" {
  import {
    IComboFieldPrivate,
    IComboFieldProps,
  } from "react-declarative/components/One/fields/ComboField";
  /**
   * Represents a combo slot for a combo field.
   *
   * @interface IComboSlot
   * @extends Omit<IComboFieldProps, "readonly">
   * @extends IComboFieldPrivate
   */
  export interface IComboSlot
    extends Omit<IComboFieldProps, "readonly">,
      IComboFieldPrivate {}
  export default IComboSlot;
}

declare module "react-declarative/components/One/slots/ComboSlot/ComboSlot" {
  import IComboSlot from "react-declarative/components/One/slots/ComboSlot/IComboSlot";
  /**
   * Represents a combo slot component.
   *
   * @param props - The properties for the combo slot.
   * @returns A combo slot component.
   */
  export const ComboSlot: (props: IComboSlot) => JSX.Element;
  export default ComboSlot;
}

declare module "react-declarative/components/One/slots/LineSlot/ILineSlot" {
  import { ILineFieldProps } from "react-declarative/components/One/fields/LineField";
  /**
   * Represents a line slot which extends ILineFieldProps interface.
   *
   * @interface ILineSlot
   * @extends {ILineFieldProps}
   */
  export interface ILineSlot extends ILineFieldProps {}
  export default ILineSlot;
}

declare module "react-declarative/components/One/slots/LineSlot/LineSlot" {
  import ILineSlot from "react-declarative/components/One/slots/LineSlot/ILineSlot";
  /**
   * Represents a Line Slot component.
   *
   * @param props - The props passed to the component.
   * @returns - The rendered Line component along with the props passed to it.
   */
  export const LineSlot: (props: ILineSlot) => JSX.Element;
  export default LineSlot;
}

declare module "react-declarative/components/One/slots/RadioSlot/IRadioSlot" {
  import {
    IRadioFieldPrivate,
    IRadioFieldProps,
  } from "react-declarative/components/One/fields/RadioField";
  /**
   * An interface that extends IRadioFieldProps and IRadioFieldPrivate to represent a radio slot.
   *
   * @interface
   * @extends IRadioFieldProps
   * @extends IRadioFieldPrivate
   */
  export interface IRadioSlot extends IRadioFieldProps, IRadioFieldPrivate {}
  export default IRadioSlot;
}

declare module "react-declarative/components/One/slots/RadioSlot/RadioSlot" {
  import IRadioSlot from "react-declarative/components/One/slots/RadioSlot/IRadioSlot";
  /**
   * Represents a radio slot component.
   *
   * @param props - The props object for the radio slot component.
   * @returns - The rendered radio element.
   */
  export const RadioSlot: (props: IRadioSlot) => JSX.Element;
  export default RadioSlot;
}

declare module "react-declarative/components/One/slots/RatingSlot/IRatingSlot" {
  import {
    IRatingFieldProps,
    IRatingFieldPrivate,
  } from "react-declarative/components/One/fields/RatingField";
  /**
   * Represents a rating slot.
   *
   * @interface
   * @extends IRatingFieldProps
   * @extends IRatingFieldPrivate
   */
  export interface IRatingSlot
    extends Omit<IRatingFieldProps, "readonly">,
      IRatingFieldPrivate {}
  export default IRatingSlot;
}

declare module "react-declarative/components/One/slots/RatingSlot/RatingSlot" {
  import IRatingSlot from "react-declarative/components/One/slots/RatingSlot/IRatingSlot";
  /**
   * Renders a component that displays a rating using the Rating component from the SlotContext.
   *
   * @param props - The properties to be passed to the Rating component.
   * @returns - The rendered component.
   */
  export const RatingSlot: (props: IRatingSlot) => JSX.Element;
  export default RatingSlot;
}

declare module "react-declarative/components/One/slots/TypographySlot/ITypographySlot" {
  import {
    ITypographyFieldPrivate,
    ITypographyFieldProps,
  } from "react-declarative/components/One/fields/TypographyField";
  /**
   * The ITypographySlot interface represents a typography slot.
   *
   * @interface
   * @extends ITypographyFieldProps
   * @extends ITypographyFieldPrivate
   */
  export interface ITypographySlot
    extends ITypographyFieldProps,
      ITypographyFieldPrivate {}
  export default ITypographySlot;
}

declare module "react-declarative/components/One/slots/TypographySlot/TypographySlot" {
  import ITypographySlot from "react-declarative/components/One/slots/TypographySlot/ITypographySlot";
  /**
   * Represents a slot for typography components.
   * @param props - The properties for the typography slot.
   * @returns A typography component.
   */
  export const TypographySlot: (props: ITypographySlot) => JSX.Element;
  export default TypographySlot;
}

declare module "react-declarative/components/One/slots/TextSlot/ITextSlot" {
  import {
    ITextFieldProps,
    ITextFieldPrivate,
  } from "react-declarative/components/One/fields/TextField";
  type ITextBase = ITextFieldProps & ITextFieldPrivate;
  /**
   * Represents a text slot.
   * @interface
   * @extends {ITextBase}
   */
  export interface ITextSlot extends ITextBase {}
  export default ITextSlot;
}

declare module "react-declarative/components/One/slots/TextSlot/TextSlot" {
  import ITextSlot from "react-declarative/components/One/slots/TextSlot/ITextSlot";
  /**
   * Represents a text slot component.
   *
   * @param props - The properties to configure the component.
   * @returns - The rendered text component.
   */
  export const TextSlot: (props: ITextSlot) => JSX.Element;
  export default TextSlot;
}

declare module "react-declarative/components/One/slots/DateSlot/IDateSlot" {
  import {
    IDateFieldProps,
    IDateFieldPrivate,
  } from "react-declarative/components/One/fields/DateField";
  type IDateBase = IDateFieldProps & IDateFieldPrivate;
  /**
   * Represents a date slot.
   *
   * @interface IDateSlot
   * @extends IDateBase
   */
  export interface IDateSlot extends IDateBase {}
  export default IDateSlot;
}

declare module "react-declarative/components/One/slots/DateSlot/DateSlot" {
  import IDateSlot from "react-declarative/components/One/slots/DateSlot/IDateSlot";
  /**
   * Represents a DateSlot component.
   *
   * @param props - The props for the DateSlot component.
   * @returns - The rendered Date component.
   */
  export const DateSlot: (props: IDateSlot) => JSX.Element;
  export default DateSlot;
}

declare module "react-declarative/components/One/slots/TimeSlot/ITimeSlot" {
  import {
    ITimeFieldProps,
    ITimeFieldPrivate,
  } from "react-declarative/components/One/fields/TimeField";
  type TTimeBase = ITimeFieldProps & ITimeFieldPrivate;
  /**
   * Represents a time slot.
   * @interface ITimeSlot
   * @extends TTimeBase
   */
  export interface ITimeSlot extends TTimeBase {}
  export default ITimeSlot;
}

declare module "react-declarative/components/One/slots/TimeSlot/TimeSlot" {
  import ITimeSlot from "react-declarative/components/One/slots/TimeSlot/ITimeSlot";
  /**
   * Represents a TimeSlot component.
   * @param props - The properties of the TimeSlot component.
   * @returns The rendered Time component.
   */
  export const TimeSlot: (props: ITimeSlot) => JSX.Element;
  export default TimeSlot;
}

declare module "react-declarative/components/One/slots/SwitchSlot/ISwitchSlot" {
  import {
    ISwitchFieldPrivate,
    ISwitchFieldProps,
  } from "react-declarative/components/One/fields/SwitchField";
  /**
   * Represents a switch slot.
   *
   * @interface ISwitchSlot
   * @extends {ISwitchFieldProps}
   * @extends {ISwitchFieldPrivate}
   */
  export interface ISwitchSlot extends ISwitchFieldProps, ISwitchFieldPrivate {}
  export default ISwitchSlot;
}

declare module "react-declarative/components/One/slots/SwitchSlot/SwitchSlot" {
  import ISwitchSlot from "react-declarative/components/One/slots/SwitchSlot/ISwitchSlot";
  /**
   * Represents a Switch Slot component.
   *
   * @param props - The properties for the Switch Slot component.
   * @returns The rendered Switch component with the given properties.
   */
  export const SwitchSlot: (props: ISwitchSlot) => JSX.Element;
  export default SwitchSlot;
}

declare module "react-declarative/components/One/slots/SliderSlot/ISliderSlot" {
  import {
    ISliderFieldPrivate,
    ISliderFieldProps,
  } from "react-declarative/components/One/fields/SliderField";
  /**
   * @interface
   * Represents a slider slot in a slider component.
   *
   * @extends {ISliderFieldProps} - Interface representing the properties of the slider field.
   * @extends {ISliderFieldPrivate} - Interface representing the private properties of the slider field.
   */
  export interface ISliderSlot extends ISliderFieldProps, ISliderFieldPrivate {}
  export default ISliderSlot;
}

declare module "react-declarative/components/One/slots/SliderSlot/SliderSlot" {
  import ISliderSlot from "react-declarative/components/One/slots/SliderSlot/ISliderSlot";
  /**
   * Represents a Slider component wrapped in a SlotContext.
   *
   * @param props - The props object that contains the properties for the Slider component.
   * @returns The Slider component with the given props.
   */
  export const SliderSlot: (props: ISliderSlot) => JSX.Element;
  export default SliderSlot;
}

declare module "react-declarative/components/One/slots/ChooseSlot/IChooseSlot" {
  import {
    IChooseFieldProps,
    IChooseFieldPrivate,
  } from "react-declarative/components/One/fields/ChooseField";
  type IChooseBase = IChooseFieldProps & IChooseFieldPrivate;
  /**
   * Represents the interface for choosing a time slot.
   * @interface
   * @extends IChooseBase
   */
  export interface IChooseSlot extends IChooseBase {}
  export default IChooseSlot;
}

declare module "react-declarative/components/One/slots/ChooseSlot/ChooseSlot" {
  import IChooseSlot from "react-declarative/components/One/slots/ChooseSlot/IChooseSlot";
  /**
   * Renders the component by passing the properties to the Choose component obtained from the SlotContext.
   *
   * @param props - The properties for the ChooseSlot component.
   * @returns - The rendered Choose component.
   */
  export const ChooseSlot: (props: IChooseSlot) => JSX.Element;
  export default ChooseSlot;
}

declare module "react-declarative/components/One/slots/CompleteSlot/ICompleteSlot" {
  import {
    ICompleteFieldProps,
    ICompleteFieldPrivate,
  } from "react-declarative/components/One/fields/CompleteField";
  type ICompleteBase = ICompleteFieldProps & ICompleteFieldPrivate;
  /**
   * Represents a complete slot.
   *
   * @interface ICompleteSlot
   * @extends ICompleteBase
   */
  export interface ICompleteSlot extends ICompleteBase {}
  export default ICompleteSlot;
}

declare module "react-declarative/components/One/slots/CompleteSlot/CompleteSlot" {
  import ICompleteSlot from "react-declarative/components/One/slots/CompleteSlot/ICompleteSlot";
  /**
   * Represents a complete slot.
   *
   * @param props - The props for the complete slot.
   * @returns - The JSX element representing the complete slot.
   */
  export const CompleteSlot: (props: ICompleteSlot) => JSX.Element;
  export default CompleteSlot;
}

declare module "react-declarative/components/One/slots/YesNoSlot/IYesNoSlot" {
  import {
    IYesNoFieldPrivate,
    IYesNoFieldProps,
  } from "react-declarative/components/One/fields/YesNoField";
  /**
   * Represents a Yes/No slot.
   *
   * @interface IYesNoSlot
   * @extends IYesNoFieldProps
   * @extends IYesNoFieldPrivate
   */
  export interface IYesNoSlot
    extends Omit<IYesNoFieldProps, "readonly">,
      IYesNoFieldPrivate {}
  export default IYesNoSlot;
}

declare module "react-declarative/components/One/slots/YesNoSlot/YesNoSlot" {
  import IYesNoSlot from "react-declarative/components/One/slots/YesNoSlot/IYesNoSlot";
  /**
   * Represents a slot for yes/no values.
   * @param props - The props for the YesNoSlot component.
   * @param props.YesNo - The YesNo component provided by the SlotContext.
   * @returns - The rendered YesNo component.
   */
  export const YesNoSlot: (props: IYesNoSlot) => JSX.Element;
  export default YesNoSlot;
}

declare module "react-declarative/components/One/slots/DictSlot/IDictSlot" {
  import {
    IDictFieldProps,
    IDictFieldPrivate,
  } from "react-declarative/components/One/fields/DictField";
  type IDictBase = IDictFieldProps & IDictFieldPrivate;
  /**
   * Represents an interface for a dictionary slot.
   * @interface
   * @extends IDictBase
   */
  export interface IDictSlot extends IDictBase {}
  export default IDictSlot;
}

declare module "react-declarative/components/One/slots/DictSlot/DictSlot" {
  import IDictSlot from "react-declarative/components/One/slots/DictSlot/IDictSlot";
  /**
   * Represents a dictionary slot component.
   * @param props - The props object containing input data.
   * @returns The rendered dictionary slot.
   */
  export const DictSlot: (props: IDictSlot) => JSX.Element;
  export default DictSlot;
}

declare module "react-declarative/components/One/slots/TreeSlot/ITreeSlot" {
  import {
    ITreeFieldProps,
    ITreeFieldPrivate,
  } from "react-declarative/components/One/fields/TreeField";
  type ITreeBase = ITreeFieldProps & ITreeFieldPrivate;
  /**
   * Represents a slot in a tree structure.
   * Extends the interface ITreeBase.
   *
   * @interface
   * @extends ITreeBase
   */
  export interface ITreeSlot extends ITreeBase {}
  export default ITreeSlot;
}

declare module "react-declarative/components/One/slots/TreeSlot/TreeSlot" {
  import ITreeSlot from "react-declarative/components/One/slots/TreeSlot/ITreeSlot";
  /**
   * Represents a slot for a tree component.
   *
   * @param props - The props for the TreeSlot component.
   * @returns - The rendered Tree component.
   */
  export const TreeSlot: (props: ITreeSlot) => JSX.Element;
  export default TreeSlot;
}

declare module "react-declarative/components/One/slots/FileSlot/FileSlot" {
  import IFileSlot from "react-declarative/components/One/slots/FileSlot/IFileSlot";
  /**
   * Represents a file slot component.
   * @param props - The props for the file slot component.
   * @returns The rendered file slot component.
   */
  export const FileSlot: (props: IFileSlot) => JSX.Element;
  export default FileSlot;
}

declare module "react-declarative/components/One/components/OneConfig/OneConfigInstance" {
  export interface IConfig {
    WITH_DIRTY_CLICK_LISTENER: boolean;
    WITH_MOBILE_READONLY_FALLBACK: boolean;
    WITH_WAIT_FOR_MOVE_LISTENER: boolean;
    WITH_WAIT_FOR_TAB_LISTENER: boolean;
    WITH_WAIT_FOR_TOUCH_LISTENER: boolean;
    WITH_DISMOUNT_LISTENER: boolean;
    WITH_SYNC_COMPUTE: boolean;
    CUSTOM_FIELD_DEBOUNCE: number;
    FIELD_BLUR_DEBOUNCE: number;
  }
  export class OneConfigInstance {
    getRef: () => IConfig;
    setValue: (config: Partial<IConfig>) => void;
  }
  export default OneConfigInstance;
}

declare module "react-declarative/components/FadeView/components/DefaultFade" {
  interface IDefaultFadeProps {
    className: string;
    visible: boolean;
    zIndex: number;
    position: "bottom" | "right";
    color?: string;
    none: boolean;
  }
  export const DefaultFade: ({
    className,
    visible,
    color,
    none,
    position,
    zIndex,
  }: IDefaultFadeProps) => JSX.Element;
  export default DefaultFade;
}
